// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// StatsHarvestSubscribersGetCmdImsi holds value of 'imsi' option
var StatsHarvestSubscribersGetCmdImsi string

// StatsHarvestSubscribersGetCmdPeriod holds value of 'period' option
var StatsHarvestSubscribersGetCmdPeriod string

// StatsHarvestSubscribersGetCmdFrom holds value of 'from' option
var StatsHarvestSubscribersGetCmdFrom int64

// StatsHarvestSubscribersGetCmdTo holds value of 'to' option
var StatsHarvestSubscribersGetCmdTo int64

// StatsHarvestSubscribersGetCmdOutputJSONL indicates to output with jsonl format
var StatsHarvestSubscribersGetCmdOutputJSONL bool

func InitStatsHarvestSubscribersGetCmd() {
	StatsHarvestSubscribersGetCmd.Flags().StringVar(&StatsHarvestSubscribersGetCmdImsi, "imsi", "", TRAPI("imsi"))

	StatsHarvestSubscribersGetCmd.Flags().StringVar(&StatsHarvestSubscribersGetCmdPeriod, "period", "", TRAPI("Unit of aggregation.- 'month': Aggregate by month.  The 'from' and 'to' should be UNIX time (in seconds) from 18 months before the current time to the current time. The actual period of interest is not the time specified by 'from' and 'to'.  | Item | Description |  |-|-|  | Actual start time | 00:00:00 on the first day of the month, including the specified UNIX time (in seconds). |  | Actual end time | 24:00:00 of the last day of the month containing the specified UNIX time (in seconds). |- 'day': Aggregate by day.  The 'from' and 'to' should be UNIX time (in seconds) from 18 months before the current time to the current time. The actual period of interest is not the time specified by 'from' and 'to'.  | Item | Description |  |-|-|  | Actual start time | 00:00:00 of the day including the specified UNIX time (in seconds). |  | Actual end time | 24:00:00 of the day including the specified UNIX time (in seconds). |- 'minutes': Aggregate by approximately every 5 minutes.  The 'from' and 'to' must be between 32 days before the current time and the UNIX time (in seconds) of the current time. The actual period to be aggregated is not the time specified by 'from' and 'to'.  | Item | Description |  |-|-|  | Actual Start Time | Start time of approximately 5 minutes including the specified UNIX time (seconds). |  | Actual End Time | End time of approximately 5 minutes including the specified UNIX time (seconds). |"))

	StatsHarvestSubscribersGetCmd.Flags().Int64Var(&StatsHarvestSubscribersGetCmdFrom, "from", 0, TRAPI("Specify the start month/day/minute of the period to be aggregated in UNIX time in seconds."))

	StatsHarvestSubscribersGetCmd.Flags().Int64Var(&StatsHarvestSubscribersGetCmdTo, "to", 0, TRAPI("Specify the end month/day/minute of the period to be aggregated in UNIX time in seconds."))

	StatsHarvestSubscribersGetCmd.Flags().BoolVar(&StatsHarvestSubscribersGetCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	StatsHarvestSubscribersGetCmd.RunE = StatsHarvestSubscribersGetCmdRunE

	StatsHarvestSubscribersCmd.AddCommand(StatsHarvestSubscribersGetCmd)
}

// StatsHarvestSubscribersGetCmd defines 'get' subcommand
var StatsHarvestSubscribersGetCmd = &cobra.Command{
	Use:   "get",
	Short: TRAPI("/stats/harvest/subscribers/{imsi}:get:summary"),
	Long:  TRAPI(`/stats/harvest/subscribers/{imsi}:get:description`) + "\n\n" + createLinkToAPIReference("Stats", "getHarvestStats"),
}

func StatsHarvestSubscribersGetCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	profile := getProfileIfExist()

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  profile,
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectStatsHarvestSubscribersGetCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if StatsHarvestSubscribersGetCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectStatsHarvestSubscribersGetCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("imsi", "imsi", "path", parsedBody, StatsHarvestSubscribersGetCmdImsi)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("period", "period", "query", parsedBody, StatsHarvestSubscribersGetCmdPeriod)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredIntegerParameterIsSupplied("from", "from", "query", parsedBody, StatsHarvestSubscribersGetCmdFrom)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredIntegerParameterIsSupplied("to", "to", "query", parsedBody, StatsHarvestSubscribersGetCmdTo)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForStatsHarvestSubscribersGetCmd("/stats/harvest/subscribers/{imsi}"),
		query:  buildQueryForStatsHarvestSubscribersGetCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForStatsHarvestSubscribersGetCmd(path string) string {

	escapedImsi := url.PathEscape(StatsHarvestSubscribersGetCmdImsi)

	path = strReplace(path, "{"+"imsi"+"}", escapedImsi, -1)

	return path
}

func buildQueryForStatsHarvestSubscribersGetCmd() url.Values {
	result := url.Values{}

	if StatsHarvestSubscribersGetCmdPeriod != "" {
		result.Add("period", StatsHarvestSubscribersGetCmdPeriod)
	}

	if StatsHarvestSubscribersGetCmdFrom != 0 {
		result.Add("from", sprintf("%d", StatsHarvestSubscribersGetCmdFrom))
	}

	if StatsHarvestSubscribersGetCmdTo != 0 {
		result.Add("to", sprintf("%d", StatsHarvestSubscribersGetCmdTo))
	}

	return result
}
