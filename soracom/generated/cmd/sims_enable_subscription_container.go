// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"

	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// SimsEnableSubscriptionContainerCmdContainerId holds value of 'containerId' option
var SimsEnableSubscriptionContainerCmdContainerId string

// SimsEnableSubscriptionContainerCmdIccid holds value of 'iccid' option
var SimsEnableSubscriptionContainerCmdIccid string

// SimsEnableSubscriptionContainerCmdSimId holds value of 'sim_id' option
var SimsEnableSubscriptionContainerCmdSimId string

func init() {
	SimsEnableSubscriptionContainerCmd.Flags().StringVar(&SimsEnableSubscriptionContainerCmdContainerId, "container-id", "", TRAPI("Identifier of the target container"))

	SimsEnableSubscriptionContainerCmd.Flags().StringVar(&SimsEnableSubscriptionContainerCmdIccid, "iccid", "", TRAPI("Iccid of the target profile"))

	SimsEnableSubscriptionContainerCmd.Flags().StringVar(&SimsEnableSubscriptionContainerCmdSimId, "sim-id", "", TRAPI("SIM ID of the target SIM."))
	SimsCmd.AddCommand(SimsEnableSubscriptionContainerCmd)
}

// SimsEnableSubscriptionContainerCmd defines 'enable-subscription-container' subcommand
var SimsEnableSubscriptionContainerCmd = &cobra.Command{
	Use:   "enable-subscription-container",
	Short: TRAPI("/sims/{sim_id}/profiles/{iccid}/subscription_containers/{containerId}/enable:post:summary"),
	Long:  TRAPI(`/sims/{sim_id}/profiles/{iccid}/subscription_containers/{containerId}/enable:post:description`),
	RunE: func(cmd *cobra.Command, args []string) error {
		opt := &apiClientOptions{
			BasePath: "/v1",
			Language: getSelectedLanguage(),
		}

		ac := newAPIClient(opt)
		if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
			ac.SetVerbose(true)
		}
		err := authHelper(ac, cmd, args)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		param, err := collectSimsEnableSubscriptionContainerCmdParams(ac)
		if err != nil {
			return err
		}

		body, err := ac.callAPI(param)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if body == "" {
			return nil
		}

		if queryString != "" {
			return processQuery(queryString, body)
		}

		if rawOutput {
			_, err = os.Stdout.Write([]byte(body))
		} else {
			return prettyPrintStringAsJSON(body)
		}
		return err
	},
}

func collectSimsEnableSubscriptionContainerCmdParams(ac *apiClient) (*apiParams, error) {
	if SimsEnableSubscriptionContainerCmdContainerId == "" {
		return nil, fmt.Errorf("required parameter '%s' is not specified", "container-id")
	}

	if SimsEnableSubscriptionContainerCmdIccid == "" {
		return nil, fmt.Errorf("required parameter '%s' is not specified", "iccid")
	}

	if SimsEnableSubscriptionContainerCmdSimId == "" {
		return nil, fmt.Errorf("required parameter '%s' is not specified", "sim-id")
	}

	return &apiParams{
		method: "POST",
		path:   buildPathForSimsEnableSubscriptionContainerCmd("/sims/{sim_id}/profiles/{iccid}/subscription_containers/{containerId}/enable"),
		query:  buildQueryForSimsEnableSubscriptionContainerCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSimsEnableSubscriptionContainerCmd(path string) string {

	escapedContainerId := url.PathEscape(SimsEnableSubscriptionContainerCmdContainerId)

	path = strReplace(path, "{"+"containerId"+"}", escapedContainerId, -1)

	escapedIccid := url.PathEscape(SimsEnableSubscriptionContainerCmdIccid)

	path = strReplace(path, "{"+"iccid"+"}", escapedIccid, -1)

	escapedSimId := url.PathEscape(SimsEnableSubscriptionContainerCmdSimId)

	path = strReplace(path, "{"+"sim_id"+"}", escapedSimId, -1)

	return path
}

func buildQueryForSimsEnableSubscriptionContainerCmd() url.Values {
	result := url.Values{}

	return result
}
