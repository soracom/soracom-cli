// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// SimsGetTestingUsageCmdSimId holds value of 'sim_id' option
var SimsGetTestingUsageCmdSimId string

func InitSimsGetTestingUsageCmd() {
	SimsGetTestingUsageCmd.Flags().StringVar(&SimsGetTestingUsageCmdSimId, "sim-id", "", TRAPI("SIM ID of the target IoT SIM."))

	SimsGetTestingUsageCmd.RunE = SimsGetTestingUsageCmdRunE

	SimsCmd.AddCommand(SimsGetTestingUsageCmd)
}

// SimsGetTestingUsageCmd defines 'get-testing-usage' subcommand
var SimsGetTestingUsageCmd = &cobra.Command{
	Use:   "get-testing-usage",
	Short: TRAPI("/sims/{sim_id}/testing/usage:get:summary"),
	Long:  TRAPI(`/sims/{sim_id}/testing/usage:get:description`) + "\n\n" + createLinkToAPIReference("Sim", "getTestingUsage"),
}

func SimsGetTestingUsageCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectSimsGetTestingUsageCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSimsGetTestingUsageCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("sim_id", "sim-id", "path", parsedBody, SimsGetTestingUsageCmdSimId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForSimsGetTestingUsageCmd("/sims/{sim_id}/testing/usage"),
		query:  buildQueryForSimsGetTestingUsageCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSimsGetTestingUsageCmd(path string) string {

	escapedSimId := url.PathEscape(SimsGetTestingUsageCmdSimId)

	path = strReplace(path, "{"+"sim_id"+"}", escapedSimId, -1)

	return path
}

func buildQueryForSimsGetTestingUsageCmd() url.Values {
	result := url.Values{}

	return result
}
