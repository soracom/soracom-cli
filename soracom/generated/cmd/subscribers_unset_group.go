// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"

	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// SubscribersUnsetGroupCmdImsi holds value of 'imsi' option
var SubscribersUnsetGroupCmdImsi string

func init() {
	SubscribersUnsetGroupCmd.Flags().StringVar(&SubscribersUnsetGroupCmdImsi, "imsi", "", TRAPI("IMSI of the target subscriber."))
	SubscribersCmd.AddCommand(SubscribersUnsetGroupCmd)
}

// SubscribersUnsetGroupCmd defines 'unset-group' subcommand
var SubscribersUnsetGroupCmd = &cobra.Command{
	Use:   "unset-group",
	Short: TRAPI("/subscribers/{imsi}/unset_group:post:summary"),
	Long:  TRAPI(`/subscribers/{imsi}/unset_group:post:description`),
	RunE: func(cmd *cobra.Command, args []string) error {
		opt := &apiClientOptions{
			BasePath: "/v1",
			Language: getSelectedLanguage(),
		}

		ac := newAPIClient(opt)
		if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
			ac.SetVerbose(true)
		}
		err := authHelper(ac, cmd, args)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		param, err := collectSubscribersUnsetGroupCmdParams(ac)
		if err != nil {
			return err
		}

		body, err := ac.callAPI(param)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if body == "" {
			return nil
		}

		if queryString != "" {
			return processQuery(queryString, body)
		}

		if rawOutput {
			_, err = os.Stdout.Write([]byte(body))
		} else {
			return prettyPrintStringAsJSON(body)
		}
		return err
	},
}

func collectSubscribersUnsetGroupCmdParams(ac *apiClient) (*apiParams, error) {
	if SubscribersUnsetGroupCmdImsi == "" {
		return nil, fmt.Errorf("required parameter '%s' is not specified", "imsi")
	}

	return &apiParams{
		method: "POST",
		path:   buildPathForSubscribersUnsetGroupCmd("/subscribers/{imsi}/unset_group"),
		query:  buildQueryForSubscribersUnsetGroupCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSubscribersUnsetGroupCmd(path string) string {

	escapedImsi := url.PathEscape(SubscribersUnsetGroupCmdImsi)

	path = strReplace(path, "{"+"imsi"+"}", escapedImsi, -1)

	return path
}

func buildQueryForSubscribersUnsetGroupCmd() url.Values {
	result := url.Values{}

	return result
}
