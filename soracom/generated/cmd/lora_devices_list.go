// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// LoraDevicesListCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var LoraDevicesListCmdLastEvaluatedKey string

// LoraDevicesListCmdTagName holds value of 'tag_name' option
var LoraDevicesListCmdTagName string

// LoraDevicesListCmdTagValue holds value of 'tag_value' option
var LoraDevicesListCmdTagValue string

// LoraDevicesListCmdTagValueMatchMode holds value of 'tag_value_match_mode' option
var LoraDevicesListCmdTagValueMatchMode string

// LoraDevicesListCmdLimit holds value of 'limit' option
var LoraDevicesListCmdLimit int64

// LoraDevicesListCmdPaginate indicates to do pagination or not
var LoraDevicesListCmdPaginate bool

// LoraDevicesListCmdOutputJSONL indicates to output with jsonl format
var LoraDevicesListCmdOutputJSONL bool

func InitLoraDevicesListCmd() {
	LoraDevicesListCmd.Flags().StringVar(&LoraDevicesListCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("The device ID of the last LoRaWAN device retrieved on the previous page. By specifying this parameter, you can continue to retrieve the list from the next LoRaWAN device onward."))

	LoraDevicesListCmd.Flags().StringVar(&LoraDevicesListCmdTagName, "tag-name", "", TRAPI("Tag name for filtering the search (exact match)."))

	LoraDevicesListCmd.Flags().StringVar(&LoraDevicesListCmdTagValue, "tag-value", "", TRAPI("Tag search string for filtering the search. Required when 'tag_name' has been specified."))

	LoraDevicesListCmd.Flags().StringVar(&LoraDevicesListCmdTagValueMatchMode, "tag-value-match-mode", "exact", TRAPI("Tag match mode."))

	LoraDevicesListCmd.Flags().Int64Var(&LoraDevicesListCmdLimit, "limit", 0, TRAPI("Maximum number of LoRaWAN devices to retrieve."))

	LoraDevicesListCmd.Flags().BoolVar(&LoraDevicesListCmdPaginate, "fetch-all", false, TRCLI("cli.common_params.paginate.short_help"))

	LoraDevicesListCmd.Flags().BoolVar(&LoraDevicesListCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	LoraDevicesListCmd.RunE = LoraDevicesListCmdRunE

	LoraDevicesCmd.AddCommand(LoraDevicesListCmd)
}

// LoraDevicesListCmd defines 'list' subcommand
var LoraDevicesListCmd = &cobra.Command{
	Use:   "list",
	Short: TRAPI("/lora_devices:get:summary"),
	Long:  TRAPI(`/lora_devices:get:description`) + "\n\n" + createLinkToAPIReference("LoraDevice", "listLoraDevices"),
}

func LoraDevicesListCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectLoraDevicesListCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if LoraDevicesListCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectLoraDevicesListCmdParams(ac *apiClient) (*apiParams, error) {

	return &apiParams{
		method: "GET",
		path:   buildPathForLoraDevicesListCmd("/lora_devices"),
		query:  buildQueryForLoraDevicesListCmd(),

		doPagination:                      LoraDevicesListCmdPaginate,
		paginationKeyHeaderInResponse:     "x-soracom-next-key",
		paginationRequestParameterInQuery: "last_evaluated_key",

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForLoraDevicesListCmd(path string) string {

	return path
}

func buildQueryForLoraDevicesListCmd() url.Values {
	result := url.Values{}

	if LoraDevicesListCmdLastEvaluatedKey != "" {
		result.Add("last_evaluated_key", LoraDevicesListCmdLastEvaluatedKey)
	}

	if LoraDevicesListCmdTagName != "" {
		result.Add("tag_name", LoraDevicesListCmdTagName)
	}

	if LoraDevicesListCmdTagValue != "" {
		result.Add("tag_value", LoraDevicesListCmdTagValue)
	}

	if LoraDevicesListCmdTagValueMatchMode != "exact" {
		result.Add("tag_value_match_mode", LoraDevicesListCmdTagValueMatchMode)
	}

	if LoraDevicesListCmdLimit != 0 {
		result.Add("limit", sprintf("%d", LoraDevicesListCmdLimit))
	}

	return result
}
