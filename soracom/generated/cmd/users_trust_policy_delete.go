// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// UsersTrustPolicyDeleteCmdOperatorId holds value of 'operator_id' option
var UsersTrustPolicyDeleteCmdOperatorId string

// UsersTrustPolicyDeleteCmdUserName holds value of 'user_name' option
var UsersTrustPolicyDeleteCmdUserName string

func InitUsersTrustPolicyDeleteCmd() {
	UsersTrustPolicyDeleteCmd.Flags().StringVar(&UsersTrustPolicyDeleteCmdOperatorId, "operator-id", "", TRAPI("Operator ID."))

	UsersTrustPolicyDeleteCmd.Flags().StringVar(&UsersTrustPolicyDeleteCmdUserName, "user-name", "", TRAPI("SAM user name."))

	UsersTrustPolicyDeleteCmd.RunE = UsersTrustPolicyDeleteCmdRunE

	UsersTrustPolicyCmd.AddCommand(UsersTrustPolicyDeleteCmd)
}

// UsersTrustPolicyDeleteCmd defines 'delete' subcommand
var UsersTrustPolicyDeleteCmd = &cobra.Command{
	Use:   "delete",
	Short: TRAPI("/operators/{operator_id}/users/{user_name}/trust_policy:delete:summary"),
	Long:  TRAPI(`/operators/{operator_id}/users/{user_name}/trust_policy:delete:description`) + "\n\n" + createLinkToAPIReference("User", "deleteUserTrustPolicy"),
}

func UsersTrustPolicyDeleteCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	profile := getProfileIfExist()

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  profile,
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectUsersTrustPolicyDeleteCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectUsersTrustPolicyDeleteCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	if UsersTrustPolicyDeleteCmdOperatorId == "" {
		UsersTrustPolicyDeleteCmdOperatorId = ac.apiCredentials.getOperatorID()
	}

	err = checkIfRequiredStringParameterIsSupplied("user_name", "user-name", "path", parsedBody, UsersTrustPolicyDeleteCmdUserName)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "DELETE",
		path:   buildPathForUsersTrustPolicyDeleteCmd("/operators/{operator_id}/users/{user_name}/trust_policy"),
		query:  buildQueryForUsersTrustPolicyDeleteCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForUsersTrustPolicyDeleteCmd(path string) string {

	escapedOperatorId := url.PathEscape(UsersTrustPolicyDeleteCmdOperatorId)

	path = strReplace(path, "{"+"operator_id"+"}", escapedOperatorId, -1)

	escapedUserName := url.PathEscape(UsersTrustPolicyDeleteCmdUserName)

	path = strReplace(path, "{"+"user_name"+"}", escapedUserName, -1)

	return path
}

func buildQueryForUsersTrustPolicyDeleteCmd() url.Values {
	result := url.Values{}

	return result
}
