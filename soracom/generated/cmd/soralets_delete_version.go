// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// SoraletsDeleteVersionCmdSoraletId holds value of 'soralet_id' option
var SoraletsDeleteVersionCmdSoraletId string

// SoraletsDeleteVersionCmdVersion holds value of 'version' option
var SoraletsDeleteVersionCmdVersion int64

func InitSoraletsDeleteVersionCmd() {
	SoraletsDeleteVersionCmd.Flags().StringVar(&SoraletsDeleteVersionCmdSoraletId, "soralet-id", "", TRAPI("The identifier of Soralet."))

	SoraletsDeleteVersionCmd.Flags().Int64Var(&SoraletsDeleteVersionCmdVersion, "version", 0, TRAPI("Soralet version."))

	SoraletsDeleteVersionCmd.RunE = SoraletsDeleteVersionCmdRunE

	SoraletsCmd.AddCommand(SoraletsDeleteVersionCmd)
}

// SoraletsDeleteVersionCmd defines 'delete-version' subcommand
var SoraletsDeleteVersionCmd = &cobra.Command{
	Use:   "delete-version",
	Short: TRAPI("/soralets/{soralet_id}/versions/{version}:delete:summary"),
	Long:  TRAPI(`/soralets/{soralet_id}/versions/{version}:delete:description`) + "\n\n" + createLinkToAPIReference("Soralet", "deleteSoraletVersion"),
}

func SoraletsDeleteVersionCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectSoraletsDeleteVersionCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSoraletsDeleteVersionCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("soralet_id", "soralet-id", "path", parsedBody, SoraletsDeleteVersionCmdSoraletId)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredIntegerParameterIsSupplied("version", "version", "path", parsedBody, SoraletsDeleteVersionCmdVersion)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "DELETE",
		path:   buildPathForSoraletsDeleteVersionCmd("/soralets/{soralet_id}/versions/{version}"),
		query:  buildQueryForSoraletsDeleteVersionCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSoraletsDeleteVersionCmd(path string) string {

	escapedSoraletId := url.PathEscape(SoraletsDeleteVersionCmdSoraletId)

	path = strReplace(path, "{"+"soralet_id"+"}", escapedSoraletId, -1)

	path = strReplace(path, "{"+"version"+"}", url.PathEscape(sprintf("%d", SoraletsDeleteVersionCmdVersion)), -1)

	return path
}

func buildQueryForSoraletsDeleteVersionCmd() url.Values {
	result := url.Values{}

	return result
}
