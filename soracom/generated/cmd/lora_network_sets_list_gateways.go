// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// LoraNetworkSetsListGatewaysCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var LoraNetworkSetsListGatewaysCmdLastEvaluatedKey string

// LoraNetworkSetsListGatewaysCmdNsId holds value of 'ns_id' option
var LoraNetworkSetsListGatewaysCmdNsId string

// LoraNetworkSetsListGatewaysCmdLimit holds value of 'limit' option
var LoraNetworkSetsListGatewaysCmdLimit int64

// LoraNetworkSetsListGatewaysCmdPaginate indicates to do pagination or not
var LoraNetworkSetsListGatewaysCmdPaginate bool

// LoraNetworkSetsListGatewaysCmdOutputJSONL indicates to output with jsonl format
var LoraNetworkSetsListGatewaysCmdOutputJSONL bool

func InitLoraNetworkSetsListGatewaysCmd() {
	LoraNetworkSetsListGatewaysCmd.Flags().StringVar(&LoraNetworkSetsListGatewaysCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("The Gateway ID of the last LoRaWAN gateway retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next LoRaWAN gateway onward."))

	LoraNetworkSetsListGatewaysCmd.Flags().StringVar(&LoraNetworkSetsListGatewaysCmdNsId, "ns-id", "", TRAPI("ID of the target LoRaWAN network set."))

	LoraNetworkSetsListGatewaysCmd.Flags().Int64Var(&LoraNetworkSetsListGatewaysCmdLimit, "limit", 0, TRAPI("Maximum number of LoRaWAN gateways to retrieve."))

	LoraNetworkSetsListGatewaysCmd.Flags().BoolVar(&LoraNetworkSetsListGatewaysCmdPaginate, "fetch-all", false, TRCLI("cli.common_params.paginate.short_help"))

	LoraNetworkSetsListGatewaysCmd.Flags().BoolVar(&LoraNetworkSetsListGatewaysCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	LoraNetworkSetsListGatewaysCmd.RunE = LoraNetworkSetsListGatewaysCmdRunE

	LoraNetworkSetsCmd.AddCommand(LoraNetworkSetsListGatewaysCmd)
}

// LoraNetworkSetsListGatewaysCmd defines 'list-gateways' subcommand
var LoraNetworkSetsListGatewaysCmd = &cobra.Command{
	Use:   "list-gateways",
	Short: TRAPI("/lora_network_sets/{ns_id}/gateways:get:summary"),
	Long:  TRAPI(`/lora_network_sets/{ns_id}/gateways:get:description`) + "\n\n" + createLinkToAPIReference("LoraNetworkSet", "listGatewaysInLoraNetworkSet"),
}

func LoraNetworkSetsListGatewaysCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectLoraNetworkSetsListGatewaysCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if LoraNetworkSetsListGatewaysCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectLoraNetworkSetsListGatewaysCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error

	err = checkIfRequiredStringParameterIsSupplied("ns_id", "ns-id", "path", parsedBody, LoraNetworkSetsListGatewaysCmdNsId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForLoraNetworkSetsListGatewaysCmd("/lora_network_sets/{ns_id}/gateways"),
		query:  buildQueryForLoraNetworkSetsListGatewaysCmd(),

		doPagination:                      LoraNetworkSetsListGatewaysCmdPaginate,
		paginationKeyHeaderInResponse:     "x-soracom-next-key",
		paginationRequestParameterInQuery: "last_evaluated_key",

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForLoraNetworkSetsListGatewaysCmd(path string) string {

	escapedNsId := url.PathEscape(LoraNetworkSetsListGatewaysCmdNsId)

	path = strReplace(path, "{"+"ns_id"+"}", escapedNsId, -1)

	return path
}

func buildQueryForLoraNetworkSetsListGatewaysCmd() url.Values {
	result := url.Values{}

	if LoraNetworkSetsListGatewaysCmdLastEvaluatedKey != "" {
		result.Add("last_evaluated_key", LoraNetworkSetsListGatewaysCmdLastEvaluatedKey)
	}

	if LoraNetworkSetsListGatewaysCmdLimit != 0 {
		result.Add("limit", sprintf("%d", LoraNetworkSetsListGatewaysCmdLimit))
	}

	return result
}
