// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// DataListResourceMetadataCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var DataListResourceMetadataCmdLastEvaluatedKey string

// DataListResourceMetadataCmdResourceType holds value of 'resource_type' option
var DataListResourceMetadataCmdResourceType string

// DataListResourceMetadataCmdLimit holds value of 'limit' option
var DataListResourceMetadataCmdLimit int64

// DataListResourceMetadataCmdPaginate indicates to do pagination or not
var DataListResourceMetadataCmdPaginate bool

// DataListResourceMetadataCmdOutputJSONL indicates to output with jsonl format
var DataListResourceMetadataCmdOutputJSONL bool

func InitDataListResourceMetadataCmd() {
	DataListResourceMetadataCmd.Flags().StringVar(&DataListResourceMetadataCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("The value of the 'x-soracom-next-key' header from the previous response. Specify this to retrieve the next page."))

	DataListResourceMetadataCmd.Flags().StringVar(&DataListResourceMetadataCmdResourceType, "resource-type", "", TRAPI("Type of data source resource.- 'Subscriber': IoT SIM.- 'LoraDevice': LoRaWAN device.- 'Sim': IoT SIM.- 'SigfoxDevice': Sigfox device.- 'Device': Inventory device.- 'SoraCam': Compatible camera device."))

	DataListResourceMetadataCmd.Flags().Int64Var(&DataListResourceMetadataCmdLimit, "limit", 0, TRAPI("Maximum number of data entries to retrieve."))

	DataListResourceMetadataCmd.Flags().BoolVar(&DataListResourceMetadataCmdPaginate, "fetch-all", false, TRCLI("cli.common_params.paginate.short_help"))

	DataListResourceMetadataCmd.Flags().BoolVar(&DataListResourceMetadataCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	DataListResourceMetadataCmd.RunE = DataListResourceMetadataCmdRunE

	DataCmd.AddCommand(DataListResourceMetadataCmd)
}

// DataListResourceMetadataCmd defines 'list-resource-metadata' subcommand
var DataListResourceMetadataCmd = &cobra.Command{
	Use:   "list-resource-metadata",
	Short: TRAPI("/data/metadata/resources:get:summary"),
	Long:  TRAPI(`/data/metadata/resources:get:description`) + "\n\n" + createLinkToAPIReference("DataEntry", "listDataResourceMetadata"),
}

func DataListResourceMetadataCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectDataListResourceMetadataCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if DataListResourceMetadataCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectDataListResourceMetadataCmdParams(ac *apiClient) (*apiParams, error) {

	return &apiParams{
		method: "GET",
		path:   buildPathForDataListResourceMetadataCmd("/data/metadata/resources"),
		query:  buildQueryForDataListResourceMetadataCmd(),

		doPagination:                      DataListResourceMetadataCmdPaginate,
		paginationKeyHeaderInResponse:     "x-soracom-next-key",
		paginationRequestParameterInQuery: "last_evaluated_key",

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForDataListResourceMetadataCmd(path string) string {

	return path
}

func buildQueryForDataListResourceMetadataCmd() url.Values {
	result := url.Values{}

	if DataListResourceMetadataCmdLastEvaluatedKey != "" {
		result.Add("last_evaluated_key", DataListResourceMetadataCmdLastEvaluatedKey)
	}

	if DataListResourceMetadataCmdResourceType != "" {
		result.Add("resource_type", DataListResourceMetadataCmdResourceType)
	}

	if DataListResourceMetadataCmdLimit != 0 {
		result.Add("limit", sprintf("%d", DataListResourceMetadataCmdLimit))
	}

	return result
}
