// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// SimProfileOrdersListCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var SimProfileOrdersListCmdLastEvaluatedKey string

// SimProfileOrdersListCmdLimit holds value of 'limit' option
var SimProfileOrdersListCmdLimit int64

// SimProfileOrdersListCmdPaginate indicates to do pagination or not
var SimProfileOrdersListCmdPaginate bool

// SimProfileOrdersListCmdOutputJSONL indicates to output with jsonl format
var SimProfileOrdersListCmdOutputJSONL bool

func InitSimProfileOrdersListCmd() {
	SimProfileOrdersListCmd.Flags().StringVar(&SimProfileOrdersListCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("The ID of the last eSIM profile order retrieved on the previous page. By repeating the API call while specifying this parameter, the next page of eSIM profile orders will be returned."))

	SimProfileOrdersListCmd.Flags().Int64Var(&SimProfileOrdersListCmdLimit, "limit", 100, TRAPI("Maximum number of eSIM profile orders to retrieve. However, the number of eSIM profile orders returned may be less than the specified value."))

	SimProfileOrdersListCmd.Flags().BoolVar(&SimProfileOrdersListCmdPaginate, "fetch-all", false, TRCLI("cli.common_params.paginate.short_help"))

	SimProfileOrdersListCmd.Flags().BoolVar(&SimProfileOrdersListCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	SimProfileOrdersListCmd.RunE = SimProfileOrdersListCmdRunE

	SimProfileOrdersCmd.AddCommand(SimProfileOrdersListCmd)
}

// SimProfileOrdersListCmd defines 'list' subcommand
var SimProfileOrdersListCmd = &cobra.Command{
	Use:   "list",
	Short: TRAPI("/sim_profile_orders:get:summary"),
	Long:  TRAPI(`/sim_profile_orders:get:description`) + "\n\n" + createLinkToAPIReference("SimProfileOrder", "listProfileOrders"),
}

func SimProfileOrdersListCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectSimProfileOrdersListCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if SimProfileOrdersListCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSimProfileOrdersListCmdParams(ac *apiClient) (*apiParams, error) {

	return &apiParams{
		method: "GET",
		path:   buildPathForSimProfileOrdersListCmd("/sim_profile_orders"),
		query:  buildQueryForSimProfileOrdersListCmd(),

		doPagination:                      SimProfileOrdersListCmdPaginate,
		paginationKeyHeaderInResponse:     "x-soracom-next-key",
		paginationRequestParameterInQuery: "last_evaluated_key",

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSimProfileOrdersListCmd(path string) string {

	return path
}

func buildQueryForSimProfileOrdersListCmd() url.Values {
	result := url.Values{}

	if SimProfileOrdersListCmdLastEvaluatedKey != "" {
		result.Add("last_evaluated_key", SimProfileOrdersListCmdLastEvaluatedKey)
	}

	if SimProfileOrdersListCmdLimit != 100 {
		result.Add("limit", sprintf("%d", SimProfileOrdersListCmdLimit))
	}

	return result
}
