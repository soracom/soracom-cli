// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// VpgGetCmdVpgId holds value of 'vpg_id' option
var VpgGetCmdVpgId string

func InitVpgGetCmd() {
	VpgGetCmd.Flags().StringVar(&VpgGetCmdVpgId, "vpg-id", "", TRAPI("Target VPG ID."))

	VpgGetCmd.RunE = VpgGetCmdRunE

	VpgCmd.AddCommand(VpgGetCmd)
}

// VpgGetCmd defines 'get' subcommand
var VpgGetCmd = &cobra.Command{
	Use:   "get",
	Short: TRAPI("/virtual_private_gateways/{vpg_id}:get:summary"),
	Long:  TRAPI(`/virtual_private_gateways/{vpg_id}:get:description`) + "\n\n" + createLinkToAPIReference("VirtualPrivateGateway", "getVirtualPrivateGateway"),
}

func VpgGetCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectVpgGetCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectVpgGetCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("vpg_id", "vpg-id", "path", parsedBody, VpgGetCmdVpgId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForVpgGetCmd("/virtual_private_gateways/{vpg_id}"),
		query:  buildQueryForVpgGetCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForVpgGetCmd(path string) string {

	escapedVpgId := url.PathEscape(VpgGetCmdVpgId)

	path = strReplace(path, "{"+"vpg_id"+"}", escapedVpgId, -1)

	return path
}

func buildQueryForVpgGetCmd() url.Values {
	result := url.Values{}

	return result
}
