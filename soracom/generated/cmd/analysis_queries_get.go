// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// AnalysisQueriesGetCmdQueryId holds value of 'query_id' option
var AnalysisQueriesGetCmdQueryId string

func InitAnalysisQueriesGetCmd() {
	AnalysisQueriesGetCmd.Flags().StringVar(&AnalysisQueriesGetCmdQueryId, "query-id", "", TRAPI("Database query ID."))

	AnalysisQueriesGetCmd.RunE = AnalysisQueriesGetCmdRunE

	AnalysisQueriesCmd.AddCommand(AnalysisQueriesGetCmd)
}

// AnalysisQueriesGetCmd defines 'get' subcommand
var AnalysisQueriesGetCmd = &cobra.Command{
	Use:   "get",
	Short: TRAPI("/analysis/queries/{query_id}:get:summary"),
	Long:  TRAPI(`/analysis/queries/{query_id}:get:description`) + "\n\n" + createLinkToAPIReference("Analysis", "getAnalysisQueries"),
}

func AnalysisQueriesGetCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectAnalysisQueriesGetCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectAnalysisQueriesGetCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("query_id", "query-id", "path", parsedBody, AnalysisQueriesGetCmdQueryId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForAnalysisQueriesGetCmd("/analysis/queries/{query_id}"),
		query:  buildQueryForAnalysisQueriesGetCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForAnalysisQueriesGetCmd(path string) string {

	escapedQueryId := url.PathEscape(AnalysisQueriesGetCmdQueryId)

	path = strReplace(path, "{"+"query_id"+"}", escapedQueryId, -1)

	return path
}

func buildQueryForAnalysisQueriesGetCmd() url.Values {
	result := url.Values{}

	return result
}
