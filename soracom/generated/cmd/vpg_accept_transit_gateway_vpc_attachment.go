// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// VpgAcceptTransitGatewayVpcAttachmentCmdCustomerTgwVpcAttachmentId holds value of 'customer_tgw_vpc_attachment_id' option
var VpgAcceptTransitGatewayVpcAttachmentCmdCustomerTgwVpcAttachmentId string

// VpgAcceptTransitGatewayVpcAttachmentCmdVpgId holds value of 'vpg_id' option
var VpgAcceptTransitGatewayVpcAttachmentCmdVpgId string

func InitVpgAcceptTransitGatewayVpcAttachmentCmd() {
	VpgAcceptTransitGatewayVpcAttachmentCmd.Flags().StringVar(&VpgAcceptTransitGatewayVpcAttachmentCmdCustomerTgwVpcAttachmentId, "customer-tgw-vpc-attachment-id", "", TRAPI("Transit gateway VPC attachment ID"))

	VpgAcceptTransitGatewayVpcAttachmentCmd.Flags().StringVar(&VpgAcceptTransitGatewayVpcAttachmentCmdVpgId, "vpg-id", "", TRAPI("Target VPG ID."))

	VpgAcceptTransitGatewayVpcAttachmentCmd.RunE = VpgAcceptTransitGatewayVpcAttachmentCmdRunE

	VpgCmd.AddCommand(VpgAcceptTransitGatewayVpcAttachmentCmd)
}

// VpgAcceptTransitGatewayVpcAttachmentCmd defines 'accept-transit-gateway-vpc-attachment' subcommand
var VpgAcceptTransitGatewayVpcAttachmentCmd = &cobra.Command{
	Use:   "accept-transit-gateway-vpc-attachment",
	Short: TRAPI("/virtual_private_gateways/{vpg_id}/transit_gateway_vpc_attachments/{customer_tgw_vpc_attachment_id}/accept:post:summary"),
	Long:  TRAPI(`/virtual_private_gateways/{vpg_id}/transit_gateway_vpc_attachments/{customer_tgw_vpc_attachment_id}/accept:post:description`) + "\n\n" + createLinkToAPIReference("VirtualPrivateGateway", "acceptTransitGatewayVpcAttachmentFromCustomer"),
}

func VpgAcceptTransitGatewayVpcAttachmentCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectVpgAcceptTransitGatewayVpcAttachmentCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectVpgAcceptTransitGatewayVpcAttachmentCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("customer_tgw_vpc_attachment_id", "customer-tgw-vpc-attachment-id", "path", parsedBody, VpgAcceptTransitGatewayVpcAttachmentCmdCustomerTgwVpcAttachmentId)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("vpg_id", "vpg-id", "path", parsedBody, VpgAcceptTransitGatewayVpcAttachmentCmdVpgId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "POST",
		path:   buildPathForVpgAcceptTransitGatewayVpcAttachmentCmd("/virtual_private_gateways/{vpg_id}/transit_gateway_vpc_attachments/{customer_tgw_vpc_attachment_id}/accept"),
		query:  buildQueryForVpgAcceptTransitGatewayVpcAttachmentCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForVpgAcceptTransitGatewayVpcAttachmentCmd(path string) string {

	escapedCustomerTgwVpcAttachmentId := url.PathEscape(VpgAcceptTransitGatewayVpcAttachmentCmdCustomerTgwVpcAttachmentId)

	path = strReplace(path, "{"+"customer_tgw_vpc_attachment_id"+"}", escapedCustomerTgwVpcAttachmentId, -1)

	escapedVpgId := url.PathEscape(VpgAcceptTransitGatewayVpcAttachmentCmdVpgId)

	path = strReplace(path, "{"+"vpg_id"+"}", escapedVpgId, -1)

	return path
}

func buildQueryForVpgAcceptTransitGatewayVpcAttachmentCmd() url.Values {
	result := url.Values{}

	return result
}
