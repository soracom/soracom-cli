// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"
	"fmt"
	"io"
	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// DevicesCreateCmdDeviceId holds value of 'device_id' option
var DevicesCreateCmdDeviceId string

// DevicesCreateCmdEndpoint holds value of 'endpoint' option
var DevicesCreateCmdEndpoint string

// DevicesCreateCmdFirmwareVersion holds value of 'firmwareVersion' option
var DevicesCreateCmdFirmwareVersion string

// DevicesCreateCmdGroupId holds value of 'groupId' option
var DevicesCreateCmdGroupId string

// DevicesCreateCmdIpAddress holds value of 'ipAddress' option
var DevicesCreateCmdIpAddress string

// DevicesCreateCmdLastModifiedTime holds value of 'lastModifiedTime' option
var DevicesCreateCmdLastModifiedTime string

// DevicesCreateCmdLastRegistrationUpdate holds value of 'lastRegistrationUpdate' option
var DevicesCreateCmdLastRegistrationUpdate string

// DevicesCreateCmdManufacturer holds value of 'manufacturer' option
var DevicesCreateCmdManufacturer string

// DevicesCreateCmdModelNumber holds value of 'modelNumber' option
var DevicesCreateCmdModelNumber string

// DevicesCreateCmdOperatorId holds value of 'operatorId' option
var DevicesCreateCmdOperatorId string

// DevicesCreateCmdRegistrationId holds value of 'registrationId' option
var DevicesCreateCmdRegistrationId string

// DevicesCreateCmdSerialNumber holds value of 'serialNumber' option
var DevicesCreateCmdSerialNumber string

// DevicesCreateCmdRegistrationLifeTime holds value of 'registrationLifeTime' option
var DevicesCreateCmdRegistrationLifeTime int64

// DevicesCreateCmdOnline holds value of 'online' option
var DevicesCreateCmdOnline bool

// DevicesCreateCmdBody holds contents of request body to be sent
var DevicesCreateCmdBody string

func InitDevicesCreateCmd() {
	DevicesCreateCmd.Flags().StringVar(&DevicesCreateCmdDeviceId, "device-id", "", TRAPI(""))

	DevicesCreateCmd.Flags().StringVar(&DevicesCreateCmdEndpoint, "endpoint", "", TRAPI(""))

	DevicesCreateCmd.Flags().StringVar(&DevicesCreateCmdFirmwareVersion, "firmware-version", "", TRAPI(""))

	DevicesCreateCmd.Flags().StringVar(&DevicesCreateCmdGroupId, "group-id", "", TRAPI(""))

	DevicesCreateCmd.Flags().StringVar(&DevicesCreateCmdIpAddress, "ip-address", "", TRAPI(""))

	DevicesCreateCmd.Flags().StringVar(&DevicesCreateCmdLastModifiedTime, "last-modified-time", "", TRAPI(""))

	DevicesCreateCmd.Flags().StringVar(&DevicesCreateCmdLastRegistrationUpdate, "last-registration-update", "", TRAPI(""))

	DevicesCreateCmd.Flags().StringVar(&DevicesCreateCmdManufacturer, "manufacturer", "", TRAPI(""))

	DevicesCreateCmd.Flags().StringVar(&DevicesCreateCmdModelNumber, "model-number", "", TRAPI(""))

	DevicesCreateCmd.Flags().StringVar(&DevicesCreateCmdOperatorId, "operator-id", "", TRAPI(""))

	DevicesCreateCmd.Flags().StringVar(&DevicesCreateCmdRegistrationId, "registration-id", "", TRAPI(""))

	DevicesCreateCmd.Flags().StringVar(&DevicesCreateCmdSerialNumber, "serial-number", "", TRAPI(""))

	DevicesCreateCmd.Flags().Int64Var(&DevicesCreateCmdRegistrationLifeTime, "registration-life-time", 0, TRAPI(""))

	DevicesCreateCmd.Flags().BoolVar(&DevicesCreateCmdOnline, "online", false, TRAPI(""))

	DevicesCreateCmd.Flags().StringVar(&DevicesCreateCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))

	DevicesCreateCmd.RunE = DevicesCreateCmdRunE

	DevicesCmd.AddCommand(DevicesCreateCmd)
}

// DevicesCreateCmd defines 'create' subcommand
var DevicesCreateCmd = &cobra.Command{
	Use:   "create",
	Short: TRAPI("/devices:post:summary"),
	Long:  TRAPI(`/devices:post:description`) + "\n\n" + createLinkToAPIReference("Device", "createDevice"),
}

func DevicesCreateCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	profile := getProfileIfExist()

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  profile,
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectDevicesCreateCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectDevicesCreateCmdParams(ac *apiClient) (*apiParams, error) {
	var body string
	var parsedBody interface{}
	var err error
	body, err = buildBodyForDevicesCreateCmd()
	if err != nil {
		return nil, err
	}
	contentType := "application/json"

	if contentType == "application/json" {
		err = json.Unmarshal([]byte(body), &parsedBody)
		if err != nil {
			return nil, fmt.Errorf("invalid json format specified for `--body` parameter: %s", err)
		}
	}

	return &apiParams{
		method:      "POST",
		path:        buildPathForDevicesCreateCmd("/devices"),
		query:       buildQueryForDevicesCreateCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForDevicesCreateCmd(path string) string {

	return path
}

func buildQueryForDevicesCreateCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForDevicesCreateCmd() (string, error) {
	var result map[string]interface{}

	if DevicesCreateCmdBody != "" {
		var b []byte
		var err error

		if strings.HasPrefix(DevicesCreateCmdBody, "@") {
			fname := strings.TrimPrefix(DevicesCreateCmdBody, "@")
			// #nosec
			b, err = os.ReadFile(fname)
		} else if DevicesCreateCmdBody == "-" {
			b, err = io.ReadAll(os.Stdin)
		} else {
			b = []byte(DevicesCreateCmdBody)
		}

		if err != nil {
			return "", err
		}

		err = json.Unmarshal(b, &result)
		if err != nil {
			return "", err
		}
	}

	if result == nil {
		result = make(map[string]interface{})
	}

	if DevicesCreateCmdDeviceId != "" {
		result["device_id"] = DevicesCreateCmdDeviceId
	}

	if DevicesCreateCmdEndpoint != "" {
		result["endpoint"] = DevicesCreateCmdEndpoint
	}

	if DevicesCreateCmdFirmwareVersion != "" {
		result["firmwareVersion"] = DevicesCreateCmdFirmwareVersion
	}

	if DevicesCreateCmdGroupId != "" {
		result["groupId"] = DevicesCreateCmdGroupId
	}

	if DevicesCreateCmdIpAddress != "" {
		result["ipAddress"] = DevicesCreateCmdIpAddress
	}

	if DevicesCreateCmdLastModifiedTime != "" {
		result["lastModifiedTime"] = DevicesCreateCmdLastModifiedTime
	}

	if DevicesCreateCmdLastRegistrationUpdate != "" {
		result["lastRegistrationUpdate"] = DevicesCreateCmdLastRegistrationUpdate
	}

	if DevicesCreateCmdManufacturer != "" {
		result["manufacturer"] = DevicesCreateCmdManufacturer
	}

	if DevicesCreateCmdModelNumber != "" {
		result["modelNumber"] = DevicesCreateCmdModelNumber
	}

	if DevicesCreateCmdOperatorId != "" {
		result["operatorId"] = DevicesCreateCmdOperatorId
	}

	if DevicesCreateCmdRegistrationId != "" {
		result["registrationId"] = DevicesCreateCmdRegistrationId
	}

	if DevicesCreateCmdSerialNumber != "" {
		result["serialNumber"] = DevicesCreateCmdSerialNumber
	}

	if DevicesCreateCmd.Flags().Lookup("registration-life-time").Changed {
		result["registrationLifeTime"] = DevicesCreateCmdRegistrationLifeTime
	}

	if DevicesCreateCmd.Flags().Lookup("online").Changed {
		result["online"] = DevicesCreateCmdOnline
	}

	resultBytes, err := json.Marshal(result)
	if err != nil {
		return "", err
	}
	return string(resultBytes), nil
}
