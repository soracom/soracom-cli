// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// QuerySimsCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var QuerySimsCmdLastEvaluatedKey string

// QuerySimsCmdSearchType holds value of 'search_type' option
var QuerySimsCmdSearchType string

// QuerySimsCmdSessionStatus holds value of 'session_status' option
var QuerySimsCmdSessionStatus string

// QuerySimsCmdBundles holds multiple values of 'bundles' option
var QuerySimsCmdBundles []string

// QuerySimsCmdGroup holds multiple values of 'group' option
var QuerySimsCmdGroup []string

// QuerySimsCmdIccid holds multiple values of 'iccid' option
var QuerySimsCmdIccid []string

// QuerySimsCmdImsi holds multiple values of 'imsi' option
var QuerySimsCmdImsi []string

// QuerySimsCmdModuleType holds multiple values of 'module_type' option
var QuerySimsCmdModuleType []string

// QuerySimsCmdMsisdn holds multiple values of 'msisdn' option
var QuerySimsCmdMsisdn []string

// QuerySimsCmdName holds multiple values of 'name' option
var QuerySimsCmdName []string

// QuerySimsCmdSerialNumber holds multiple values of 'serial_number' option
var QuerySimsCmdSerialNumber []string

// QuerySimsCmdSimId holds multiple values of 'sim_id' option
var QuerySimsCmdSimId []string

// QuerySimsCmdStatus holds multiple values of 'status' option
var QuerySimsCmdStatus []string

// QuerySimsCmdSubscription holds multiple values of 'subscription' option
var QuerySimsCmdSubscription []string

// QuerySimsCmdTag holds multiple values of 'tag' option
var QuerySimsCmdTag []string

// QuerySimsCmdLimit holds value of 'limit' option
var QuerySimsCmdLimit int64

// QuerySimsCmdOutputJSONL indicates to output with jsonl format
var QuerySimsCmdOutputJSONL bool

func InitQuerySimsCmd() {
	QuerySimsCmd.Flags().StringVar(&QuerySimsCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("The SIM ID of the last SIM retrieved on the previous page. By specifying this parameter, you can continue to retrieve the list from the next SIM onward."))

	QuerySimsCmd.Flags().StringVar(&QuerySimsCmdSearchType, "search-type", "and", TRAPI("The type of search condition.- AND: SIMs which match all of the search parameters will be returned (default if not specified).- OR: SIMs which match any of the search parameters will be returned.If the value of a search parameter contains a comma ',' (or '%2C' when URL-encoded), the value will be split at each comma and treated as multiple search values, and each resulting search value will be evaluated individually according to the AND or OR search condition."))

	QuerySimsCmd.Flags().StringVar(&QuerySimsCmdSessionStatus, "session-status", "NA", TRAPI("Status of the session to search (ONLINE or OFFLINE).- 'NA': Any.- 'ONLINE': Online.- 'OFFLINE': Offline."))

	QuerySimsCmd.Flags().StringSliceVar(&QuerySimsCmdBundles, "bundles", []string{}, TRAPI("Bundles type to search."))

	QuerySimsCmd.Flags().StringSliceVar(&QuerySimsCmdGroup, "group", []string{}, TRAPI("Name of the [group](/en/docs/groups/) to which the IoT SIM belongs."))

	QuerySimsCmd.Flags().StringSliceVar(&QuerySimsCmdIccid, "iccid", []string{}, TRAPI("ICCID to search. An identifier to identify a SIM card or virtual IoT SIM (Virtual SIM/Subscriber)."))

	QuerySimsCmd.Flags().StringSliceVar(&QuerySimsCmdImsi, "imsi", []string{}, TRAPI("IMSI to search."))

	QuerySimsCmd.Flags().StringSliceVar(&QuerySimsCmdModuleType, "module-type", []string{}, TRAPI("Module type of the IoT SIM to search.- 'mini'- 'micro'- 'nano'- 'trio': 3 in 1.- 'embedded'- 'virtual'- 'integrated'"))

	QuerySimsCmd.Flags().StringSliceVar(&QuerySimsCmdMsisdn, "msisdn", []string{}, TRAPI("MSISDN to search."))

	QuerySimsCmd.Flags().StringSliceVar(&QuerySimsCmdName, "name", []string{}, TRAPI("Name to search."))

	QuerySimsCmd.Flags().StringSliceVar(&QuerySimsCmdSerialNumber, "serial-number", []string{}, TRAPI("Serial number to search. This is set only for IoT SIMs for specific regions."))

	QuerySimsCmd.Flags().StringSliceVar(&QuerySimsCmdSimId, "sim-id", []string{}, TRAPI("Identifier of the SIM to search."))

	QuerySimsCmd.Flags().StringSliceVar(&QuerySimsCmdStatus, "status", []string{}, TRAPI("Status of the IoT SIM to search.- 'ready'- 'active'- 'inactive'- 'standby'- 'suspended'- 'terminated'- 'shipped'"))

	QuerySimsCmd.Flags().StringSliceVar(&QuerySimsCmdSubscription, "subscription", []string{}, TRAPI("Subscription of the IoT SIM to search.Global coverage:- 'plan01s'- 'plan01s-low_data_volume': plan01s - Low Data Volume.- 'planP1'- 'planX1'- 'planX2'- 'planX3': planX3 X3-5MB, planX3.- 'planX3-EU'- 'plan-NA1-package'- 'plan-US'- 'plan-US-NA'- 'plan-US-max'- 'planArc01': Virtual SIM/Subscriber.Japan coverage:- 'plan-D': plan-D D-300MB, plan-D (no bundle).- 'plan-K2': plan-K2 K2-300MB.- 'plan-KM1'- 'plan-DU'- 'plan-K'- 'planArc01': Virtual SIM/Subscriber."))

	QuerySimsCmd.Flags().StringSliceVar(&QuerySimsCmdTag, "tag", []string{}, TRAPI("String of tag values to search. For more information, please refer to [Using Tags with Soracom Air](/docs/air/tags)."))

	QuerySimsCmd.Flags().Int64Var(&QuerySimsCmdLimit, "limit", 10, TRAPI("The maximum number of item to retrieve."))

	QuerySimsCmd.Flags().BoolVar(&QuerySimsCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	QuerySimsCmd.RunE = QuerySimsCmdRunE

	QueryCmd.AddCommand(QuerySimsCmd)
}

// QuerySimsCmd defines 'sims' subcommand
var QuerySimsCmd = &cobra.Command{
	Use:   "sims",
	Short: TRAPI("/query/sims:get:summary"),
	Long:  TRAPI(`/query/sims:get:description`) + "\n\n" + createLinkToAPIReference("Query", "searchSims"),
}

func QuerySimsCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectQuerySimsCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if QuerySimsCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectQuerySimsCmdParams(ac *apiClient) (*apiParams, error) {

	return &apiParams{
		method: "GET",
		path:   buildPathForQuerySimsCmd("/query/sims"),
		query:  buildQueryForQuerySimsCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForQuerySimsCmd(path string) string {

	return path
}

func buildQueryForQuerySimsCmd() url.Values {
	result := url.Values{}

	if QuerySimsCmdLastEvaluatedKey != "" {
		result.Add("last_evaluated_key", QuerySimsCmdLastEvaluatedKey)
	}

	if QuerySimsCmdSearchType != "and" {
		result.Add("search_type", QuerySimsCmdSearchType)
	}

	if QuerySimsCmdSessionStatus != "NA" {
		result.Add("session_status", QuerySimsCmdSessionStatus)
	}

	for _, s := range QuerySimsCmdBundles {
		if s != "" {
			result.Add("bundles", s)
		}
	}

	for _, s := range QuerySimsCmdGroup {
		if s != "" {
			result.Add("group", s)
		}
	}

	for _, s := range QuerySimsCmdIccid {
		if s != "" {
			result.Add("iccid", s)
		}
	}

	for _, s := range QuerySimsCmdImsi {
		if s != "" {
			result.Add("imsi", s)
		}
	}

	for _, s := range QuerySimsCmdModuleType {
		if s != "" {
			result.Add("module_type", s)
		}
	}

	for _, s := range QuerySimsCmdMsisdn {
		if s != "" {
			result.Add("msisdn", s)
		}
	}

	for _, s := range QuerySimsCmdName {
		if s != "" {
			result.Add("name", s)
		}
	}

	for _, s := range QuerySimsCmdSerialNumber {
		if s != "" {
			result.Add("serial_number", s)
		}
	}

	for _, s := range QuerySimsCmdSimId {
		if s != "" {
			result.Add("sim_id", s)
		}
	}

	for _, s := range QuerySimsCmdStatus {
		if s != "" {
			result.Add("status", s)
		}
	}

	for _, s := range QuerySimsCmdSubscription {
		if s != "" {
			result.Add("subscription", s)
		}
	}

	for _, s := range QuerySimsCmdTag {
		if s != "" {
			result.Add("tag", s)
		}
	}

	if QuerySimsCmdLimit != 10 {
		result.Add("limit", sprintf("%d", QuerySimsCmdLimit))
	}

	return result
}
