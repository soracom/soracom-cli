// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"

	"fmt"

	"io/ioutil"

	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// OperatorUpdateCompanyInformationCmdAddressLine1 holds value of 'addressLine1' option
var OperatorUpdateCompanyInformationCmdAddressLine1 string

// OperatorUpdateCompanyInformationCmdAddressLine2 holds value of 'addressLine2' option
var OperatorUpdateCompanyInformationCmdAddressLine2 string

// OperatorUpdateCompanyInformationCmdBuilding holds value of 'building' option
var OperatorUpdateCompanyInformationCmdBuilding string

// OperatorUpdateCompanyInformationCmdCity holds value of 'city' option
var OperatorUpdateCompanyInformationCmdCity string

// OperatorUpdateCompanyInformationCmdCompanyName holds value of 'companyName' option
var OperatorUpdateCompanyInformationCmdCompanyName string

// OperatorUpdateCompanyInformationCmdContactPersonName holds value of 'contactPersonName' option
var OperatorUpdateCompanyInformationCmdContactPersonName string

// OperatorUpdateCompanyInformationCmdCountryCode holds value of 'countryCode' option
var OperatorUpdateCompanyInformationCmdCountryCode string

// OperatorUpdateCompanyInformationCmdDepartment holds value of 'department' option
var OperatorUpdateCompanyInformationCmdDepartment string

// OperatorUpdateCompanyInformationCmdOperatorId holds value of 'operator_id' option
var OperatorUpdateCompanyInformationCmdOperatorId string

// OperatorUpdateCompanyInformationCmdPhoneNumber holds value of 'phoneNumber' option
var OperatorUpdateCompanyInformationCmdPhoneNumber string

// OperatorUpdateCompanyInformationCmdState holds value of 'state' option
var OperatorUpdateCompanyInformationCmdState string

// OperatorUpdateCompanyInformationCmdVatIdentificationNumber holds value of 'vatIdentificationNumber' option
var OperatorUpdateCompanyInformationCmdVatIdentificationNumber string

// OperatorUpdateCompanyInformationCmdZipCode holds value of 'zipCode' option
var OperatorUpdateCompanyInformationCmdZipCode string

// OperatorUpdateCompanyInformationCmdBody holds contents of request body to be sent
var OperatorUpdateCompanyInformationCmdBody string

func init() {
	OperatorUpdateCompanyInformationCmd.Flags().StringVar(&OperatorUpdateCompanyInformationCmdAddressLine1, "address-line1", "", TRAPI(""))

	OperatorUpdateCompanyInformationCmd.Flags().StringVar(&OperatorUpdateCompanyInformationCmdAddressLine2, "address-line2", "", TRAPI(""))

	OperatorUpdateCompanyInformationCmd.Flags().StringVar(&OperatorUpdateCompanyInformationCmdBuilding, "building", "", TRAPI(""))

	OperatorUpdateCompanyInformationCmd.Flags().StringVar(&OperatorUpdateCompanyInformationCmdCity, "city", "", TRAPI(""))

	OperatorUpdateCompanyInformationCmd.Flags().StringVar(&OperatorUpdateCompanyInformationCmdCompanyName, "company-name", "", TRAPI(""))

	OperatorUpdateCompanyInformationCmd.Flags().StringVar(&OperatorUpdateCompanyInformationCmdContactPersonName, "contact-person-name", "", TRAPI(""))

	OperatorUpdateCompanyInformationCmd.Flags().StringVar(&OperatorUpdateCompanyInformationCmdCountryCode, "country-code", "", TRAPI(""))

	OperatorUpdateCompanyInformationCmd.Flags().StringVar(&OperatorUpdateCompanyInformationCmdDepartment, "department", "", TRAPI(""))

	OperatorUpdateCompanyInformationCmd.Flags().StringVar(&OperatorUpdateCompanyInformationCmdOperatorId, "operator-id", "", TRAPI("operator_id"))

	OperatorUpdateCompanyInformationCmd.Flags().StringVar(&OperatorUpdateCompanyInformationCmdPhoneNumber, "phone-number", "", TRAPI(""))

	OperatorUpdateCompanyInformationCmd.Flags().StringVar(&OperatorUpdateCompanyInformationCmdState, "state", "", TRAPI(""))

	OperatorUpdateCompanyInformationCmd.Flags().StringVar(&OperatorUpdateCompanyInformationCmdVatIdentificationNumber, "vat-identification-number", "", TRAPI(""))

	OperatorUpdateCompanyInformationCmd.Flags().StringVar(&OperatorUpdateCompanyInformationCmdZipCode, "zip-code", "", TRAPI(""))

	OperatorUpdateCompanyInformationCmd.Flags().StringVar(&OperatorUpdateCompanyInformationCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))
	OperatorCmd.AddCommand(OperatorUpdateCompanyInformationCmd)
}

// OperatorUpdateCompanyInformationCmd defines 'update-company-information' subcommand
var OperatorUpdateCompanyInformationCmd = &cobra.Command{
	Use:   "update-company-information",
	Short: TRAPI("/operators/{operator_id}/company_information:put:summary"),
	Long:  TRAPI(`/operators/{operator_id}/company_information:put:description`),
	RunE: func(cmd *cobra.Command, args []string) error {
		opt := &apiClientOptions{
			BasePath: "/v1",
			Language: getSelectedLanguage(),
		}

		ac := newAPIClient(opt)
		if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
			ac.SetVerbose(true)
		}
		err := authHelper(ac, cmd, args)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		param, err := collectOperatorUpdateCompanyInformationCmdParams(ac)
		if err != nil {
			return err
		}

		body, err := ac.callAPI(param)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if body == "" {
			return nil
		}

		if queryString != "" {
			return processQuery(queryString, body)
		}

		if rawOutput {
			_, err = os.Stdout.Write([]byte(body))
		} else {
			return prettyPrintStringAsJSON(body)
		}
		return err
	},
}

func collectOperatorUpdateCompanyInformationCmdParams(ac *apiClient) (*apiParams, error) {
	if OperatorUpdateCompanyInformationCmdOperatorId == "" {
		OperatorUpdateCompanyInformationCmdOperatorId = ac.OperatorID
	}

	body, err := buildBodyForOperatorUpdateCompanyInformationCmd()
	if err != nil {
		return nil, err
	}
	contentType := "application/json"

	if OperatorUpdateCompanyInformationCmdCompanyName == "" {
		if body == "" {

			return nil, fmt.Errorf("required parameter '%s' is not specified", "company-name")
		}

	}

	if OperatorUpdateCompanyInformationCmdContactPersonName == "" {
		if body == "" {

			return nil, fmt.Errorf("required parameter '%s' is not specified", "contact-person-name")
		}

	}

	if OperatorUpdateCompanyInformationCmdCountryCode == "" {
		if body == "" {

			return nil, fmt.Errorf("required parameter '%s' is not specified", "country-code")
		}

	}

	if OperatorUpdateCompanyInformationCmdDepartment == "" {
		if body == "" {

			return nil, fmt.Errorf("required parameter '%s' is not specified", "department")
		}

	}

	if OperatorUpdateCompanyInformationCmdPhoneNumber == "" {
		if body == "" {

			return nil, fmt.Errorf("required parameter '%s' is not specified", "phone-number")
		}

	}

	if OperatorUpdateCompanyInformationCmdZipCode == "" {
		if body == "" {

			return nil, fmt.Errorf("required parameter '%s' is not specified", "zip-code")
		}

	}

	return &apiParams{
		method:      "PUT",
		path:        buildPathForOperatorUpdateCompanyInformationCmd("/operators/{operator_id}/company_information"),
		query:       buildQueryForOperatorUpdateCompanyInformationCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForOperatorUpdateCompanyInformationCmd(path string) string {

	escapedOperatorId := url.PathEscape(OperatorUpdateCompanyInformationCmdOperatorId)

	path = strReplace(path, "{"+"operator_id"+"}", escapedOperatorId, -1)

	return path
}

func buildQueryForOperatorUpdateCompanyInformationCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForOperatorUpdateCompanyInformationCmd() (string, error) {
	var result map[string]interface{}

	if OperatorUpdateCompanyInformationCmdBody != "" {
		var b []byte
		var err error

		if strings.HasPrefix(OperatorUpdateCompanyInformationCmdBody, "@") {
			fname := strings.TrimPrefix(OperatorUpdateCompanyInformationCmdBody, "@")
			// #nosec
			b, err = ioutil.ReadFile(fname)
		} else if OperatorUpdateCompanyInformationCmdBody == "-" {
			b, err = ioutil.ReadAll(os.Stdin)
		} else {
			b = []byte(OperatorUpdateCompanyInformationCmdBody)
		}

		if err != nil {
			return "", err
		}

		err = json.Unmarshal(b, &result)
		if err != nil {
			return "", err
		}
	}

	if result == nil {
		result = make(map[string]interface{})
	}

	if OperatorUpdateCompanyInformationCmdAddressLine1 != "" {
		result["addressLine1"] = OperatorUpdateCompanyInformationCmdAddressLine1
	}

	if OperatorUpdateCompanyInformationCmdAddressLine2 != "" {
		result["addressLine2"] = OperatorUpdateCompanyInformationCmdAddressLine2
	}

	if OperatorUpdateCompanyInformationCmdBuilding != "" {
		result["building"] = OperatorUpdateCompanyInformationCmdBuilding
	}

	if OperatorUpdateCompanyInformationCmdCity != "" {
		result["city"] = OperatorUpdateCompanyInformationCmdCity
	}

	if OperatorUpdateCompanyInformationCmdCompanyName != "" {
		result["companyName"] = OperatorUpdateCompanyInformationCmdCompanyName
	}

	if OperatorUpdateCompanyInformationCmdContactPersonName != "" {
		result["contactPersonName"] = OperatorUpdateCompanyInformationCmdContactPersonName
	}

	if OperatorUpdateCompanyInformationCmdCountryCode != "" {
		result["countryCode"] = OperatorUpdateCompanyInformationCmdCountryCode
	}

	if OperatorUpdateCompanyInformationCmdDepartment != "" {
		result["department"] = OperatorUpdateCompanyInformationCmdDepartment
	}

	if OperatorUpdateCompanyInformationCmdPhoneNumber != "" {
		result["phoneNumber"] = OperatorUpdateCompanyInformationCmdPhoneNumber
	}

	if OperatorUpdateCompanyInformationCmdState != "" {
		result["state"] = OperatorUpdateCompanyInformationCmdState
	}

	if OperatorUpdateCompanyInformationCmdVatIdentificationNumber != "" {
		result["vatIdentificationNumber"] = OperatorUpdateCompanyInformationCmdVatIdentificationNumber
	}

	if OperatorUpdateCompanyInformationCmdZipCode != "" {
		result["zipCode"] = OperatorUpdateCompanyInformationCmdZipCode
	}

	resultBytes, err := json.Marshal(result)
	if err != nil {
		return "", err
	}
	return string(resultBytes), nil
}
