// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"
	"fmt"
	"io"
	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// SimsDownlinkUdpCmdPayload holds value of 'payload' option
var SimsDownlinkUdpCmdPayload string

// SimsDownlinkUdpCmdPayloadEncoding holds value of 'payloadEncoding' option
var SimsDownlinkUdpCmdPayloadEncoding string

// SimsDownlinkUdpCmdSimId holds value of 'sim_id' option
var SimsDownlinkUdpCmdSimId string

// SimsDownlinkUdpCmdPort holds value of 'port' option
var SimsDownlinkUdpCmdPort int64

// SimsDownlinkUdpCmdBody holds contents of request body to be sent
var SimsDownlinkUdpCmdBody string

func InitSimsDownlinkUdpCmd() {
	SimsDownlinkUdpCmd.Flags().StringVar(&SimsDownlinkUdpCmdPayload, "payload", "", TRAPI("Data to be sent, encoded as a string in the format specified by 'payloadEncoding'. The maximum size is 1,472 bytes for the encoded string.**Warning**: Depending on the network path, the actual maximum size may be smaller. Data exceeding the maximum allowable size for the network path may be discarded."))

	SimsDownlinkUdpCmd.Flags().StringVar(&SimsDownlinkUdpCmdPayloadEncoding, "payload-encoding", "string", TRAPI("Encoding format for binary data. \"string\" is treated as a UTF-8 string. \"base64\" is Base64 encoding, and \"hex\" is hexadecimal encoding. Case insensitive for hex."))

	SimsDownlinkUdpCmd.Flags().StringVar(&SimsDownlinkUdpCmdSimId, "sim-id", "", TRAPI("SIM ID of the target IoT SIM. The SIM ID can be obtained from the [Sim:listSims API](#/Sim/listSims)."))

	SimsDownlinkUdpCmd.Flags().Int64Var(&SimsDownlinkUdpCmdPort, "port", 0, TRAPI("Port number for UDP."))

	SimsDownlinkUdpCmd.Flags().StringVar(&SimsDownlinkUdpCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))

	SimsDownlinkUdpCmd.RunE = SimsDownlinkUdpCmdRunE

	SimsCmd.AddCommand(SimsDownlinkUdpCmd)
}

// SimsDownlinkUdpCmd defines 'downlink-udp' subcommand
var SimsDownlinkUdpCmd = &cobra.Command{
	Use:   "downlink-udp",
	Short: TRAPI("/sims/{sim_id}/downlink/udp:post:summary"),
	Long:  TRAPI(`/sims/{sim_id}/downlink/udp:post:description`) + "\n\n" + createLinkToAPIReference("Sim", "sendDownlinkUdp"),
}

func SimsDownlinkUdpCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectSimsDownlinkUdpCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSimsDownlinkUdpCmdParams(ac *apiClient) (*apiParams, error) {
	var body string
	var parsedBody interface{}
	var err error
	body, err = buildBodyForSimsDownlinkUdpCmd()
	if err != nil {
		return nil, err
	}
	contentType := "application/json"

	if contentType == "application/json" {
		err = json.Unmarshal([]byte(body), &parsedBody)
		if err != nil {
			return nil, fmt.Errorf("invalid json format specified for `--body` parameter: %s", err)
		}
	}

	err = checkIfRequiredStringParameterIsSupplied("payload", "payload", "body", parsedBody, SimsDownlinkUdpCmdPayload)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("sim_id", "sim-id", "path", parsedBody, SimsDownlinkUdpCmdSimId)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredIntegerParameterIsSupplied("port", "port", "body", parsedBody, SimsDownlinkUdpCmdPort)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method:      "POST",
		path:        buildPathForSimsDownlinkUdpCmd("/sims/{sim_id}/downlink/udp"),
		query:       buildQueryForSimsDownlinkUdpCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSimsDownlinkUdpCmd(path string) string {

	escapedSimId := url.PathEscape(SimsDownlinkUdpCmdSimId)

	path = strReplace(path, "{"+"sim_id"+"}", escapedSimId, -1)

	return path
}

func buildQueryForSimsDownlinkUdpCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForSimsDownlinkUdpCmd() (string, error) {
	var result map[string]interface{}

	if SimsDownlinkUdpCmdBody != "" {
		var b []byte
		var err error

		if strings.HasPrefix(SimsDownlinkUdpCmdBody, "@") {
			fname := strings.TrimPrefix(SimsDownlinkUdpCmdBody, "@")
			// #nosec
			b, err = os.ReadFile(fname)
		} else if SimsDownlinkUdpCmdBody == "-" {
			b, err = io.ReadAll(os.Stdin)
		} else {
			b = []byte(SimsDownlinkUdpCmdBody)
		}

		if err != nil {
			return "", err
		}

		err = json.Unmarshal(b, &result)
		if err != nil {
			return "", err
		}
	}

	if result == nil {
		result = make(map[string]interface{})
	}

	if SimsDownlinkUdpCmdPayload != "" {
		result["payload"] = SimsDownlinkUdpCmdPayload
	}

	if SimsDownlinkUdpCmdPayloadEncoding != "string" {
		result["payloadEncoding"] = SimsDownlinkUdpCmdPayloadEncoding
	}

	if SimsDownlinkUdpCmd.Flags().Lookup("port").Changed {
		result["port"] = SimsDownlinkUdpCmdPort
	}

	resultBytes, err := json.Marshal(result)
	if err != nil {
		return "", err
	}
	return string(resultBytes), nil
}
