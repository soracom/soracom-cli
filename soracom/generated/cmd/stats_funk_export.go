// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"
	"fmt"
	"io"
	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// StatsFunkExportCmdExportMode holds value of 'export_mode' option
var StatsFunkExportCmdExportMode string

// StatsFunkExportCmdOperatorId holds value of 'operator_id' option
var StatsFunkExportCmdOperatorId string

// StatsFunkExportCmdPeriod holds value of 'period' option
var StatsFunkExportCmdPeriod string

// StatsFunkExportCmdFrom holds value of 'from' option
var StatsFunkExportCmdFrom int64

// StatsFunkExportCmdTo holds value of 'to' option
var StatsFunkExportCmdTo int64

// StatsFunkExportCmdBody holds contents of request body to be sent
var StatsFunkExportCmdBody string

func InitStatsFunkExportCmd() {
	StatsFunkExportCmd.Flags().StringVar(&StatsFunkExportCmdExportMode, "export-mode", "", TRAPI("export_mode (async, sync)"))

	StatsFunkExportCmd.Flags().StringVar(&StatsFunkExportCmdOperatorId, "operator-id", "", TRAPI("Operator ID"))

	StatsFunkExportCmd.Flags().StringVar(&StatsFunkExportCmdPeriod, "period", "", TRAPI("Unit of aggregation.- 'month': Aggregate by month.  The 'from' and 'to' should be UNIX time (in seconds) from 18 months before the current time to the current time. The actual period of interest is not the time specified by 'from' and 'to'.  | Item | Description |  |-|-|  | Actual start time | 00:00:00 on the first day of the month, including the specified UNIX time (in seconds). |  | Actual end time | 24:00:00 of the last day of the month containing the specified UNIX time (in seconds). |- 'day': Aggregate by day.  The 'from' and 'to' should be UNIX time (in seconds) from 18 months before the current time to the current time. The actual period of interest is not the time specified by 'from' and 'to'.  | Item | Description |  |-|-|  | Actual start time | 00:00:00 of the day including the specified UNIX time (in seconds). |  | Actual end time | 24:00:00 of the day including the specified UNIX time (in seconds). |- 'minutes': Aggregate by approximately every 5 minutes.  The 'from' and 'to' must be between 32 days before the current time and the UNIX time (in seconds) of the current time. The actual period to be aggregated is not the time specified by 'from' and 'to'.  | Item | Description |  |-|-|  | Actual Start Time | Start time of approximately 5 minutes including the specified UNIX time (seconds). |  | Actual End Time | End time of approximately 5 minutes including the specified UNIX time (seconds). |"))

	StatsFunkExportCmd.Flags().Int64Var(&StatsFunkExportCmdFrom, "from", 0, TRAPI("Specify the start month/day/minute of the period to be aggregated in UNIX time in seconds."))

	StatsFunkExportCmd.Flags().Int64Var(&StatsFunkExportCmdTo, "to", 0, TRAPI("Specify the end month/day/minute of the period to be aggregated in UNIX time in seconds."))

	StatsFunkExportCmd.Flags().StringVar(&StatsFunkExportCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))

	StatsFunkExportCmd.RunE = StatsFunkExportCmdRunE

	StatsFunkCmd.AddCommand(StatsFunkExportCmd)
}

// StatsFunkExportCmd defines 'export' subcommand
var StatsFunkExportCmd = &cobra.Command{
	Use:   "export",
	Short: TRAPI("/stats/funk/operators/{operator_id}/export:post:summary"),
	Long:  TRAPI(`/stats/funk/operators/{operator_id}/export:post:description`) + "\n\n" + createLinkToAPIReference("Stats", "exportFunkStats"),
}

func StatsFunkExportCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectStatsFunkExportCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}
	rawOutput = true

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectStatsFunkExportCmdParams(ac *apiClient) (*apiParams, error) {
	var body string
	var parsedBody interface{}
	var err error
	if StatsFunkExportCmdOperatorId == "" {
		StatsFunkExportCmdOperatorId = ac.apiCredentials.getOperatorID()
	}

	body, err = buildBodyForStatsFunkExportCmd()
	if err != nil {
		return nil, err
	}
	contentType := "application/json"

	if contentType == "application/json" {
		err = json.Unmarshal([]byte(body), &parsedBody)
		if err != nil {
			return nil, fmt.Errorf("invalid json format specified for `--body` parameter: %s", err)
		}
	}

	return &apiParams{
		method:      "POST",
		path:        buildPathForStatsFunkExportCmd("/stats/funk/operators/{operator_id}/export"),
		query:       buildQueryForStatsFunkExportCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForStatsFunkExportCmd(path string) string {

	escapedOperatorId := url.PathEscape(StatsFunkExportCmdOperatorId)

	path = strReplace(path, "{"+"operator_id"+"}", escapedOperatorId, -1)

	return path
}

func buildQueryForStatsFunkExportCmd() url.Values {
	result := url.Values{}

	if StatsFunkExportCmdExportMode != "" {
		result.Add("export_mode", StatsFunkExportCmdExportMode)
	}

	return result
}

func buildBodyForStatsFunkExportCmd() (string, error) {
	var result map[string]interface{}

	if StatsFunkExportCmdBody != "" {
		var b []byte
		var err error

		if strings.HasPrefix(StatsFunkExportCmdBody, "@") {
			fname := strings.TrimPrefix(StatsFunkExportCmdBody, "@")
			// #nosec
			b, err = os.ReadFile(fname)
		} else if StatsFunkExportCmdBody == "-" {
			b, err = io.ReadAll(os.Stdin)
		} else {
			b = []byte(StatsFunkExportCmdBody)
		}

		if err != nil {
			return "", err
		}

		err = json.Unmarshal(b, &result)
		if err != nil {
			return "", err
		}
	}

	if result == nil {
		result = make(map[string]interface{})
	}

	if StatsFunkExportCmdPeriod != "" {
		result["period"] = StatsFunkExportCmdPeriod
	}

	if StatsFunkExportCmd.Flags().Lookup("from").Changed {
		result["from"] = StatsFunkExportCmdFrom
	}

	if StatsFunkExportCmd.Flags().Lookup("to").Changed {
		result["to"] = StatsFunkExportCmdTo
	}

	resultBytes, err := json.Marshal(result)
	if err != nil {
		return "", err
	}
	return string(resultBytes), nil
}
