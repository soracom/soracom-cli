// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// SimsListCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var SimsListCmdLastEvaluatedKey string

// SimsListCmdLimit holds value of 'limit' option
var SimsListCmdLimit int64

// SimsListCmdPaginate indicates to do pagination or not
var SimsListCmdPaginate bool

// SimsListCmdOutputJSONL indicates to output with jsonl format
var SimsListCmdOutputJSONL bool

func InitSimsListCmd() {
	SimsListCmd.Flags().StringVar(&SimsListCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("The ID of the last SIM retrieved on the previous page. By specifying this parameter, you can continue to retrieve the list from the next SIM onward."))

	SimsListCmd.Flags().Int64Var(&SimsListCmdLimit, "limit", 0, TRAPI("Maximum number of SIMs to retrieve. However, the number of SIMs returned may be less than the specified value."))

	SimsListCmd.Flags().BoolVar(&SimsListCmdPaginate, "fetch-all", false, TRCLI("cli.common_params.paginate.short_help"))

	SimsListCmd.Flags().BoolVar(&SimsListCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	SimsListCmd.RunE = SimsListCmdRunE

	SimsCmd.AddCommand(SimsListCmd)
}

// SimsListCmd defines 'list' subcommand
var SimsListCmd = &cobra.Command{
	Use:   "list",
	Short: TRAPI("/sims:get:summary"),
	Long:  TRAPI(`/sims:get:description`) + "\n\n" + createLinkToAPIReference("Sim", "listSims"),
}

func SimsListCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectSimsListCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if SimsListCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSimsListCmdParams(ac *apiClient) (*apiParams, error) {

	return &apiParams{
		method: "GET",
		path:   buildPathForSimsListCmd("/sims"),
		query:  buildQueryForSimsListCmd(),

		doPagination:                      SimsListCmdPaginate,
		paginationKeyHeaderInResponse:     "x-soracom-next-key",
		paginationRequestParameterInQuery: "last_evaluated_key",

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSimsListCmd(path string) string {

	return path
}

func buildQueryForSimsListCmd() url.Values {
	result := url.Values{}

	if SimsListCmdLastEvaluatedKey != "" {
		result.Add("last_evaluated_key", SimsListCmdLastEvaluatedKey)
	}

	if SimsListCmdLimit != 0 {
		result.Add("limit", sprintf("%d", SimsListCmdLimit))
	}

	return result
}
