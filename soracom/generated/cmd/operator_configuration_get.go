// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// OperatorConfigurationGetCmdNamespace holds value of 'namespace' option
var OperatorConfigurationGetCmdNamespace string

// OperatorConfigurationGetCmdOperatorId holds value of 'operator_id' option
var OperatorConfigurationGetCmdOperatorId string

func InitOperatorConfigurationGetCmd() {
	OperatorConfigurationGetCmd.Flags().StringVar(&OperatorConfigurationGetCmdNamespace, "namespace", "", TRAPI("Namespace of operator configuration."))

	OperatorConfigurationGetCmd.Flags().StringVar(&OperatorConfigurationGetCmdOperatorId, "operator-id", "", TRAPI("Operator ID."))

	OperatorConfigurationGetCmd.RunE = OperatorConfigurationGetCmdRunE

	OperatorConfigurationCmd.AddCommand(OperatorConfigurationGetCmd)
}

// OperatorConfigurationGetCmd defines 'get' subcommand
var OperatorConfigurationGetCmd = &cobra.Command{
	Use:   "get",
	Short: TRAPI("/operators/{operator_id}/configuration/{namespace}:get:summary"),
	Long:  TRAPI(`/operators/{operator_id}/configuration/{namespace}:get:description`) + "\n\n" + createLinkToAPIReference("Operator", "getOperatorConfigurationNamespace"),
}

func OperatorConfigurationGetCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	profile := getProfileIfExist()

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  profile,
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectOperatorConfigurationGetCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectOperatorConfigurationGetCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	if OperatorConfigurationGetCmdOperatorId == "" {
		OperatorConfigurationGetCmdOperatorId = ac.apiCredentials.getOperatorID()
	}

	err = checkIfRequiredStringParameterIsSupplied("namespace", "namespace", "path", parsedBody, OperatorConfigurationGetCmdNamespace)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForOperatorConfigurationGetCmd("/operators/{operator_id}/configuration/{namespace}"),
		query:  buildQueryForOperatorConfigurationGetCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForOperatorConfigurationGetCmd(path string) string {

	escapedNamespace := url.PathEscape(OperatorConfigurationGetCmdNamespace)

	path = strReplace(path, "{"+"namespace"+"}", escapedNamespace, -1)

	escapedOperatorId := url.PathEscape(OperatorConfigurationGetCmdOperatorId)

	path = strReplace(path, "{"+"operator_id"+"}", escapedOperatorId, -1)

	return path
}

func buildQueryForOperatorConfigurationGetCmd() url.Values {
	result := url.Values{}

	return result
}
