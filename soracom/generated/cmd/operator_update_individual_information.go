// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"
	"fmt"
	"io"
	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// OperatorUpdateIndividualInformationCmdAddressLine1 holds value of 'addressLine1' option
var OperatorUpdateIndividualInformationCmdAddressLine1 string

// OperatorUpdateIndividualInformationCmdAddressLine2 holds value of 'addressLine2' option
var OperatorUpdateIndividualInformationCmdAddressLine2 string

// OperatorUpdateIndividualInformationCmdBuilding holds value of 'building' option
var OperatorUpdateIndividualInformationCmdBuilding string

// OperatorUpdateIndividualInformationCmdCity holds value of 'city' option
var OperatorUpdateIndividualInformationCmdCity string

// OperatorUpdateIndividualInformationCmdCountryCode holds value of 'countryCode' option
var OperatorUpdateIndividualInformationCmdCountryCode string

// OperatorUpdateIndividualInformationCmdFullName holds value of 'fullName' option
var OperatorUpdateIndividualInformationCmdFullName string

// OperatorUpdateIndividualInformationCmdOperatorId holds value of 'operator_id' option
var OperatorUpdateIndividualInformationCmdOperatorId string

// OperatorUpdateIndividualInformationCmdPhoneNumber holds value of 'phoneNumber' option
var OperatorUpdateIndividualInformationCmdPhoneNumber string

// OperatorUpdateIndividualInformationCmdState holds value of 'state' option
var OperatorUpdateIndividualInformationCmdState string

// OperatorUpdateIndividualInformationCmdZipCode holds value of 'zipCode' option
var OperatorUpdateIndividualInformationCmdZipCode string

// OperatorUpdateIndividualInformationCmdBody holds contents of request body to be sent
var OperatorUpdateIndividualInformationCmdBody string

func InitOperatorUpdateIndividualInformationCmd() {
	OperatorUpdateIndividualInformationCmd.Flags().StringVar(&OperatorUpdateIndividualInformationCmdAddressLine1, "address-line1", "", TRAPI(""))

	OperatorUpdateIndividualInformationCmd.Flags().StringVar(&OperatorUpdateIndividualInformationCmdAddressLine2, "address-line2", "", TRAPI(""))

	OperatorUpdateIndividualInformationCmd.Flags().StringVar(&OperatorUpdateIndividualInformationCmdBuilding, "building", "", TRAPI(""))

	OperatorUpdateIndividualInformationCmd.Flags().StringVar(&OperatorUpdateIndividualInformationCmdCity, "city", "", TRAPI(""))

	OperatorUpdateIndividualInformationCmd.Flags().StringVar(&OperatorUpdateIndividualInformationCmdCountryCode, "country-code", "", TRAPI(""))

	OperatorUpdateIndividualInformationCmd.Flags().StringVar(&OperatorUpdateIndividualInformationCmdFullName, "full-name", "", TRAPI(""))

	OperatorUpdateIndividualInformationCmd.Flags().StringVar(&OperatorUpdateIndividualInformationCmdOperatorId, "operator-id", "", TRAPI("Operator ID."))

	OperatorUpdateIndividualInformationCmd.Flags().StringVar(&OperatorUpdateIndividualInformationCmdPhoneNumber, "phone-number", "", TRAPI(""))

	OperatorUpdateIndividualInformationCmd.Flags().StringVar(&OperatorUpdateIndividualInformationCmdState, "state", "", TRAPI(""))

	OperatorUpdateIndividualInformationCmd.Flags().StringVar(&OperatorUpdateIndividualInformationCmdZipCode, "zip-code", "", TRAPI(""))

	OperatorUpdateIndividualInformationCmd.Flags().StringVar(&OperatorUpdateIndividualInformationCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))

	OperatorUpdateIndividualInformationCmd.RunE = OperatorUpdateIndividualInformationCmdRunE

	OperatorCmd.AddCommand(OperatorUpdateIndividualInformationCmd)
}

// OperatorUpdateIndividualInformationCmd defines 'update-individual-information' subcommand
var OperatorUpdateIndividualInformationCmd = &cobra.Command{
	Use:   "update-individual-information",
	Short: TRAPI("/operators/{operator_id}/individual_information:put:summary"),
	Long:  TRAPI(`/operators/{operator_id}/individual_information:put:description`) + "\n\n" + createLinkToAPIReference("Operator", "updateIndividualInformation"),
}

func OperatorUpdateIndividualInformationCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectOperatorUpdateIndividualInformationCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectOperatorUpdateIndividualInformationCmdParams(ac *apiClient) (*apiParams, error) {
	var body string
	var parsedBody interface{}
	var err error
	if OperatorUpdateIndividualInformationCmdOperatorId == "" {
		OperatorUpdateIndividualInformationCmdOperatorId = ac.apiCredentials.getOperatorID()
	}

	body, err = buildBodyForOperatorUpdateIndividualInformationCmd()
	if err != nil {
		return nil, err
	}
	contentType := "application/json"

	if contentType == "application/json" {
		err = json.Unmarshal([]byte(body), &parsedBody)
		if err != nil {
			return nil, fmt.Errorf("invalid json format specified for `--body` parameter: %s", err)
		}
	}

	err = checkIfRequiredStringParameterIsSupplied("countryCode", "country-code", "body", parsedBody, OperatorUpdateIndividualInformationCmdCountryCode)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("fullName", "full-name", "body", parsedBody, OperatorUpdateIndividualInformationCmdFullName)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("phoneNumber", "phone-number", "body", parsedBody, OperatorUpdateIndividualInformationCmdPhoneNumber)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("zipCode", "zip-code", "body", parsedBody, OperatorUpdateIndividualInformationCmdZipCode)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method:      "PUT",
		path:        buildPathForOperatorUpdateIndividualInformationCmd("/operators/{operator_id}/individual_information"),
		query:       buildQueryForOperatorUpdateIndividualInformationCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForOperatorUpdateIndividualInformationCmd(path string) string {

	escapedOperatorId := url.PathEscape(OperatorUpdateIndividualInformationCmdOperatorId)

	path = strReplace(path, "{"+"operator_id"+"}", escapedOperatorId, -1)

	return path
}

func buildQueryForOperatorUpdateIndividualInformationCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForOperatorUpdateIndividualInformationCmd() (string, error) {
	var result map[string]interface{}

	if OperatorUpdateIndividualInformationCmdBody != "" {
		var b []byte
		var err error

		if strings.HasPrefix(OperatorUpdateIndividualInformationCmdBody, "@") {
			fname := strings.TrimPrefix(OperatorUpdateIndividualInformationCmdBody, "@")
			// #nosec
			b, err = os.ReadFile(fname)
		} else if OperatorUpdateIndividualInformationCmdBody == "-" {
			b, err = io.ReadAll(os.Stdin)
		} else {
			b = []byte(OperatorUpdateIndividualInformationCmdBody)
		}

		if err != nil {
			return "", err
		}

		err = json.Unmarshal(b, &result)
		if err != nil {
			return "", err
		}
	}

	if result == nil {
		result = make(map[string]interface{})
	}

	if OperatorUpdateIndividualInformationCmdAddressLine1 != "" {
		result["addressLine1"] = OperatorUpdateIndividualInformationCmdAddressLine1
	}

	if OperatorUpdateIndividualInformationCmdAddressLine2 != "" {
		result["addressLine2"] = OperatorUpdateIndividualInformationCmdAddressLine2
	}

	if OperatorUpdateIndividualInformationCmdBuilding != "" {
		result["building"] = OperatorUpdateIndividualInformationCmdBuilding
	}

	if OperatorUpdateIndividualInformationCmdCity != "" {
		result["city"] = OperatorUpdateIndividualInformationCmdCity
	}

	if OperatorUpdateIndividualInformationCmdCountryCode != "" {
		result["countryCode"] = OperatorUpdateIndividualInformationCmdCountryCode
	}

	if OperatorUpdateIndividualInformationCmdFullName != "" {
		result["fullName"] = OperatorUpdateIndividualInformationCmdFullName
	}

	if OperatorUpdateIndividualInformationCmdPhoneNumber != "" {
		result["phoneNumber"] = OperatorUpdateIndividualInformationCmdPhoneNumber
	}

	if OperatorUpdateIndividualInformationCmdState != "" {
		result["state"] = OperatorUpdateIndividualInformationCmdState
	}

	if OperatorUpdateIndividualInformationCmdZipCode != "" {
		result["zipCode"] = OperatorUpdateIndividualInformationCmdZipCode
	}

	resultBytes, err := json.Marshal(result)
	if err != nil {
		return "", err
	}
	return string(resultBytes), nil
}
