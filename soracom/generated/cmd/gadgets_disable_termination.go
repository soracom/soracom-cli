// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// GadgetsDisableTerminationCmdProductId holds value of 'product_id' option
var GadgetsDisableTerminationCmdProductId string

// GadgetsDisableTerminationCmdSerialNumber holds value of 'serial_number' option
var GadgetsDisableTerminationCmdSerialNumber string

func InitGadgetsDisableTerminationCmd() {
	GadgetsDisableTerminationCmd.Flags().StringVar(&GadgetsDisableTerminationCmdProductId, "product-id", "", TRAPI("Product ID of the target Gadget API compatible device.- 'button': Soracom LTE-M Button powered by AWS.- 'wimax': Soracom Cloud Camera Services Cellular Pack."))

	GadgetsDisableTerminationCmd.Flags().StringVar(&GadgetsDisableTerminationCmdSerialNumber, "serial-number", "", TRAPI("Serial Number of the target Gadget API compatible device."))

	GadgetsDisableTerminationCmd.RunE = GadgetsDisableTerminationCmdRunE

	GadgetsCmd.AddCommand(GadgetsDisableTerminationCmd)
}

// GadgetsDisableTerminationCmd defines 'disable-termination' subcommand
var GadgetsDisableTerminationCmd = &cobra.Command{
	Use:   "disable-termination",
	Short: TRAPI("/gadgets/{product_id}/{serial_number}/disable_termination:post:summary"),
	Long:  TRAPI(`/gadgets/{product_id}/{serial_number}/disable_termination:post:description`) + "\n\n" + createLinkToAPIReference("Gadget", "disableTerminationOnGadget"),
}

func GadgetsDisableTerminationCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectGadgetsDisableTerminationCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectGadgetsDisableTerminationCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("product_id", "product-id", "path", parsedBody, GadgetsDisableTerminationCmdProductId)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("serial_number", "serial-number", "path", parsedBody, GadgetsDisableTerminationCmdSerialNumber)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "POST",
		path:   buildPathForGadgetsDisableTerminationCmd("/gadgets/{product_id}/{serial_number}/disable_termination"),
		query:  buildQueryForGadgetsDisableTerminationCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForGadgetsDisableTerminationCmd(path string) string {

	escapedProductId := url.PathEscape(GadgetsDisableTerminationCmdProductId)

	path = strReplace(path, "{"+"product_id"+"}", escapedProductId, -1)

	escapedSerialNumber := url.PathEscape(GadgetsDisableTerminationCmdSerialNumber)

	path = strReplace(path, "{"+"serial_number"+"}", escapedSerialNumber, -1)

	return path
}

func buildQueryForGadgetsDisableTerminationCmd() url.Values {
	result := url.Values{}

	return result
}
