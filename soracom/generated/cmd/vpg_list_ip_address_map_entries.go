// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// VpgListIpAddressMapEntriesCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var VpgListIpAddressMapEntriesCmdLastEvaluatedKey string

// VpgListIpAddressMapEntriesCmdVpgId holds value of 'vpg_id' option
var VpgListIpAddressMapEntriesCmdVpgId string

// VpgListIpAddressMapEntriesCmdLimit holds value of 'limit' option
var VpgListIpAddressMapEntriesCmdLimit int64

// VpgListIpAddressMapEntriesCmdOutputJSONL indicates to output with jsonl format
var VpgListIpAddressMapEntriesCmdOutputJSONL bool

func InitVpgListIpAddressMapEntriesCmd() {
	VpgListIpAddressMapEntriesCmd.Flags().StringVar(&VpgListIpAddressMapEntriesCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("The last IP address returned from the previous page. By specifying this parameter, the API will return the next page of IP Address Map entries."))

	VpgListIpAddressMapEntriesCmd.Flags().StringVar(&VpgListIpAddressMapEntriesCmdVpgId, "vpg-id", "", TRAPI("Target VPG ID."))

	VpgListIpAddressMapEntriesCmd.Flags().Int64Var(&VpgListIpAddressMapEntriesCmdLimit, "limit", 0, TRAPI("The maximum number of IP Address Map entries to return."))

	VpgListIpAddressMapEntriesCmd.Flags().BoolVar(&VpgListIpAddressMapEntriesCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	VpgListIpAddressMapEntriesCmd.RunE = VpgListIpAddressMapEntriesCmdRunE

	VpgCmd.AddCommand(VpgListIpAddressMapEntriesCmd)
}

// VpgListIpAddressMapEntriesCmd defines 'list-ip-address-map-entries' subcommand
var VpgListIpAddressMapEntriesCmd = &cobra.Command{
	Use:   "list-ip-address-map-entries",
	Short: TRAPI("/virtual_private_gateways/{vpg_id}/ip_address_map:get:summary"),
	Long:  TRAPI(`/virtual_private_gateways/{vpg_id}/ip_address_map:get:description`) + "\n\n" + createLinkToAPIReference("VirtualPrivateGateway", "listVirtualPrivateGatewayIpAddressMapEntries"),
}

func VpgListIpAddressMapEntriesCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectVpgListIpAddressMapEntriesCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if VpgListIpAddressMapEntriesCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectVpgListIpAddressMapEntriesCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error

	err = checkIfRequiredStringParameterIsSupplied("vpg_id", "vpg-id", "path", parsedBody, VpgListIpAddressMapEntriesCmdVpgId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForVpgListIpAddressMapEntriesCmd("/virtual_private_gateways/{vpg_id}/ip_address_map"),
		query:  buildQueryForVpgListIpAddressMapEntriesCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForVpgListIpAddressMapEntriesCmd(path string) string {

	escapedVpgId := url.PathEscape(VpgListIpAddressMapEntriesCmdVpgId)

	path = strReplace(path, "{"+"vpg_id"+"}", escapedVpgId, -1)

	return path
}

func buildQueryForVpgListIpAddressMapEntriesCmd() url.Values {
	result := url.Values{}

	if VpgListIpAddressMapEntriesCmdLastEvaluatedKey != "" {
		result.Add("last_evaluated_key", VpgListIpAddressMapEntriesCmdLastEvaluatedKey)
	}

	if VpgListIpAddressMapEntriesCmdLimit != 0 {
		result.Add("limit", sprintf("%d", VpgListIpAddressMapEntriesCmdLimit))
	}

	return result
}
