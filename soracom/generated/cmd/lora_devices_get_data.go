// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// LoraDevicesGetDataCmdDeviceId holds value of 'device_id' option
var LoraDevicesGetDataCmdDeviceId string

// LoraDevicesGetDataCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var LoraDevicesGetDataCmdLastEvaluatedKey string

// LoraDevicesGetDataCmdSort holds value of 'sort' option
var LoraDevicesGetDataCmdSort string

// LoraDevicesGetDataCmdFrom holds value of 'from' option
var LoraDevicesGetDataCmdFrom int64

// LoraDevicesGetDataCmdLimit holds value of 'limit' option
var LoraDevicesGetDataCmdLimit int64

// LoraDevicesGetDataCmdTo holds value of 'to' option
var LoraDevicesGetDataCmdTo int64

// LoraDevicesGetDataCmdPaginate indicates to do pagination or not
var LoraDevicesGetDataCmdPaginate bool

// LoraDevicesGetDataCmdOutputJSONL indicates to output with jsonl format
var LoraDevicesGetDataCmdOutputJSONL bool

func InitLoraDevicesGetDataCmd() {
	LoraDevicesGetDataCmd.Flags().StringVar(&LoraDevicesGetDataCmdDeviceId, "device-id", "", TRAPI("ID of the LoRaWAN device from which to retrieve data. The ID of a LoRaWAN device can be obtained using the [LoraDevice:listLoraDevices API](#!/LoraDevice/listLoraDevices)."))

	LoraDevicesGetDataCmd.Flags().StringVar(&LoraDevicesGetDataCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("Timestamp of the last data entry retrieved on the previous page. By specifying this parameter, the list starting from the next data entry can be obtained."))

	LoraDevicesGetDataCmd.Flags().StringVar(&LoraDevicesGetDataCmdSort, "sort", "desc", TRAPI("Sort order of data entries. Either descending order (latest data entry first) or ascending order (oldest data entry first)."))

	LoraDevicesGetDataCmd.Flags().Int64Var(&LoraDevicesGetDataCmdFrom, "from", 0, TRAPI("Start time of the target period (UNIX time in milliseconds)."))

	LoraDevicesGetDataCmd.Flags().Int64Var(&LoraDevicesGetDataCmdLimit, "limit", 0, TRAPI("Maximum number of data entries to retrieve (1 to 1000). The default is '10'."))

	LoraDevicesGetDataCmd.Flags().Int64Var(&LoraDevicesGetDataCmdTo, "to", 0, TRAPI("End time of the target period (UNIX time in milliseconds)."))

	LoraDevicesGetDataCmd.Flags().BoolVar(&LoraDevicesGetDataCmdPaginate, "fetch-all", false, TRCLI("cli.common_params.paginate.short_help"))

	LoraDevicesGetDataCmd.Flags().BoolVar(&LoraDevicesGetDataCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	LoraDevicesGetDataCmd.RunE = LoraDevicesGetDataCmdRunE

	LoraDevicesCmd.AddCommand(LoraDevicesGetDataCmd)
}

// LoraDevicesGetDataCmd defines 'get-data' subcommand
var LoraDevicesGetDataCmd = &cobra.Command{
	Use:   "get-data",
	Short: TRAPI("/lora_devices/{device_id}/data:get:summary"),
	Long:  TRAPI(`/lora_devices/{device_id}/data:get:description`) + "\n\n" + createLinkToAPIReference("LoraDevice", "getDataFromLoraDevice"),
}

func LoraDevicesGetDataCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	profile := getProfileIfExist()

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  profile,
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectLoraDevicesGetDataCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if LoraDevicesGetDataCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectLoraDevicesGetDataCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("device_id", "device-id", "path", parsedBody, LoraDevicesGetDataCmdDeviceId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForLoraDevicesGetDataCmd("/lora_devices/{device_id}/data"),
		query:  buildQueryForLoraDevicesGetDataCmd(),

		doPagination:                      LoraDevicesGetDataCmdPaginate,
		paginationKeyHeaderInResponse:     "x-soracom-next-key",
		paginationRequestParameterInQuery: "last_evaluated_key",

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForLoraDevicesGetDataCmd(path string) string {

	escapedDeviceId := url.PathEscape(LoraDevicesGetDataCmdDeviceId)

	path = strReplace(path, "{"+"device_id"+"}", escapedDeviceId, -1)

	return path
}

func buildQueryForLoraDevicesGetDataCmd() url.Values {
	result := url.Values{}

	if LoraDevicesGetDataCmdLastEvaluatedKey != "" {
		result.Add("last_evaluated_key", LoraDevicesGetDataCmdLastEvaluatedKey)
	}

	if LoraDevicesGetDataCmdSort != "desc" {
		result.Add("sort", LoraDevicesGetDataCmdSort)
	}

	if LoraDevicesGetDataCmdFrom != 0 {
		result.Add("from", sprintf("%d", LoraDevicesGetDataCmdFrom))
	}

	if LoraDevicesGetDataCmdLimit != 0 {
		result.Add("limit", sprintf("%d", LoraDevicesGetDataCmdLimit))
	}

	if LoraDevicesGetDataCmdTo != 0 {
		result.Add("to", sprintf("%d", LoraDevicesGetDataCmdTo))
	}

	return result
}
