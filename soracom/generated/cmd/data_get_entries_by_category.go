// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// DataGetEntriesByCategoryCmdCategory holds value of 'category' option
var DataGetEntriesByCategoryCmdCategory string

// DataGetEntriesByCategoryCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var DataGetEntriesByCategoryCmdLastEvaluatedKey string

// DataGetEntriesByCategoryCmdSort holds value of 'sort' option
var DataGetEntriesByCategoryCmdSort string

// DataGetEntriesByCategoryCmdFrom holds value of 'from' option
var DataGetEntriesByCategoryCmdFrom int64

// DataGetEntriesByCategoryCmdLimit holds value of 'limit' option
var DataGetEntriesByCategoryCmdLimit int64

// DataGetEntriesByCategoryCmdTo holds value of 'to' option
var DataGetEntriesByCategoryCmdTo int64

// DataGetEntriesByCategoryCmdPaginate indicates to do pagination or not
var DataGetEntriesByCategoryCmdPaginate bool

// DataGetEntriesByCategoryCmdOutputJSONL indicates to output with jsonl format
var DataGetEntriesByCategoryCmdOutputJSONL bool

func InitDataGetEntriesByCategoryCmd() {
	DataGetEntriesByCategoryCmd.Flags().StringVar(&DataGetEntriesByCategoryCmdCategory, "category", "", TRAPI("Name of the category to filter data entries."))

	DataGetEntriesByCategoryCmd.Flags().StringVar(&DataGetEntriesByCategoryCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("The value of the 'x-soracom-next-key' header from the previous response. Specify this to retrieve the next page."))

	DataGetEntriesByCategoryCmd.Flags().StringVar(&DataGetEntriesByCategoryCmdSort, "sort", "desc", TRAPI("Sort order of the data entries. Either descending (latest data entry first) or ascending (oldest data entry first)."))

	DataGetEntriesByCategoryCmd.Flags().Int64Var(&DataGetEntriesByCategoryCmdFrom, "from", 0, TRAPI("Start time for the data entries search range (UNIX time in milliseconds)."))

	DataGetEntriesByCategoryCmd.Flags().Int64Var(&DataGetEntriesByCategoryCmdLimit, "limit", 0, TRAPI("Maximum number of data entries to retrieve (value range is 1 to 1000). The default is '10'."))

	DataGetEntriesByCategoryCmd.Flags().Int64Var(&DataGetEntriesByCategoryCmdTo, "to", 0, TRAPI("End time for the data entries search range (UNIX time in milliseconds)."))

	DataGetEntriesByCategoryCmd.Flags().BoolVar(&DataGetEntriesByCategoryCmdPaginate, "fetch-all", false, TRCLI("cli.common_params.paginate.short_help"))

	DataGetEntriesByCategoryCmd.Flags().BoolVar(&DataGetEntriesByCategoryCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	DataGetEntriesByCategoryCmd.RunE = DataGetEntriesByCategoryCmdRunE

	DataCmd.AddCommand(DataGetEntriesByCategoryCmd)
}

// DataGetEntriesByCategoryCmd defines 'get-entries-by-category' subcommand
var DataGetEntriesByCategoryCmd = &cobra.Command{
	Use:   "get-entries-by-category",
	Short: TRAPI("/data/categories/{category}:get:summary"),
	Long:  TRAPI(`/data/categories/{category}:get:description`) + "\n\n" + createLinkToAPIReference("DataEntry", "getDataEntriesByCategory"),
}

func DataGetEntriesByCategoryCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectDataGetEntriesByCategoryCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if DataGetEntriesByCategoryCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectDataGetEntriesByCategoryCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("category", "category", "path", parsedBody, DataGetEntriesByCategoryCmdCategory)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForDataGetEntriesByCategoryCmd("/data/categories/{category}"),
		query:  buildQueryForDataGetEntriesByCategoryCmd(),

		doPagination:                      DataGetEntriesByCategoryCmdPaginate,
		paginationKeyHeaderInResponse:     "x-soracom-next-key",
		paginationRequestParameterInQuery: "last_evaluated_key",

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForDataGetEntriesByCategoryCmd(path string) string {

	escapedCategory := url.PathEscape(DataGetEntriesByCategoryCmdCategory)

	path = strReplace(path, "{"+"category"+"}", escapedCategory, -1)

	return path
}

func buildQueryForDataGetEntriesByCategoryCmd() url.Values {
	result := url.Values{}

	if DataGetEntriesByCategoryCmdLastEvaluatedKey != "" {
		result.Add("last_evaluated_key", DataGetEntriesByCategoryCmdLastEvaluatedKey)
	}

	if DataGetEntriesByCategoryCmdSort != "desc" {
		result.Add("sort", DataGetEntriesByCategoryCmdSort)
	}

	if DataGetEntriesByCategoryCmdFrom != 0 {
		result.Add("from", sprintf("%d", DataGetEntriesByCategoryCmdFrom))
	}

	if DataGetEntriesByCategoryCmdLimit != 0 {
		result.Add("limit", sprintf("%d", DataGetEntriesByCategoryCmdLimit))
	}

	if DataGetEntriesByCategoryCmdTo != 0 {
		result.Add("to", sprintf("%d", DataGetEntriesByCategoryCmdTo))
	}

	return result
}
