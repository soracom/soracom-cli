// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

func InitPayerInformationGetCmd() {

	PayerInformationGetCmd.RunE = PayerInformationGetCmdRunE

	PayerInformationCmd.AddCommand(PayerInformationGetCmd)
}

// PayerInformationGetCmd defines 'get' subcommand
var PayerInformationGetCmd = &cobra.Command{
	Use:   "get",
	Short: TRAPI("/payment_statements/payer_information:get:summary"),
	Long:  TRAPI(`/payment_statements/payer_information:get:description`) + "\n\n" + createLinkToAPIReference("Payment", "getPayerInformation"),
}

func PayerInformationGetCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectPayerInformationGetCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectPayerInformationGetCmdParams(ac *apiClient) (*apiParams, error) {

	return &apiParams{
		method: "GET",
		path:   buildPathForPayerInformationGetCmd("/payment_statements/payer_information"),
		query:  buildQueryForPayerInformationGetCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForPayerInformationGetCmd(path string) string {

	return path
}

func buildQueryForPayerInformationGetCmd() url.Values {
	result := url.Values{}

	return result
}
