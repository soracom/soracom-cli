// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"
	"fmt"
	"io"
	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// GadgetsPutTagsCmdProductId holds value of 'product_id' option
var GadgetsPutTagsCmdProductId string

// GadgetsPutTagsCmdSerialNumber holds value of 'serial_number' option
var GadgetsPutTagsCmdSerialNumber string

// GadgetsPutTagsCmdBody holds contents of request body to be sent
var GadgetsPutTagsCmdBody string

func InitGadgetsPutTagsCmd() {
	GadgetsPutTagsCmd.Flags().StringVar(&GadgetsPutTagsCmdProductId, "product-id", "", TRAPI("Product ID of the target Gadget API compatible device.- 'wimax': Soracom Cloud Camera Services Cellular Pack."))

	GadgetsPutTagsCmd.Flags().StringVar(&GadgetsPutTagsCmdSerialNumber, "serial-number", "", TRAPI("Serial Number of the target Gadget API compatible device."))

	GadgetsPutTagsCmd.Flags().StringVar(&GadgetsPutTagsCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))

	GadgetsPutTagsCmd.RunE = GadgetsPutTagsCmdRunE

	GadgetsCmd.AddCommand(GadgetsPutTagsCmd)
}

// GadgetsPutTagsCmd defines 'put-tags' subcommand
var GadgetsPutTagsCmd = &cobra.Command{
	Use:   "put-tags",
	Short: TRAPI("/gadgets/{product_id}/{serial_number}/tags:put:summary"),
	Long:  TRAPI(`/gadgets/{product_id}/{serial_number}/tags:put:description`) + "\n\n" + createLinkToAPIReference("Gadget", "putGadgetTags"),
}

func GadgetsPutTagsCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectGadgetsPutTagsCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectGadgetsPutTagsCmdParams(ac *apiClient) (*apiParams, error) {
	var body string
	var parsedBody interface{}
	var err error
	body, err = buildBodyForGadgetsPutTagsCmd()
	if err != nil {
		return nil, err
	}
	contentType := "application/json"

	if contentType == "application/json" {
		err = json.Unmarshal([]byte(body), &parsedBody)
		if err != nil {
			return nil, fmt.Errorf("invalid json format specified for `--body` parameter: %s", err)
		}
	}

	err = checkIfRequiredStringParameterIsSupplied("product_id", "product-id", "path", parsedBody, GadgetsPutTagsCmdProductId)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("serial_number", "serial-number", "path", parsedBody, GadgetsPutTagsCmdSerialNumber)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method:      "PUT",
		path:        buildPathForGadgetsPutTagsCmd("/gadgets/{product_id}/{serial_number}/tags"),
		query:       buildQueryForGadgetsPutTagsCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForGadgetsPutTagsCmd(path string) string {

	escapedProductId := url.PathEscape(GadgetsPutTagsCmdProductId)

	path = strReplace(path, "{"+"product_id"+"}", escapedProductId, -1)

	escapedSerialNumber := url.PathEscape(GadgetsPutTagsCmdSerialNumber)

	path = strReplace(path, "{"+"serial_number"+"}", escapedSerialNumber, -1)

	return path
}

func buildQueryForGadgetsPutTagsCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForGadgetsPutTagsCmd() (string, error) {
	var b []byte
	var err error

	if GadgetsPutTagsCmdBody != "" {
		if strings.HasPrefix(GadgetsPutTagsCmdBody, "@") {
			fname := strings.TrimPrefix(GadgetsPutTagsCmdBody, "@")
			// #nosec
			b, err = os.ReadFile(fname)
		} else if GadgetsPutTagsCmdBody == "-" {
			b, err = io.ReadAll(os.Stdin)
		} else {
			b = []byte(GadgetsPutTagsCmdBody)
		}

		if err != nil {
			return "", err
		}
	}

	if b == nil {
		b = []byte{}
	}

	return string(b), nil
}
