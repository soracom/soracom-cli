// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"

	"fmt"

	"io/ioutil"

	"mime"
	"net/url"
	"os"

	"strings"

	"github.com/itchyny/gojq"
	"github.com/soracom/soracom-cli/generators/lib"
	"github.com/spf13/cobra"
)

// DevicesExecuteResourceCmdDeviceId holds value of 'device_id' option
var DevicesExecuteResourceCmdDeviceId string

// DevicesExecuteResourceCmdInstance holds value of 'instance' option
var DevicesExecuteResourceCmdInstance string

// DevicesExecuteResourceCmdObject holds value of 'object' option
var DevicesExecuteResourceCmdObject string

// DevicesExecuteResourceCmdResource holds value of 'resource' option
var DevicesExecuteResourceCmdResource string

// DevicesExecuteResourceCmdBody holds contents of request body to be sent
var DevicesExecuteResourceCmdBody string

func init() {
	DevicesExecuteResourceCmd.Flags().StringVar(&DevicesExecuteResourceCmdDeviceId, "device-id", "", TRAPI("Target device"))

	DevicesExecuteResourceCmd.Flags().StringVar(&DevicesExecuteResourceCmdInstance, "instance", "", TRAPI("Instance ID"))

	DevicesExecuteResourceCmd.Flags().StringVar(&DevicesExecuteResourceCmdObject, "object", "", TRAPI("Object ID"))

	DevicesExecuteResourceCmd.Flags().StringVar(&DevicesExecuteResourceCmdResource, "resource", "", TRAPI("Resource ID"))

	DevicesExecuteResourceCmd.Flags().StringVar(&DevicesExecuteResourceCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))
	DevicesCmd.AddCommand(DevicesExecuteResourceCmd)
}

// DevicesExecuteResourceCmd defines 'execute-resource' subcommand
var DevicesExecuteResourceCmd = &cobra.Command{
	Use:   "execute-resource",
	Short: TRAPI("/devices/{device_id}/{object}/{instance}/{resource}/execute:post:summary"),
	Long:  TRAPI(`/devices/{device_id}/{object}/{instance}/{resource}/execute:post:description`),
	RunE: func(cmd *cobra.Command, args []string) error {

		var jq *gojq.Query
		if jqString != "" {
			var err error
			jq, err = gojq.Parse(jqString)
			if err != nil {
				return err
			}
		}

		opt := &apiClientOptions{
			BasePath: "/v1",
			Language: getSelectedLanguage(),
		}

		ac := newAPIClient(opt)
		if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
			ac.SetVerbose(true)
		}
		err := authHelper(ac, cmd, args)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		param, err := collectDevicesExecuteResourceCmdParams(ac)
		if err != nil {
			return err
		}

		body, contentType, err := ac.callAPI(param)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if body == "" {
			return nil
		}

		mediaType, _, err := mime.ParseMediaType(contentType)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if jq != nil {
			if mediaType == "application/json" {
				return processJQ(jq, body)
			} else {
				lib.WarnfStderr(TRCLI("cli.tried-jq-on-non-json") + "\n")
			}
		}

		if rawOutput {
			_, err = os.Stdout.Write([]byte(body))
		} else {
			return prettyPrintStringAsJSON(body)
		}
		return err
	},
}

func collectDevicesExecuteResourceCmdParams(ac *apiClient) (*apiParams, error) {
	body, err := buildBodyForDevicesExecuteResourceCmd()
	if err != nil {
		return nil, err
	}
	contentType := "application/json"

	if DevicesExecuteResourceCmdDeviceId == "" {
		if body == "" {

			return nil, fmt.Errorf("required parameter '%s' is not specified", "device-id")
		}

	}

	if DevicesExecuteResourceCmdInstance == "" {
		if body == "" {

			return nil, fmt.Errorf("required parameter '%s' is not specified", "instance")
		}

	}

	if DevicesExecuteResourceCmdObject == "" {
		if body == "" {

			return nil, fmt.Errorf("required parameter '%s' is not specified", "object")
		}

	}

	if DevicesExecuteResourceCmdResource == "" {
		if body == "" {

			return nil, fmt.Errorf("required parameter '%s' is not specified", "resource")
		}

	}

	return &apiParams{
		method:      "POST",
		path:        buildPathForDevicesExecuteResourceCmd("/devices/{device_id}/{object}/{instance}/{resource}/execute"),
		query:       buildQueryForDevicesExecuteResourceCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForDevicesExecuteResourceCmd(path string) string {

	escapedDeviceId := url.PathEscape(DevicesExecuteResourceCmdDeviceId)

	path = strReplace(path, "{"+"device_id"+"}", escapedDeviceId, -1)

	escapedInstance := url.PathEscape(DevicesExecuteResourceCmdInstance)

	path = strReplace(path, "{"+"instance"+"}", escapedInstance, -1)

	escapedObject := url.PathEscape(DevicesExecuteResourceCmdObject)

	path = strReplace(path, "{"+"object"+"}", escapedObject, -1)

	escapedResource := url.PathEscape(DevicesExecuteResourceCmdResource)

	path = strReplace(path, "{"+"resource"+"}", escapedResource, -1)

	return path
}

func buildQueryForDevicesExecuteResourceCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForDevicesExecuteResourceCmd() (string, error) {
	var result map[string]interface{}

	if DevicesExecuteResourceCmdBody != "" {
		var b []byte
		var err error

		if strings.HasPrefix(DevicesExecuteResourceCmdBody, "@") {
			fname := strings.TrimPrefix(DevicesExecuteResourceCmdBody, "@")
			// #nosec
			b, err = ioutil.ReadFile(fname)
		} else if DevicesExecuteResourceCmdBody == "-" {
			b, err = ioutil.ReadAll(os.Stdin)
		} else {
			b = []byte(DevicesExecuteResourceCmdBody)
		}

		if err != nil {
			return "", err
		}

		err = json.Unmarshal(b, &result)
		if err != nil {
			return "", err
		}
	}

	if result == nil {
		result = make(map[string]interface{})
	}

	resultBytes, err := json.Marshal(result)
	if err != nil {
		return "", err
	}
	return string(resultBytes), nil
}
