// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// SimProfileOrdersListProfilesCmdProfileOrderId holds value of 'profile_order_id' option
var SimProfileOrdersListProfilesCmdProfileOrderId string

// SimProfileOrdersListProfilesCmdOutputJSONL indicates to output with jsonl format
var SimProfileOrdersListProfilesCmdOutputJSONL bool

func InitSimProfileOrdersListProfilesCmd() {
	SimProfileOrdersListProfilesCmd.Flags().StringVar(&SimProfileOrdersListProfilesCmdProfileOrderId, "profile-order-id", "", TRAPI("The ID of the eSIM profile order."))

	SimProfileOrdersListProfilesCmd.Flags().BoolVar(&SimProfileOrdersListProfilesCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	SimProfileOrdersListProfilesCmd.RunE = SimProfileOrdersListProfilesCmdRunE

	SimProfileOrdersCmd.AddCommand(SimProfileOrdersListProfilesCmd)
}

// SimProfileOrdersListProfilesCmd defines 'list-profiles' subcommand
var SimProfileOrdersListProfilesCmd = &cobra.Command{
	Use:   "list-profiles",
	Short: TRAPI("/sim_profile_orders/{profile_order_id}/profiles:get:summary"),
	Long:  TRAPI(`/sim_profile_orders/{profile_order_id}/profiles:get:description`) + "\n\n" + createLinkToAPIReference("SimProfileOrder", "listOrderedProfiles"),
}

func SimProfileOrdersListProfilesCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectSimProfileOrdersListProfilesCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if SimProfileOrdersListProfilesCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSimProfileOrdersListProfilesCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("profile_order_id", "profile-order-id", "path", parsedBody, SimProfileOrdersListProfilesCmdProfileOrderId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForSimProfileOrdersListProfilesCmd("/sim_profile_orders/{profile_order_id}/profiles"),
		query:  buildQueryForSimProfileOrdersListProfilesCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSimProfileOrdersListProfilesCmd(path string) string {

	escapedProfileOrderId := url.PathEscape(SimProfileOrdersListProfilesCmdProfileOrderId)

	path = strReplace(path, "{"+"profile_order_id"+"}", escapedProfileOrderId, -1)

	return path
}

func buildQueryForSimProfileOrdersListProfilesCmd() url.Values {
	result := url.Values{}

	return result
}
