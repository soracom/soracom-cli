// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"
	"fmt"
	"io"
	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// VolumeDiscountsCreateCmdStartDate holds value of 'startDate' option
var VolumeDiscountsCreateCmdStartDate string

// VolumeDiscountsCreateCmdVolumeDiscountPaymentType holds value of 'volumeDiscountPaymentType' option
var VolumeDiscountsCreateCmdVolumeDiscountPaymentType string

// VolumeDiscountsCreateCmdVolumeDiscountType holds value of 'volumeDiscountType' option
var VolumeDiscountsCreateCmdVolumeDiscountType string

// VolumeDiscountsCreateCmdContractTermMonth holds value of 'contractTermMonth' option
var VolumeDiscountsCreateCmdContractTermMonth int64

// VolumeDiscountsCreateCmdQuantity holds value of 'quantity' option
var VolumeDiscountsCreateCmdQuantity int64

// VolumeDiscountsCreateCmdBody holds contents of request body to be sent
var VolumeDiscountsCreateCmdBody string

func InitVolumeDiscountsCreateCmd() {
	VolumeDiscountsCreateCmd.Flags().StringVar(&VolumeDiscountsCreateCmdStartDate, "start-date", "", TRAPI("Start date."))

	VolumeDiscountsCreateCmd.Flags().StringVar(&VolumeDiscountsCreateCmdVolumeDiscountPaymentType, "volume-discount-payment-type", "", TRAPI("Payment type."))

	VolumeDiscountsCreateCmd.Flags().StringVar(&VolumeDiscountsCreateCmdVolumeDiscountType, "volume-discount-type", "", TRAPI("Long term discount type."))

	VolumeDiscountsCreateCmd.Flags().Int64Var(&VolumeDiscountsCreateCmdContractTermMonth, "contract-term-month", 12, TRAPI("Contract months."))

	VolumeDiscountsCreateCmd.Flags().Int64Var(&VolumeDiscountsCreateCmdQuantity, "quantity", 0, TRAPI("Quantity."))

	VolumeDiscountsCreateCmd.Flags().StringVar(&VolumeDiscountsCreateCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))

	VolumeDiscountsCreateCmd.RunE = VolumeDiscountsCreateCmdRunE

	VolumeDiscountsCmd.AddCommand(VolumeDiscountsCreateCmd)
}

// VolumeDiscountsCreateCmd defines 'create' subcommand
var VolumeDiscountsCreateCmd = &cobra.Command{
	Use:   "create",
	Short: TRAPI("/volume_discounts:post:summary"),
	Long:  TRAPI(`/volume_discounts:post:description`) + "\n\n" + createLinkToAPIReference("Order", "createVolumeDiscountQuotation"),
}

func VolumeDiscountsCreateCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	profile := getProfileIfExist()

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  profile,
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectVolumeDiscountsCreateCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectVolumeDiscountsCreateCmdParams(ac *apiClient) (*apiParams, error) {
	var body string
	var parsedBody interface{}
	var err error
	body, err = buildBodyForVolumeDiscountsCreateCmd()
	if err != nil {
		return nil, err
	}
	contentType := "application/json"

	if contentType == "application/json" {
		err = json.Unmarshal([]byte(body), &parsedBody)
		if err != nil {
			return nil, fmt.Errorf("invalid json format specified for `--body` parameter: %s", err)
		}
	}

	err = checkIfRequiredStringParameterIsSupplied("volumeDiscountPaymentType", "volume-discount-payment-type", "body", parsedBody, VolumeDiscountsCreateCmdVolumeDiscountPaymentType)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("volumeDiscountType", "volume-discount-type", "body", parsedBody, VolumeDiscountsCreateCmdVolumeDiscountType)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredIntegerParameterIsSupplied("quantity", "quantity", "body", parsedBody, VolumeDiscountsCreateCmdQuantity)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method:      "POST",
		path:        buildPathForVolumeDiscountsCreateCmd("/volume_discounts"),
		query:       buildQueryForVolumeDiscountsCreateCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForVolumeDiscountsCreateCmd(path string) string {

	return path
}

func buildQueryForVolumeDiscountsCreateCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForVolumeDiscountsCreateCmd() (string, error) {
	var result map[string]interface{}

	if VolumeDiscountsCreateCmdBody != "" {
		var b []byte
		var err error

		if strings.HasPrefix(VolumeDiscountsCreateCmdBody, "@") {
			fname := strings.TrimPrefix(VolumeDiscountsCreateCmdBody, "@")
			// #nosec
			b, err = os.ReadFile(fname)
		} else if VolumeDiscountsCreateCmdBody == "-" {
			b, err = io.ReadAll(os.Stdin)
		} else {
			b = []byte(VolumeDiscountsCreateCmdBody)
		}

		if err != nil {
			return "", err
		}

		err = json.Unmarshal(b, &result)
		if err != nil {
			return "", err
		}
	}

	if result == nil {
		result = make(map[string]interface{})
	}

	if VolumeDiscountsCreateCmdStartDate != "" {
		result["startDate"] = VolumeDiscountsCreateCmdStartDate
	}

	if VolumeDiscountsCreateCmdVolumeDiscountPaymentType != "" {
		result["volumeDiscountPaymentType"] = VolumeDiscountsCreateCmdVolumeDiscountPaymentType
	}

	if VolumeDiscountsCreateCmdVolumeDiscountType != "" {
		result["volumeDiscountType"] = VolumeDiscountsCreateCmdVolumeDiscountType
	}

	if VolumeDiscountsCreateCmd.Flags().Lookup("contract-term-month").Changed {
		result["contractTermMonth"] = VolumeDiscountsCreateCmdContractTermMonth
	}

	if VolumeDiscountsCreateCmd.Flags().Lookup("quantity").Changed {
		result["quantity"] = VolumeDiscountsCreateCmdQuantity
	}

	resultBytes, err := json.Marshal(result)
	if err != nil {
		return "", err
	}
	return string(resultBytes), nil
}
