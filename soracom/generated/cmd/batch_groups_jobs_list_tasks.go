// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// BatchGroupsJobsListTasksCmdBatchGroupId holds value of 'batch_group_id' option
var BatchGroupsJobsListTasksCmdBatchGroupId string

// BatchGroupsJobsListTasksCmdJobId holds value of 'job_id' option
var BatchGroupsJobsListTasksCmdJobId string

// BatchGroupsJobsListTasksCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var BatchGroupsJobsListTasksCmdLastEvaluatedKey string

// BatchGroupsJobsListTasksCmdStatus holds value of 'status' option
var BatchGroupsJobsListTasksCmdStatus string

// BatchGroupsJobsListTasksCmdLimit holds value of 'limit' option
var BatchGroupsJobsListTasksCmdLimit int64

// BatchGroupsJobsListTasksCmdPaginate indicates to do pagination or not
var BatchGroupsJobsListTasksCmdPaginate bool

// BatchGroupsJobsListTasksCmdOutputJSONL indicates to output with jsonl format
var BatchGroupsJobsListTasksCmdOutputJSONL bool

func InitBatchGroupsJobsListTasksCmd() {
	BatchGroupsJobsListTasksCmd.Flags().StringVar(&BatchGroupsJobsListTasksCmdBatchGroupId, "batch-group-id", "", TRAPI("Batch group ID."))

	BatchGroupsJobsListTasksCmd.Flags().StringVar(&BatchGroupsJobsListTasksCmdJobId, "job-id", "", TRAPI("Batch job ID."))

	BatchGroupsJobsListTasksCmd.Flags().StringVar(&BatchGroupsJobsListTasksCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("The value of the 'x-soracom-next-key' header returned in the response to the last request. Specify this to retrieve the next page of tasks."))

	BatchGroupsJobsListTasksCmd.Flags().StringVar(&BatchGroupsJobsListTasksCmdStatus, "status", "", TRAPI("Filter by task status."))

	BatchGroupsJobsListTasksCmd.Flags().Int64Var(&BatchGroupsJobsListTasksCmdLimit, "limit", 0, TRAPI("Maximum number of tasks to retrieve. The number of tasks returned may be less than the specified value."))

	BatchGroupsJobsListTasksCmd.Flags().BoolVar(&BatchGroupsJobsListTasksCmdPaginate, "fetch-all", false, TRCLI("cli.common_params.paginate.short_help"))

	BatchGroupsJobsListTasksCmd.Flags().BoolVar(&BatchGroupsJobsListTasksCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	BatchGroupsJobsListTasksCmd.RunE = BatchGroupsJobsListTasksCmdRunE

	BatchGroupsJobsCmd.AddCommand(BatchGroupsJobsListTasksCmd)
}

// BatchGroupsJobsListTasksCmd defines 'list-tasks' subcommand
var BatchGroupsJobsListTasksCmd = &cobra.Command{
	Use:   "list-tasks",
	Short: TRAPI("/batch_groups/{batch_group_id}/jobs/{job_id}/tasks:get:summary"),
	Long:  TRAPI(`/batch_groups/{batch_group_id}/jobs/{job_id}/tasks:get:description`) + "\n\n" + createLinkToAPIReference("Batch", "listTasksOfBatchJob"),
}

func BatchGroupsJobsListTasksCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectBatchGroupsJobsListTasksCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if BatchGroupsJobsListTasksCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectBatchGroupsJobsListTasksCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("batch_group_id", "batch-group-id", "path", parsedBody, BatchGroupsJobsListTasksCmdBatchGroupId)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("job_id", "job-id", "path", parsedBody, BatchGroupsJobsListTasksCmdJobId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForBatchGroupsJobsListTasksCmd("/batch_groups/{batch_group_id}/jobs/{job_id}/tasks"),
		query:  buildQueryForBatchGroupsJobsListTasksCmd(),

		doPagination:                      BatchGroupsJobsListTasksCmdPaginate,
		paginationKeyHeaderInResponse:     "x-soracom-next-key",
		paginationRequestParameterInQuery: "last_evaluated_key",

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForBatchGroupsJobsListTasksCmd(path string) string {

	escapedBatchGroupId := url.PathEscape(BatchGroupsJobsListTasksCmdBatchGroupId)

	path = strReplace(path, "{"+"batch_group_id"+"}", escapedBatchGroupId, -1)

	escapedJobId := url.PathEscape(BatchGroupsJobsListTasksCmdJobId)

	path = strReplace(path, "{"+"job_id"+"}", escapedJobId, -1)

	return path
}

func buildQueryForBatchGroupsJobsListTasksCmd() url.Values {
	result := url.Values{}

	if BatchGroupsJobsListTasksCmdLastEvaluatedKey != "" {
		result.Add("last_evaluated_key", BatchGroupsJobsListTasksCmdLastEvaluatedKey)
	}

	if BatchGroupsJobsListTasksCmdStatus != "" {
		result.Add("status", BatchGroupsJobsListTasksCmdStatus)
	}

	if BatchGroupsJobsListTasksCmdLimit != 0 {
		result.Add("limit", sprintf("%d", BatchGroupsJobsListTasksCmdLimit))
	}

	return result
}
