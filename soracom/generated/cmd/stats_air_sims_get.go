// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// StatsAirSimsGetCmdPeriod holds value of 'period' option
var StatsAirSimsGetCmdPeriod string

// StatsAirSimsGetCmdSimId holds value of 'sim_id' option
var StatsAirSimsGetCmdSimId string

// StatsAirSimsGetCmdFrom holds value of 'from' option
var StatsAirSimsGetCmdFrom int64

// StatsAirSimsGetCmdTo holds value of 'to' option
var StatsAirSimsGetCmdTo int64

// StatsAirSimsGetCmdOutputJSONL indicates to output with jsonl format
var StatsAirSimsGetCmdOutputJSONL bool

func InitStatsAirSimsGetCmd() {
	StatsAirSimsGetCmd.Flags().StringVar(&StatsAirSimsGetCmdPeriod, "period", "", TRAPI("Unit of aggregation.- 'month': Aggregate by month.  The 'from' and 'to' should be UNIX time (in seconds) from 18 months before the current time to the current time. The actual period of interest is not the time specified by 'from' and 'to'.  | Item | Description |  |-|-|  | Actual start time | 00:00:00 on the first day of the month, including the specified UNIX time (in seconds). |  | Actual end time | 24:00:00 of the last day of the month containing the specified UNIX time (in seconds). |- 'day': Aggregate by day.  The 'from' and 'to' should be UNIX time (in seconds) from 18 months before the current time to the current time. The actual period of interest is not the time specified by 'from' and 'to'.  | Item | Description |  |-|-|  | Actual start time | 00:00:00 of the day including the specified UNIX time (in seconds). |  | Actual end time | 24:00:00 of the day including the specified UNIX time (in seconds). |- 'minutes': Aggregate by approximately every 5 minutes.  The 'from' and 'to' must be between 32 days before the current time and the UNIX time (in seconds) of the current time. The actual period to be aggregated is not the time specified by 'from' and 'to'.  | Item | Description |  |-|-|  | Actual Start Time | Start time of approximately 5 minutes including the specified UNIX time (seconds). |  | Actual End Time | End time of approximately 5 minutes including the specified UNIX time (seconds). |"))

	StatsAirSimsGetCmd.Flags().StringVar(&StatsAirSimsGetCmdSimId, "sim-id", "", TRAPI("SIM ID of the target SIM. The SIM ID can be obtained from the [Sim:listSims API](#!/Sim/listSims)."))

	StatsAirSimsGetCmd.Flags().Int64Var(&StatsAirSimsGetCmdFrom, "from", 0, TRAPI("Specify the start month/day/minute of the period to be aggregated in UNIX time in seconds."))

	StatsAirSimsGetCmd.Flags().Int64Var(&StatsAirSimsGetCmdTo, "to", 0, TRAPI("Specify the end month/day/minute of the period to be aggregated in UNIX time in seconds."))

	StatsAirSimsGetCmd.Flags().BoolVar(&StatsAirSimsGetCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	StatsAirSimsGetCmd.RunE = StatsAirSimsGetCmdRunE

	StatsAirSimsCmd.AddCommand(StatsAirSimsGetCmd)
}

// StatsAirSimsGetCmd defines 'get' subcommand
var StatsAirSimsGetCmd = &cobra.Command{
	Use:   "get",
	Short: TRAPI("/stats/air/sims/{sim_id}:get:summary"),
	Long:  TRAPI(`/stats/air/sims/{sim_id}:get:description`) + "\n\n" + createLinkToAPIReference("Stats", "getAirStatsOfSim"),
}

func StatsAirSimsGetCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectStatsAirSimsGetCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if StatsAirSimsGetCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectStatsAirSimsGetCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("period", "period", "query", parsedBody, StatsAirSimsGetCmdPeriod)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("sim_id", "sim-id", "path", parsedBody, StatsAirSimsGetCmdSimId)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredIntegerParameterIsSupplied("from", "from", "query", parsedBody, StatsAirSimsGetCmdFrom)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredIntegerParameterIsSupplied("to", "to", "query", parsedBody, StatsAirSimsGetCmdTo)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForStatsAirSimsGetCmd("/stats/air/sims/{sim_id}"),
		query:  buildQueryForStatsAirSimsGetCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForStatsAirSimsGetCmd(path string) string {

	escapedSimId := url.PathEscape(StatsAirSimsGetCmdSimId)

	path = strReplace(path, "{"+"sim_id"+"}", escapedSimId, -1)

	return path
}

func buildQueryForStatsAirSimsGetCmd() url.Values {
	result := url.Values{}

	if StatsAirSimsGetCmdPeriod != "" {
		result.Add("period", StatsAirSimsGetCmdPeriod)
	}

	if StatsAirSimsGetCmdFrom != 0 {
		result.Add("from", sprintf("%d", StatsAirSimsGetCmdFrom))
	}

	if StatsAirSimsGetCmdTo != 0 {
		result.Add("to", sprintf("%d", StatsAirSimsGetCmdTo))
	}

	return result
}
