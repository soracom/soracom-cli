// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// SoraCamDevicesAtomCamSettingsGetNightVisionCmdDeviceId holds value of 'device_id' option
var SoraCamDevicesAtomCamSettingsGetNightVisionCmdDeviceId string

func InitSoraCamDevicesAtomCamSettingsGetNightVisionCmd() {
	SoraCamDevicesAtomCamSettingsGetNightVisionCmd.Flags().StringVar(&SoraCamDevicesAtomCamSettingsGetNightVisionCmdDeviceId, "device-id", "", TRAPI("Device ID of the target SoraCam compatible camera device."))

	SoraCamDevicesAtomCamSettingsGetNightVisionCmd.RunE = SoraCamDevicesAtomCamSettingsGetNightVisionCmdRunE

	SoraCamDevicesAtomCamSettingsCmd.AddCommand(SoraCamDevicesAtomCamSettingsGetNightVisionCmd)
}

// SoraCamDevicesAtomCamSettingsGetNightVisionCmd defines 'get-night-vision' subcommand
var SoraCamDevicesAtomCamSettingsGetNightVisionCmd = &cobra.Command{
	Use:   "get-night-vision",
	Short: TRAPI("/sora_cam/devices/{device_id}/atom_cam/settings/night_vision:get:summary"),
	Long:  TRAPI(`/sora_cam/devices/{device_id}/atom_cam/settings/night_vision:get:description`) + "\n\n" + createLinkToAPIReference("SoraCam", "getSoraCamDeviceAtomCamSettingsNightVision"),
}

func SoraCamDevicesAtomCamSettingsGetNightVisionCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectSoraCamDevicesAtomCamSettingsGetNightVisionCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSoraCamDevicesAtomCamSettingsGetNightVisionCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("device_id", "device-id", "path", parsedBody, SoraCamDevicesAtomCamSettingsGetNightVisionCmdDeviceId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForSoraCamDevicesAtomCamSettingsGetNightVisionCmd("/sora_cam/devices/{device_id}/atom_cam/settings/night_vision"),
		query:  buildQueryForSoraCamDevicesAtomCamSettingsGetNightVisionCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSoraCamDevicesAtomCamSettingsGetNightVisionCmd(path string) string {

	escapedDeviceId := url.PathEscape(SoraCamDevicesAtomCamSettingsGetNightVisionCmdDeviceId)

	path = strReplace(path, "{"+"device_id"+"}", escapedDeviceId, -1)

	return path
}

func buildQueryForSoraCamDevicesAtomCamSettingsGetNightVisionCmd() url.Values {
	result := url.Values{}

	return result
}
