// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/soracom/soracom-cli/generators/lib"

	"github.com/spf13/cobra"
)

// SimsRemoveArcCredentialsCmdSimId holds value of 'sim_id' option
var SimsRemoveArcCredentialsCmdSimId string

func InitSimsRemoveArcCredentialsCmd() {
	SimsRemoveArcCredentialsCmd.Flags().StringVar(&SimsRemoveArcCredentialsCmdSimId, "sim-id", "", TRAPI("SIM ID of the target SIM."))

	SimsRemoveArcCredentialsCmd.RunE = SimsRemoveArcCredentialsCmdRunE

	SimsCmd.AddCommand(SimsRemoveArcCredentialsCmd)
}

// SimsRemoveArcCredentialsCmd defines 'remove-arc-credentials' subcommand
var SimsRemoveArcCredentialsCmd = &cobra.Command{
	Use:   "remove-arc-credentials",
	Short: TRAPI("/sims/{sim_id}/credentials/arc:delete:summary"),
	Long:  TRAPI(`/sims/{sim_id}/credentials/arc:delete:description`) + "\n\n" + createLinkToAPIReference("Sim", "removeArcSimCredentials"),
}

func SimsRemoveArcCredentialsCmdRunE(cmd *cobra.Command, args []string) error {
	lib.WarnfStderr(TRCLI("cli.deprecated-api") + "\n")

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	profile := getProfileIfExist()

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  profile,
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectSimsRemoveArcCredentialsCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSimsRemoveArcCredentialsCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("sim_id", "sim-id", "path", parsedBody, SimsRemoveArcCredentialsCmdSimId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "DELETE",
		path:   buildPathForSimsRemoveArcCredentialsCmd("/sims/{sim_id}/credentials/arc"),
		query:  buildQueryForSimsRemoveArcCredentialsCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSimsRemoveArcCredentialsCmd(path string) string {

	escapedSimId := url.PathEscape(SimsRemoveArcCredentialsCmdSimId)

	path = strReplace(path, "{"+"sim_id"+"}", escapedSimId, -1)

	return path
}

func buildQueryForSimsRemoveArcCredentialsCmd() url.Values {
	result := url.Values{}

	return result
}
