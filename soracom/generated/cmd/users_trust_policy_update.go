// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"
	"fmt"
	"io"
	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// UsersTrustPolicyUpdateCmdOperatorId holds value of 'operator_id' option
var UsersTrustPolicyUpdateCmdOperatorId string

// UsersTrustPolicyUpdateCmdTrustPolicy holds value of 'trustPolicy' option
var UsersTrustPolicyUpdateCmdTrustPolicy string

// UsersTrustPolicyUpdateCmdUserName holds value of 'user_name' option
var UsersTrustPolicyUpdateCmdUserName string

// UsersTrustPolicyUpdateCmdBody holds contents of request body to be sent
var UsersTrustPolicyUpdateCmdBody string

func InitUsersTrustPolicyUpdateCmd() {
	UsersTrustPolicyUpdateCmd.Flags().StringVar(&UsersTrustPolicyUpdateCmdOperatorId, "operator-id", "", TRAPI("Operator ID."))

	UsersTrustPolicyUpdateCmd.Flags().StringVar(&UsersTrustPolicyUpdateCmdTrustPolicy, "trust-policy", "", TRAPI("Trust policy that describes who can switch to this user."))

	UsersTrustPolicyUpdateCmd.Flags().StringVar(&UsersTrustPolicyUpdateCmdUserName, "user-name", "", TRAPI("SAM user name."))

	UsersTrustPolicyUpdateCmd.Flags().StringVar(&UsersTrustPolicyUpdateCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))

	UsersTrustPolicyUpdateCmd.RunE = UsersTrustPolicyUpdateCmdRunE

	UsersTrustPolicyCmd.AddCommand(UsersTrustPolicyUpdateCmd)
}

// UsersTrustPolicyUpdateCmd defines 'update' subcommand
var UsersTrustPolicyUpdateCmd = &cobra.Command{
	Use:   "update",
	Short: TRAPI("/operators/{operator_id}/users/{user_name}/trust_policy:put:summary"),
	Long:  TRAPI(`/operators/{operator_id}/users/{user_name}/trust_policy:put:description`) + "\n\n" + createLinkToAPIReference("User", "updateUserTrustPolicy"),
}

func UsersTrustPolicyUpdateCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectUsersTrustPolicyUpdateCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectUsersTrustPolicyUpdateCmdParams(ac *apiClient) (*apiParams, error) {
	var body string
	var parsedBody interface{}
	var err error
	if UsersTrustPolicyUpdateCmdOperatorId == "" {
		UsersTrustPolicyUpdateCmdOperatorId = ac.apiCredentials.getOperatorID()
	}

	body, err = buildBodyForUsersTrustPolicyUpdateCmd()
	if err != nil {
		return nil, err
	}
	contentType := "application/json"

	if contentType == "application/json" {
		err = json.Unmarshal([]byte(body), &parsedBody)
		if err != nil {
			return nil, fmt.Errorf("invalid json format specified for `--body` parameter: %s", err)
		}
	}

	err = checkIfRequiredStringParameterIsSupplied("user_name", "user-name", "path", parsedBody, UsersTrustPolicyUpdateCmdUserName)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method:      "PUT",
		path:        buildPathForUsersTrustPolicyUpdateCmd("/operators/{operator_id}/users/{user_name}/trust_policy"),
		query:       buildQueryForUsersTrustPolicyUpdateCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForUsersTrustPolicyUpdateCmd(path string) string {

	escapedOperatorId := url.PathEscape(UsersTrustPolicyUpdateCmdOperatorId)

	path = strReplace(path, "{"+"operator_id"+"}", escapedOperatorId, -1)

	escapedUserName := url.PathEscape(UsersTrustPolicyUpdateCmdUserName)

	path = strReplace(path, "{"+"user_name"+"}", escapedUserName, -1)

	return path
}

func buildQueryForUsersTrustPolicyUpdateCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForUsersTrustPolicyUpdateCmd() (string, error) {
	var result map[string]interface{}

	if UsersTrustPolicyUpdateCmdBody != "" {
		var b []byte
		var err error

		if strings.HasPrefix(UsersTrustPolicyUpdateCmdBody, "@") {
			fname := strings.TrimPrefix(UsersTrustPolicyUpdateCmdBody, "@")
			// #nosec
			b, err = os.ReadFile(fname)
		} else if UsersTrustPolicyUpdateCmdBody == "-" {
			b, err = io.ReadAll(os.Stdin)
		} else {
			b = []byte(UsersTrustPolicyUpdateCmdBody)
		}

		if err != nil {
			return "", err
		}

		err = json.Unmarshal(b, &result)
		if err != nil {
			return "", err
		}
	}

	if result == nil {
		result = make(map[string]interface{})
	}

	if UsersTrustPolicyUpdateCmdTrustPolicy != "" {
		result["trustPolicy"] = UsersTrustPolicyUpdateCmdTrustPolicy
	}

	resultBytes, err := json.Marshal(result)
	if err != nil {
		return "", err
	}
	return string(resultBytes), nil
}
