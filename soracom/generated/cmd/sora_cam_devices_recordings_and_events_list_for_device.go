// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// SoraCamDevicesRecordingsAndEventsListForDeviceCmdDeviceId holds value of 'device_id' option
var SoraCamDevicesRecordingsAndEventsListForDeviceCmdDeviceId string

// SoraCamDevicesRecordingsAndEventsListForDeviceCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var SoraCamDevicesRecordingsAndEventsListForDeviceCmdLastEvaluatedKey string

// SoraCamDevicesRecordingsAndEventsListForDeviceCmdSort holds value of 'sort' option
var SoraCamDevicesRecordingsAndEventsListForDeviceCmdSort string

// SoraCamDevicesRecordingsAndEventsListForDeviceCmdFrom holds value of 'from' option
var SoraCamDevicesRecordingsAndEventsListForDeviceCmdFrom int64

// SoraCamDevicesRecordingsAndEventsListForDeviceCmdTo holds value of 'to' option
var SoraCamDevicesRecordingsAndEventsListForDeviceCmdTo int64

// SoraCamDevicesRecordingsAndEventsListForDeviceCmdPaginate indicates to do pagination or not
var SoraCamDevicesRecordingsAndEventsListForDeviceCmdPaginate bool

func InitSoraCamDevicesRecordingsAndEventsListForDeviceCmd() {
	SoraCamDevicesRecordingsAndEventsListForDeviceCmd.Flags().StringVar(&SoraCamDevicesRecordingsAndEventsListForDeviceCmdDeviceId, "device-id", "", TRAPI("Device ID of the compatible camera device."))

	SoraCamDevicesRecordingsAndEventsListForDeviceCmd.Flags().StringVar(&SoraCamDevicesRecordingsAndEventsListForDeviceCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("Value of the x-soracom-next-key header in the response to the last listSoraCamDeviceRecordingsAndEvents request. By specifying this parameter, you can continue to retrieve the list from the last request."))

	SoraCamDevicesRecordingsAndEventsListForDeviceCmd.Flags().StringVar(&SoraCamDevicesRecordingsAndEventsListForDeviceCmdSort, "sort", "desc", TRAPI("Sort order of the recordings and events.- 'desc': Descending order (latest data entry first)- 'asc': Ascending order (oldest data entry first)"))

	SoraCamDevicesRecordingsAndEventsListForDeviceCmd.Flags().Int64Var(&SoraCamDevicesRecordingsAndEventsListForDeviceCmdFrom, "from", 0, TRAPI("Start time of the list to be searched (unix time in milliseconds). If not specified, 'from' is set to the oldest time within the retention period of the license assigned to the compatible camera device."))

	SoraCamDevicesRecordingsAndEventsListForDeviceCmd.Flags().Int64Var(&SoraCamDevicesRecordingsAndEventsListForDeviceCmdTo, "to", 0, TRAPI("End time of the list to be searched (unix time in milliseconds). If not specified, 'to' is set to the current time."))

	SoraCamDevicesRecordingsAndEventsListForDeviceCmd.Flags().BoolVar(&SoraCamDevicesRecordingsAndEventsListForDeviceCmdPaginate, "fetch-all", false, TRCLI("cli.common_params.paginate.short_help"))

	SoraCamDevicesRecordingsAndEventsListForDeviceCmd.RunE = SoraCamDevicesRecordingsAndEventsListForDeviceCmdRunE

	SoraCamDevicesRecordingsAndEventsCmd.AddCommand(SoraCamDevicesRecordingsAndEventsListForDeviceCmd)
}

// SoraCamDevicesRecordingsAndEventsListForDeviceCmd defines 'list-for-device' subcommand
var SoraCamDevicesRecordingsAndEventsListForDeviceCmd = &cobra.Command{
	Use:   "list-for-device",
	Short: TRAPI("/sora_cam/devices/{device_id}/recordings_and_events:get:summary"),
	Long:  TRAPI(`/sora_cam/devices/{device_id}/recordings_and_events:get:description`) + "\n\n" + createLinkToAPIReference("SoraCam", "listSoraCamDeviceRecordingsAndEvents"),
}

func SoraCamDevicesRecordingsAndEventsListForDeviceCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectSoraCamDevicesRecordingsAndEventsListForDeviceCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSoraCamDevicesRecordingsAndEventsListForDeviceCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("device_id", "device-id", "path", parsedBody, SoraCamDevicesRecordingsAndEventsListForDeviceCmdDeviceId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForSoraCamDevicesRecordingsAndEventsListForDeviceCmd("/sora_cam/devices/{device_id}/recordings_and_events"),
		query:  buildQueryForSoraCamDevicesRecordingsAndEventsListForDeviceCmd(),

		doPagination:                      SoraCamDevicesRecordingsAndEventsListForDeviceCmdPaginate,
		paginationKeyHeaderInResponse:     "x-soracom-next-key",
		paginationRequestParameterInQuery: "last_evaluated_key",

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSoraCamDevicesRecordingsAndEventsListForDeviceCmd(path string) string {

	escapedDeviceId := url.PathEscape(SoraCamDevicesRecordingsAndEventsListForDeviceCmdDeviceId)

	path = strReplace(path, "{"+"device_id"+"}", escapedDeviceId, -1)

	return path
}

func buildQueryForSoraCamDevicesRecordingsAndEventsListForDeviceCmd() url.Values {
	result := url.Values{}

	if SoraCamDevicesRecordingsAndEventsListForDeviceCmdLastEvaluatedKey != "" {
		result.Add("last_evaluated_key", SoraCamDevicesRecordingsAndEventsListForDeviceCmdLastEvaluatedKey)
	}

	if SoraCamDevicesRecordingsAndEventsListForDeviceCmdSort != "desc" {
		result.Add("sort", SoraCamDevicesRecordingsAndEventsListForDeviceCmdSort)
	}

	if SoraCamDevicesRecordingsAndEventsListForDeviceCmdFrom != 0 {
		result.Add("from", sprintf("%d", SoraCamDevicesRecordingsAndEventsListForDeviceCmdFrom))
	}

	if SoraCamDevicesRecordingsAndEventsListForDeviceCmdTo != 0 {
		result.Add("to", sprintf("%d", SoraCamDevicesRecordingsAndEventsListForDeviceCmdTo))
	}

	return result
}
