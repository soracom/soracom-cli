// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// SoraCamDevicesListCmdOutputJSONL indicates to output with jsonl format
var SoraCamDevicesListCmdOutputJSONL bool

func InitSoraCamDevicesListCmd() {
	SoraCamDevicesListCmd.Flags().BoolVar(&SoraCamDevicesListCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	SoraCamDevicesListCmd.RunE = SoraCamDevicesListCmdRunE

	SoraCamDevicesCmd.AddCommand(SoraCamDevicesListCmd)
}

// SoraCamDevicesListCmd defines 'list' subcommand
var SoraCamDevicesListCmd = &cobra.Command{
	Use:   "list",
	Short: TRAPI("/sora_cam/devices:get:summary"),
	Long:  TRAPI(`/sora_cam/devices:get:description`) + "\n\n" + createLinkToAPIReference("SoraCam", "listSoraCamDevices"),
}

func SoraCamDevicesListCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectSoraCamDevicesListCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if SoraCamDevicesListCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSoraCamDevicesListCmdParams(ac *apiClient) (*apiParams, error) {

	return &apiParams{
		method: "GET",
		path:   buildPathForSoraCamDevicesListCmd("/sora_cam/devices"),
		query:  buildQueryForSoraCamDevicesListCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSoraCamDevicesListCmd(path string) string {

	return path
}

func buildQueryForSoraCamDevicesListCmd() url.Values {
	result := url.Values{}

	return result
}
