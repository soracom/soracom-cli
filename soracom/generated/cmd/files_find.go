// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// FilesFindCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var FilesFindCmdLastEvaluatedKey string

// FilesFindCmdPrefix holds value of 'prefix' option
var FilesFindCmdPrefix string

// FilesFindCmdScope holds value of 'scope' option
var FilesFindCmdScope string

// FilesFindCmdLimit holds value of 'limit' option
var FilesFindCmdLimit int64

// FilesFindCmdPaginate indicates to do pagination or not
var FilesFindCmdPaginate bool

// FilesFindCmdOutputJSONL indicates to output with jsonl format
var FilesFindCmdOutputJSONL bool

func InitFilesFindCmd() {
	FilesFindCmd.Flags().StringVar(&FilesFindCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("The filePath of the last file entry retrieved on the previous page. By specifying this parameter, you can continue to retrieve the list from the next file entry onward."))

	FilesFindCmd.Flags().StringVar(&FilesFindCmdPrefix, "prefix", "", TRAPI("Prefix to match with file path."))

	FilesFindCmd.Flags().StringVar(&FilesFindCmdScope, "scope", "", TRAPI("Scope of the request. Specify 'private' to handle files uploaded to Harvest Files."))

	FilesFindCmd.Flags().Int64Var(&FilesFindCmdLimit, "limit", 10, TRAPI("Maximum number of file entries to be returned."))

	FilesFindCmd.Flags().BoolVar(&FilesFindCmdPaginate, "fetch-all", false, TRCLI("cli.common_params.paginate.short_help"))

	FilesFindCmd.Flags().BoolVar(&FilesFindCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	FilesFindCmd.RunE = FilesFindCmdRunE

	FilesCmd.AddCommand(FilesFindCmd)
}

// FilesFindCmd defines 'find' subcommand
var FilesFindCmd = &cobra.Command{
	Use:   "find",
	Short: TRAPI("/files:get:summary"),
	Long:  TRAPI(`/files:get:description`) + "\n\n" + createLinkToAPIReference("FileEntry", "findFiles"),
}

func FilesFindCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectFilesFindCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if FilesFindCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectFilesFindCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error

	err = checkIfRequiredStringParameterIsSupplied("prefix", "prefix", "query", parsedBody, FilesFindCmdPrefix)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("scope", "scope", "query", parsedBody, FilesFindCmdScope)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForFilesFindCmd("/files"),
		query:  buildQueryForFilesFindCmd(),

		doPagination:                      FilesFindCmdPaginate,
		paginationKeyHeaderInResponse:     "x-soracom-next-key",
		paginationRequestParameterInQuery: "last_evaluated_key",

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForFilesFindCmd(path string) string {

	return path
}

func buildQueryForFilesFindCmd() url.Values {
	result := url.Values{}

	if FilesFindCmdLastEvaluatedKey != "" {
		result.Add("last_evaluated_key", FilesFindCmdLastEvaluatedKey)
	}

	if FilesFindCmdPrefix != "" {
		result.Add("prefix", FilesFindCmdPrefix)
	}

	if FilesFindCmdScope != "" {
		result.Add("scope", FilesFindCmdScope)
	}

	if FilesFindCmdLimit != 10 {
		result.Add("limit", sprintf("%d", FilesFindCmdLimit))
	}

	return result
}
