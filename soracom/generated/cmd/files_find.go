// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"

	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// FilesFindCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var FilesFindCmdLastEvaluatedKey string

// FilesFindCmdLimit holds value of 'limit' option
var FilesFindCmdLimit string

// FilesFindCmdPrefix holds value of 'prefix' option
var FilesFindCmdPrefix string

// FilesFindCmdScope holds value of 'scope' option
var FilesFindCmdScope string

// FilesFindCmdPaginate indicates to do pagination or not
var FilesFindCmdPaginate bool

func init() {
	FilesFindCmd.Flags().StringVar(&FilesFindCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("The filePath of the last file entry retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next file entry onward."))

	FilesFindCmd.Flags().StringVar(&FilesFindCmdLimit, "limit", "", TRAPI("Num of entries"))

	FilesFindCmd.Flags().StringVar(&FilesFindCmdPrefix, "prefix", "", TRAPI("Prefix to match with file path"))

	FilesFindCmd.Flags().StringVar(&FilesFindCmdScope, "scope", "", TRAPI("Scope of the request"))

	FilesFindCmd.Flags().BoolVar(&FilesFindCmdPaginate, "fetch-all", false, TRCLI("cli.common_params.paginate.short_help"))
	FilesCmd.AddCommand(FilesFindCmd)
}

// FilesFindCmd defines 'find' subcommand
var FilesFindCmd = &cobra.Command{
	Use:   "find",
	Short: TRAPI("/files:get:summary"),
	Long:  TRAPI(`/files:get:description`),
	RunE: func(cmd *cobra.Command, args []string) error {
		opt := &apiClientOptions{
			BasePath: "/v1",
			Language: getSelectedLanguage(),
		}

		ac := newAPIClient(opt)
		if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
			ac.SetVerbose(true)
		}
		err := authHelper(ac, cmd, args)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		param, err := collectFilesFindCmdParams(ac)
		if err != nil {
			return err
		}

		body, err := ac.callAPI(param)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if body == "" {
			return nil
		}

		if jqString != "" {
			return processJQ(jqString, body)
		}

		if rawOutput {
			_, err = os.Stdout.Write([]byte(body))
		} else {
			return prettyPrintStringAsJSON(body)
		}
		return err
	},
}

func collectFilesFindCmdParams(ac *apiClient) (*apiParams, error) {

	if FilesFindCmdPrefix == "" {
		return nil, fmt.Errorf("required parameter '%s' is not specified", "prefix")
	}

	if FilesFindCmdScope == "" {
		return nil, fmt.Errorf("required parameter '%s' is not specified", "scope")
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForFilesFindCmd("/files"),
		query:  buildQueryForFilesFindCmd(),

		doPagination:                      FilesFindCmdPaginate,
		paginationKeyHeaderInResponse:     "x-soracom-next-key",
		paginationRequestParameterInQuery: "last_evaluated_key",

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForFilesFindCmd(path string) string {

	return path
}

func buildQueryForFilesFindCmd() url.Values {
	result := url.Values{}

	if FilesFindCmdLastEvaluatedKey != "" {
		result.Add("last_evaluated_key", FilesFindCmdLastEvaluatedKey)
	}

	if FilesFindCmdLimit != "" {
		result.Add("limit", FilesFindCmdLimit)
	}

	if FilesFindCmdPrefix != "" {
		result.Add("prefix", FilesFindCmdPrefix)
	}

	if FilesFindCmdScope != "" {
		result.Add("scope", FilesFindCmdScope)
	}

	return result
}
