// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// SimsCancelSubscriptionContainerDownloadCmdIccid holds value of 'iccid' option
var SimsCancelSubscriptionContainerDownloadCmdIccid string

// SimsCancelSubscriptionContainerDownloadCmdImsi holds value of 'imsi' option
var SimsCancelSubscriptionContainerDownloadCmdImsi string

// SimsCancelSubscriptionContainerDownloadCmdSimId holds value of 'sim_id' option
var SimsCancelSubscriptionContainerDownloadCmdSimId string

func InitSimsCancelSubscriptionContainerDownloadCmd() {
	SimsCancelSubscriptionContainerDownloadCmd.Flags().StringVar(&SimsCancelSubscriptionContainerDownloadCmdIccid, "iccid", "", TRAPI("The ICCID of the target subscription container."))

	SimsCancelSubscriptionContainerDownloadCmd.Flags().StringVar(&SimsCancelSubscriptionContainerDownloadCmdImsi, "imsi", "", TRAPI("The IMSI of the target additional subscription."))

	SimsCancelSubscriptionContainerDownloadCmd.Flags().StringVar(&SimsCancelSubscriptionContainerDownloadCmdSimId, "sim-id", "", TRAPI("The SIM ID of the target SIM."))

	SimsCancelSubscriptionContainerDownloadCmd.RunE = SimsCancelSubscriptionContainerDownloadCmdRunE

	SimsCmd.AddCommand(SimsCancelSubscriptionContainerDownloadCmd)
}

// SimsCancelSubscriptionContainerDownloadCmd defines 'cancel-subscription-container-download' subcommand
var SimsCancelSubscriptionContainerDownloadCmd = &cobra.Command{
	Use:   "cancel-subscription-container-download",
	Short: TRAPI("/sims/{sim_id}/profiles/{iccid}/subscribers/{imsi}/cancel_download:post:summary"),
	Long:  TRAPI(`/sims/{sim_id}/profiles/{iccid}/subscribers/{imsi}/cancel_download:post:description`) + "\n\n" + createLinkToAPIReference("Sim", "cancelSubscriptionContainerDownload"),
}

func SimsCancelSubscriptionContainerDownloadCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	profile := getProfileIfExist()

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  profile,
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectSimsCancelSubscriptionContainerDownloadCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSimsCancelSubscriptionContainerDownloadCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("iccid", "iccid", "path", parsedBody, SimsCancelSubscriptionContainerDownloadCmdIccid)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("imsi", "imsi", "path", parsedBody, SimsCancelSubscriptionContainerDownloadCmdImsi)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("sim_id", "sim-id", "path", parsedBody, SimsCancelSubscriptionContainerDownloadCmdSimId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "POST",
		path:   buildPathForSimsCancelSubscriptionContainerDownloadCmd("/sims/{sim_id}/profiles/{iccid}/subscribers/{imsi}/cancel_download"),
		query:  buildQueryForSimsCancelSubscriptionContainerDownloadCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSimsCancelSubscriptionContainerDownloadCmd(path string) string {

	escapedIccid := url.PathEscape(SimsCancelSubscriptionContainerDownloadCmdIccid)

	path = strReplace(path, "{"+"iccid"+"}", escapedIccid, -1)

	escapedImsi := url.PathEscape(SimsCancelSubscriptionContainerDownloadCmdImsi)

	path = strReplace(path, "{"+"imsi"+"}", escapedImsi, -1)

	escapedSimId := url.PathEscape(SimsCancelSubscriptionContainerDownloadCmdSimId)

	path = strReplace(path, "{"+"sim_id"+"}", escapedSimId, -1)

	return path
}

func buildQueryForSimsCancelSubscriptionContainerDownloadCmd() url.Values {
	result := url.Values{}

	return result
}
