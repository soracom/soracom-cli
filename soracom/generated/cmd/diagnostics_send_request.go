// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"
	"fmt"
	"io"
	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// DiagnosticsSendRequestCmdResourceId holds value of 'resourceId' option
var DiagnosticsSendRequestCmdResourceId string

// DiagnosticsSendRequestCmdResourceType holds value of 'resourceType' option
var DiagnosticsSendRequestCmdResourceType string

// DiagnosticsSendRequestCmdService holds value of 'service' option
var DiagnosticsSendRequestCmdService string

// DiagnosticsSendRequestCmdFrom holds value of 'from' option
var DiagnosticsSendRequestCmdFrom int64

// DiagnosticsSendRequestCmdTo holds value of 'to' option
var DiagnosticsSendRequestCmdTo int64

// DiagnosticsSendRequestCmdBody holds contents of request body to be sent
var DiagnosticsSendRequestCmdBody string

func InitDiagnosticsSendRequestCmd() {
	DiagnosticsSendRequestCmd.Flags().StringVar(&DiagnosticsSendRequestCmdResourceId, "resource-id", "", TRAPI("Identifier according to resourceType.- If resourceType is 'sim', specify the SIM ID."))

	DiagnosticsSendRequestCmd.Flags().StringVar(&DiagnosticsSendRequestCmdResourceType, "resource-type", "", TRAPI(""))

	DiagnosticsSendRequestCmd.Flags().StringVar(&DiagnosticsSendRequestCmdService, "service", "", TRAPI(""))

	DiagnosticsSendRequestCmd.Flags().Int64Var(&DiagnosticsSendRequestCmdFrom, "from", 0, TRAPI("Start time for diagnostic (UNIX time in milliseconds)."))

	DiagnosticsSendRequestCmd.Flags().Int64Var(&DiagnosticsSendRequestCmdTo, "to", 0, TRAPI("End time for diagnostic (UNIX time in milliseconds)."))

	DiagnosticsSendRequestCmd.Flags().StringVar(&DiagnosticsSendRequestCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))

	DiagnosticsSendRequestCmd.RunE = DiagnosticsSendRequestCmdRunE

	DiagnosticsCmd.AddCommand(DiagnosticsSendRequestCmd)
}

// DiagnosticsSendRequestCmd defines 'send-request' subcommand
var DiagnosticsSendRequestCmd = &cobra.Command{
	Use:   "send-request",
	Short: TRAPI("/diagnostics:post:summary"),
	Long:  TRAPI(`/diagnostics:post:description`) + "\n\n" + createLinkToAPIReference("Diagnostic", "sendDiagnosticRequest"),
}

func DiagnosticsSendRequestCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	profile := getProfileIfExist()

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  profile,
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectDiagnosticsSendRequestCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectDiagnosticsSendRequestCmdParams(ac *apiClient) (*apiParams, error) {
	var body string
	var parsedBody interface{}
	var err error
	body, err = buildBodyForDiagnosticsSendRequestCmd()
	if err != nil {
		return nil, err
	}
	contentType := "application/json"

	if contentType == "application/json" {
		err = json.Unmarshal([]byte(body), &parsedBody)
		if err != nil {
			return nil, fmt.Errorf("invalid json format specified for `--body` parameter: %s", err)
		}
	}

	err = checkIfRequiredStringParameterIsSupplied("resourceId", "resource-id", "body", parsedBody, DiagnosticsSendRequestCmdResourceId)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("resourceType", "resource-type", "body", parsedBody, DiagnosticsSendRequestCmdResourceType)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("service", "service", "body", parsedBody, DiagnosticsSendRequestCmdService)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method:      "POST",
		path:        buildPathForDiagnosticsSendRequestCmd("/diagnostics"),
		query:       buildQueryForDiagnosticsSendRequestCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForDiagnosticsSendRequestCmd(path string) string {

	return path
}

func buildQueryForDiagnosticsSendRequestCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForDiagnosticsSendRequestCmd() (string, error) {
	var result map[string]interface{}

	if DiagnosticsSendRequestCmdBody != "" {
		var b []byte
		var err error

		if strings.HasPrefix(DiagnosticsSendRequestCmdBody, "@") {
			fname := strings.TrimPrefix(DiagnosticsSendRequestCmdBody, "@")
			// #nosec
			b, err = os.ReadFile(fname)
		} else if DiagnosticsSendRequestCmdBody == "-" {
			b, err = io.ReadAll(os.Stdin)
		} else {
			b = []byte(DiagnosticsSendRequestCmdBody)
		}

		if err != nil {
			return "", err
		}

		err = json.Unmarshal(b, &result)
		if err != nil {
			return "", err
		}
	}

	if result == nil {
		result = make(map[string]interface{})
	}

	if DiagnosticsSendRequestCmdResourceId != "" {
		result["resourceId"] = DiagnosticsSendRequestCmdResourceId
	}

	if DiagnosticsSendRequestCmdResourceType != "" {
		result["resourceType"] = DiagnosticsSendRequestCmdResourceType
	}

	if DiagnosticsSendRequestCmdService != "" {
		result["service"] = DiagnosticsSendRequestCmdService
	}

	if DiagnosticsSendRequestCmd.Flags().Lookup("from").Changed {
		result["from"] = DiagnosticsSendRequestCmdFrom
	}

	if DiagnosticsSendRequestCmd.Flags().Lookup("to").Changed {
		result["to"] = DiagnosticsSendRequestCmdTo
	}

	resultBytes, err := json.Marshal(result)
	if err != nil {
		return "", err
	}
	return string(resultBytes), nil
}
