// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"

	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// StatsAirGetCmdImsi holds value of 'imsi' option
var StatsAirGetCmdImsi string

// StatsAirGetCmdPeriod holds value of 'period' option
var StatsAirGetCmdPeriod string

// StatsAirGetCmdFrom holds value of 'from' option
var StatsAirGetCmdFrom int64

// StatsAirGetCmdTo holds value of 'to' option
var StatsAirGetCmdTo int64

func init() {
	StatsAirGetCmd.Flags().StringVar(&StatsAirGetCmdImsi, "imsi", "", TRAPI("imsi"))

	StatsAirGetCmd.Flags().StringVar(&StatsAirGetCmdPeriod, "period", "", TRAPI("Units of aggregate data. For minutes, the interval is around 5 minutes."))

	StatsAirGetCmd.Flags().Int64Var(&StatsAirGetCmdFrom, "from", 0, TRAPI("Start time in unixtime for the aggregate data."))

	StatsAirGetCmd.Flags().Int64Var(&StatsAirGetCmdTo, "to", 0, TRAPI("End time in unixtime for the aggregate data."))
	StatsAirCmd.AddCommand(StatsAirGetCmd)
}

// StatsAirGetCmd defines 'get' subcommand
var StatsAirGetCmd = &cobra.Command{
	Use:   "get",
	Short: TRAPI("/stats/air/subscribers/{imsi}:get:summary"),
	Long:  TRAPI(`/stats/air/subscribers/{imsi}:get:description`),
	RunE: func(cmd *cobra.Command, args []string) error {
		opt := &apiClientOptions{
			BasePath: "/v1",
			Language: getSelectedLanguage(),
		}

		ac := newAPIClient(opt)
		if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
			ac.SetVerbose(true)
		}
		err := authHelper(ac, cmd, args)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		param, err := collectStatsAirGetCmdParams(ac)
		if err != nil {
			return err
		}

		body, err := ac.callAPI(param)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if body == "" {
			return nil
		}

		if queryString != "" {
			return processQuery(queryString, body)
		}

		if rawOutput {
			_, err = os.Stdout.Write([]byte(body))
		} else {
			return prettyPrintStringAsJSON(body)
		}
		return err
	},
}

func collectStatsAirGetCmdParams(ac *apiClient) (*apiParams, error) {
	if StatsAirGetCmdImsi == "" {
		return nil, fmt.Errorf("required parameter '%s' is not specified", "imsi")
	}

	if StatsAirGetCmdPeriod == "" {
		return nil, fmt.Errorf("required parameter '%s' is not specified", "period")
	}

	if StatsAirGetCmdFrom == 0 {
		return nil, fmt.Errorf("required parameter '%s' is not specified", "from")
	}

	if StatsAirGetCmdTo == 0 {
		return nil, fmt.Errorf("required parameter '%s' is not specified", "to")
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForStatsAirGetCmd("/stats/air/subscribers/{imsi}"),
		query:  buildQueryForStatsAirGetCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForStatsAirGetCmd(path string) string {

	escapedImsi := url.PathEscape(StatsAirGetCmdImsi)

	path = strReplace(path, "{"+"imsi"+"}", escapedImsi, -1)

	return path
}

func buildQueryForStatsAirGetCmd() url.Values {
	result := url.Values{}

	if StatsAirGetCmdPeriod != "" {
		result.Add("period", StatsAirGetCmdPeriod)
	}

	if StatsAirGetCmdFrom != 0 {
		result.Add("from", sprintf("%d", StatsAirGetCmdFrom))
	}

	if StatsAirGetCmdTo != 0 {
		result.Add("to", sprintf("%d", StatsAirGetCmdTo))
	}

	return result
}
