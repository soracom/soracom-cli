// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"
	"fmt"
	"io"
	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// DevicesUpdateObjectModelCmdCreatedTime holds value of 'createdTime' option
var DevicesUpdateObjectModelCmdCreatedTime string

// DevicesUpdateObjectModelCmdFormat holds value of 'format' option
var DevicesUpdateObjectModelCmdFormat string

// DevicesUpdateObjectModelCmdLastModifiedTime holds value of 'lastModifiedTime' option
var DevicesUpdateObjectModelCmdLastModifiedTime string

// DevicesUpdateObjectModelCmdModelId holds value of 'model_id' option
var DevicesUpdateObjectModelCmdModelId string

// DevicesUpdateObjectModelCmdObjectId holds value of 'objectId' option
var DevicesUpdateObjectModelCmdObjectId string

// DevicesUpdateObjectModelCmdObjectName holds value of 'objectName' option
var DevicesUpdateObjectModelCmdObjectName string

// DevicesUpdateObjectModelCmdOperatorId holds value of 'operatorId' option
var DevicesUpdateObjectModelCmdOperatorId string

// DevicesUpdateObjectModelCmdScope holds value of 'scope' option
var DevicesUpdateObjectModelCmdScope string

// DevicesUpdateObjectModelCmdBody holds contents of request body to be sent
var DevicesUpdateObjectModelCmdBody string

func InitDevicesUpdateObjectModelCmd() {
	DevicesUpdateObjectModelCmd.Flags().StringVar(&DevicesUpdateObjectModelCmdCreatedTime, "created-time", "", TRAPI(""))

	DevicesUpdateObjectModelCmd.Flags().StringVar(&DevicesUpdateObjectModelCmdFormat, "format", "", TRAPI(""))

	DevicesUpdateObjectModelCmd.Flags().StringVar(&DevicesUpdateObjectModelCmdLastModifiedTime, "last-modified-time", "", TRAPI(""))

	DevicesUpdateObjectModelCmd.Flags().StringVar(&DevicesUpdateObjectModelCmdModelId, "model-id", "", TRAPI("Target device object model ID"))

	DevicesUpdateObjectModelCmd.Flags().StringVar(&DevicesUpdateObjectModelCmdObjectId, "object-id", "", TRAPI(""))

	DevicesUpdateObjectModelCmd.Flags().StringVar(&DevicesUpdateObjectModelCmdObjectName, "object-name", "", TRAPI(""))

	DevicesUpdateObjectModelCmd.Flags().StringVar(&DevicesUpdateObjectModelCmdOperatorId, "operator-id", "", TRAPI(""))

	DevicesUpdateObjectModelCmd.Flags().StringVar(&DevicesUpdateObjectModelCmdScope, "scope", "", TRAPI(""))

	DevicesUpdateObjectModelCmd.Flags().StringVar(&DevicesUpdateObjectModelCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))

	DevicesUpdateObjectModelCmd.RunE = DevicesUpdateObjectModelCmdRunE

	DevicesCmd.AddCommand(DevicesUpdateObjectModelCmd)
}

// DevicesUpdateObjectModelCmd defines 'update-object-model' subcommand
var DevicesUpdateObjectModelCmd = &cobra.Command{
	Use:   "update-object-model",
	Short: TRAPI("/device_object_models/{model_id}:post:summary"),
	Long:  TRAPI(`/device_object_models/{model_id}:post:description`) + "\n\n" + createLinkToAPIReference("DeviceObjectModel", "updateDeviceObjectModel"),
}

func DevicesUpdateObjectModelCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectDevicesUpdateObjectModelCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectDevicesUpdateObjectModelCmdParams(ac *apiClient) (*apiParams, error) {
	var body string
	var parsedBody interface{}
	var err error
	body, err = buildBodyForDevicesUpdateObjectModelCmd()
	if err != nil {
		return nil, err
	}
	contentType := "application/json"

	if contentType == "application/json" {
		err = json.Unmarshal([]byte(body), &parsedBody)
		if err != nil {
			return nil, fmt.Errorf("invalid json format specified for `--body` parameter: %s", err)
		}
	}

	err = checkIfRequiredStringParameterIsSupplied("model_id", "model-id", "path", parsedBody, DevicesUpdateObjectModelCmdModelId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method:      "POST",
		path:        buildPathForDevicesUpdateObjectModelCmd("/device_object_models/{model_id}"),
		query:       buildQueryForDevicesUpdateObjectModelCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForDevicesUpdateObjectModelCmd(path string) string {

	escapedModelId := url.PathEscape(DevicesUpdateObjectModelCmdModelId)

	path = strReplace(path, "{"+"model_id"+"}", escapedModelId, -1)

	return path
}

func buildQueryForDevicesUpdateObjectModelCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForDevicesUpdateObjectModelCmd() (string, error) {
	var result map[string]interface{}

	if DevicesUpdateObjectModelCmdBody != "" {
		var b []byte
		var err error

		if strings.HasPrefix(DevicesUpdateObjectModelCmdBody, "@") {
			fname := strings.TrimPrefix(DevicesUpdateObjectModelCmdBody, "@")
			// #nosec
			b, err = os.ReadFile(fname)
		} else if DevicesUpdateObjectModelCmdBody == "-" {
			b, err = io.ReadAll(os.Stdin)
		} else {
			b = []byte(DevicesUpdateObjectModelCmdBody)
		}

		if err != nil {
			return "", err
		}

		err = json.Unmarshal(b, &result)
		if err != nil {
			return "", err
		}
	}

	if result == nil {
		result = make(map[string]interface{})
	}

	if DevicesUpdateObjectModelCmdCreatedTime != "" {
		result["createdTime"] = DevicesUpdateObjectModelCmdCreatedTime
	}

	if DevicesUpdateObjectModelCmdFormat != "" {
		result["format"] = DevicesUpdateObjectModelCmdFormat
	}

	if DevicesUpdateObjectModelCmdLastModifiedTime != "" {
		result["lastModifiedTime"] = DevicesUpdateObjectModelCmdLastModifiedTime
	}

	if DevicesUpdateObjectModelCmdObjectId != "" {
		result["objectId"] = DevicesUpdateObjectModelCmdObjectId
	}

	if DevicesUpdateObjectModelCmdObjectName != "" {
		result["objectName"] = DevicesUpdateObjectModelCmdObjectName
	}

	if DevicesUpdateObjectModelCmdOperatorId != "" {
		result["operatorId"] = DevicesUpdateObjectModelCmdOperatorId
	}

	if DevicesUpdateObjectModelCmdScope != "" {
		result["scope"] = DevicesUpdateObjectModelCmdScope
	}

	resultBytes, err := json.Marshal(result)
	if err != nil {
		return "", err
	}
	return string(resultBytes), nil
}
