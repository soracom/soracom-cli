// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// LagoonDeleteUserCmdLagoonUserId holds value of 'lagoon_user_id' option
var LagoonDeleteUserCmdLagoonUserId int64

func InitLagoonDeleteUserCmd() {
	LagoonDeleteUserCmd.Flags().Int64Var(&LagoonDeleteUserCmdLagoonUserId, "lagoon-user-id", 0, TRAPI("Target ID of the lagoon user."))

	LagoonDeleteUserCmd.RunE = LagoonDeleteUserCmdRunE

	LagoonCmd.AddCommand(LagoonDeleteUserCmd)
}

// LagoonDeleteUserCmd defines 'delete-user' subcommand
var LagoonDeleteUserCmd = &cobra.Command{
	Use:   "delete-user",
	Short: TRAPI("/lagoon/users/{lagoon_user_id}:delete:summary"),
	Long:  TRAPI(`/lagoon/users/{lagoon_user_id}:delete:description`) + "\n\n" + createLinkToAPIReference("Lagoon", "deleteLagoonUser"),
}

func LagoonDeleteUserCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	profile := getProfileIfExist()

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  profile,
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectLagoonDeleteUserCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectLagoonDeleteUserCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredIntegerParameterIsSupplied("lagoon_user_id", "lagoon-user-id", "path", parsedBody, LagoonDeleteUserCmdLagoonUserId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "DELETE",
		path:   buildPathForLagoonDeleteUserCmd("/lagoon/users/{lagoon_user_id}"),
		query:  buildQueryForLagoonDeleteUserCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForLagoonDeleteUserCmd(path string) string {

	path = strReplace(path, "{"+"lagoon_user_id"+"}", url.PathEscape(sprintf("%d", LagoonDeleteUserCmdLagoonUserId)), -1)

	return path
}

func buildQueryForLagoonDeleteUserCmd() url.Values {
	result := url.Values{}

	return result
}
