// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// SigfoxDevicesDeleteTagCmdDeviceId holds value of 'device_id' option
var SigfoxDevicesDeleteTagCmdDeviceId string

// SigfoxDevicesDeleteTagCmdTagName holds value of 'tag_name' option
var SigfoxDevicesDeleteTagCmdTagName string

func InitSigfoxDevicesDeleteTagCmd() {
	SigfoxDevicesDeleteTagCmd.Flags().StringVar(&SigfoxDevicesDeleteTagCmdDeviceId, "device-id", "", TRAPI("Device ID of the target Sigfox device."))

	SigfoxDevicesDeleteTagCmd.Flags().StringVar(&SigfoxDevicesDeleteTagCmdTagName, "tag-name", "", TRAPI("Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)"))

	SigfoxDevicesDeleteTagCmd.RunE = SigfoxDevicesDeleteTagCmdRunE

	SigfoxDevicesCmd.AddCommand(SigfoxDevicesDeleteTagCmd)
}

// SigfoxDevicesDeleteTagCmd defines 'delete-tag' subcommand
var SigfoxDevicesDeleteTagCmd = &cobra.Command{
	Use:   "delete-tag",
	Short: TRAPI("/sigfox_devices/{device_id}/tags/{tag_name}:delete:summary"),
	Long:  TRAPI(`/sigfox_devices/{device_id}/tags/{tag_name}:delete:description`) + "\n\n" + createLinkToAPIReference("SigfoxDevice", "deleteSigfoxDeviceTag"),
}

func SigfoxDevicesDeleteTagCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	profile := getProfileIfExist()

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  profile,
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectSigfoxDevicesDeleteTagCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSigfoxDevicesDeleteTagCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("device_id", "device-id", "path", parsedBody, SigfoxDevicesDeleteTagCmdDeviceId)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("tag_name", "tag-name", "path", parsedBody, SigfoxDevicesDeleteTagCmdTagName)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "DELETE",
		path:   buildPathForSigfoxDevicesDeleteTagCmd("/sigfox_devices/{device_id}/tags/{tag_name}"),
		query:  buildQueryForSigfoxDevicesDeleteTagCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSigfoxDevicesDeleteTagCmd(path string) string {

	escapedDeviceId := url.PathEscape(SigfoxDevicesDeleteTagCmdDeviceId)

	path = strReplace(path, "{"+"device_id"+"}", escapedDeviceId, -1)

	escapedTagName := url.PathEscape(SigfoxDevicesDeleteTagCmdTagName)

	path = strReplace(path, "{"+"tag_name"+"}", escapedTagName, -1)

	return path
}

func buildQueryForSigfoxDevicesDeleteTagCmd() url.Values {
	result := url.Values{}

	return result
}
