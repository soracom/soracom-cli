// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// FilesGetMetadataCmdPath holds value of 'path' option
var FilesGetMetadataCmdPath string

// FilesGetMetadataCmdScope holds value of 'scope' option
var FilesGetMetadataCmdScope string

func InitFilesGetMetadataCmd() {
	FilesGetMetadataCmd.Flags().StringVar(&FilesGetMetadataCmdPath, "path", "", TRAPI("Target path."))

	FilesGetMetadataCmd.Flags().StringVar(&FilesGetMetadataCmdScope, "scope", "private", TRAPI("Scope of the request. Specify 'private' to handle files uploaded to Harvest Files."))

	FilesGetMetadataCmd.RunE = FilesGetMetadataCmdRunE

	FilesCmd.AddCommand(FilesGetMetadataCmd)
}

// FilesGetMetadataCmd defines 'get-metadata' subcommand
var FilesGetMetadataCmd = &cobra.Command{
	Use:   "get-metadata",
	Short: TRAPI("/files/{scope}/{path}:head:summary"),
	Long:  TRAPI(`/files/{scope}/{path}:head:description`) + "\n\n" + createLinkToAPIReference("FileEntry", "getFileMetadata"),
}

func FilesGetMetadataCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectFilesGetMetadataCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectFilesGetMetadataCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("path", "path", "path", parsedBody, FilesGetMetadataCmdPath)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "HEAD",
		path:   buildPathForFilesGetMetadataCmd("/files/{scope}/{path}"),
		query:  buildQueryForFilesGetMetadataCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForFilesGetMetadataCmd(path string) string {

	escapedPath := harvestFilesPathEscape(FilesGetMetadataCmdPath)

	path = strReplace(path, "{"+"path"+"}", escapedPath, -1)

	escapedScope := url.PathEscape(FilesGetMetadataCmdScope)

	path = strReplace(path, "{"+"scope"+"}", escapedScope, -1)

	return path
}

func buildQueryForFilesGetMetadataCmd() url.Values {
	result := url.Values{}

	return result
}
