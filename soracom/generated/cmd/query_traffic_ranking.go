// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// QueryTrafficRankingCmdOrder holds value of 'order' option
var QueryTrafficRankingCmdOrder string

// QueryTrafficRankingCmdFrom holds value of 'from' option
var QueryTrafficRankingCmdFrom int64

// QueryTrafficRankingCmdLimit holds value of 'limit' option
var QueryTrafficRankingCmdLimit int64

// QueryTrafficRankingCmdTo holds value of 'to' option
var QueryTrafficRankingCmdTo int64

// QueryTrafficRankingCmdOutputJSONL indicates to output with jsonl format
var QueryTrafficRankingCmdOutputJSONL bool

func InitQueryTrafficRankingCmd() {
	QueryTrafficRankingCmd.Flags().StringVar(&QueryTrafficRankingCmdOrder, "order", "desc", TRAPI("The order of ranking."))

	QueryTrafficRankingCmd.Flags().Int64Var(&QueryTrafficRankingCmdFrom, "from", 0, TRAPI("The beginning point of searching range (UNIX time in milliseconds)."))

	QueryTrafficRankingCmd.Flags().Int64Var(&QueryTrafficRankingCmdLimit, "limit", 10, TRAPI("The maximum number of item to retrieve."))

	QueryTrafficRankingCmd.Flags().Int64Var(&QueryTrafficRankingCmdTo, "to", 0, TRAPI("The end point of searching range (UNIX time in milliseconds)."))

	QueryTrafficRankingCmd.Flags().BoolVar(&QueryTrafficRankingCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	QueryTrafficRankingCmd.RunE = QueryTrafficRankingCmdRunE

	QueryCmd.AddCommand(QueryTrafficRankingCmd)
}

// QueryTrafficRankingCmd defines 'traffic-ranking' subcommand
var QueryTrafficRankingCmd = &cobra.Command{
	Use:   "traffic-ranking",
	Short: TRAPI("/query/subscribers/traffic_volume/ranking:get:summary"),
	Long:  TRAPI(`/query/subscribers/traffic_volume/ranking:get:description`) + "\n\n" + createLinkToAPIReference("Query", "searchSubscriberTrafficVolumeRanking"),
}

func QueryTrafficRankingCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectQueryTrafficRankingCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if QueryTrafficRankingCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectQueryTrafficRankingCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error

	err = checkIfRequiredIntegerParameterIsSupplied("from", "from", "query", parsedBody, QueryTrafficRankingCmdFrom)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredIntegerParameterIsSupplied("to", "to", "query", parsedBody, QueryTrafficRankingCmdTo)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForQueryTrafficRankingCmd("/query/subscribers/traffic_volume/ranking"),
		query:  buildQueryForQueryTrafficRankingCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForQueryTrafficRankingCmd(path string) string {

	return path
}

func buildQueryForQueryTrafficRankingCmd() url.Values {
	result := url.Values{}

	if QueryTrafficRankingCmdOrder != "desc" {
		result.Add("order", QueryTrafficRankingCmdOrder)
	}

	if QueryTrafficRankingCmdFrom != 0 {
		result.Add("from", sprintf("%d", QueryTrafficRankingCmdFrom))
	}

	if QueryTrafficRankingCmdLimit != 10 {
		result.Add("limit", sprintf("%d", QueryTrafficRankingCmdLimit))
	}

	if QueryTrafficRankingCmdTo != 0 {
		result.Add("to", sprintf("%d", QueryTrafficRankingCmdTo))
	}

	return result
}
