// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// LogsGetCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var LogsGetCmdLastEvaluatedKey string

// LogsGetCmdResourceId holds value of 'resource_id' option
var LogsGetCmdResourceId string

// LogsGetCmdResourceType holds value of 'resource_type' option
var LogsGetCmdResourceType string

// LogsGetCmdService holds value of 'service' option
var LogsGetCmdService string

// LogsGetCmdFrom holds value of 'from' option
var LogsGetCmdFrom int64

// LogsGetCmdLimit holds value of 'limit' option
var LogsGetCmdLimit int64

// LogsGetCmdTo holds value of 'to' option
var LogsGetCmdTo int64

// LogsGetCmdPaginate indicates to do pagination or not
var LogsGetCmdPaginate bool

// LogsGetCmdOutputJSONL indicates to output with jsonl format
var LogsGetCmdOutputJSONL bool

func InitLogsGetCmd() {
	LogsGetCmd.Flags().StringVar(&LogsGetCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("The value contained in the 'x-soracom-next-key' header returned when fetching the previous page. Specify this to retrieve the next page. For more information, see [Retrieving Large Amounts of Data (Paging)](/en/docs/tools/api/paging/)."))

	LogsGetCmd.Flags().StringVar(&LogsGetCmdResourceId, "resource-id", "", TRAPI("The ID of the resource for which to retrieve error logs. The ID to specify varies depending on the value of 'resource_type'.| 'resource_type' | ID to specify ||-|-|| 'Subscriber' | The IMSI of the IoT SIM. The IMSI can be obtained from the [Sim:listSims API](#!/Sim/listSims). || 'Device' | The ID of the Inventory device. The ID can be obtained from the [Device:listDevices API](#!/Device/listDevices). || 'LoraDevice' | The ID of the LoRaWAN device. The ID can be obtained from the [LoraDevice:listLoraDevices API](#!/LoraDevice/listLoraDevices). || 'SigfoxDevice' | The ID of the Sigfox device. The ID can be obtained from the [SigfoxDevice:listSigfoxDevices API](#!/SigfoxDevice/listSigfoxDevices). |"))

	LogsGetCmd.Flags().StringVar(&LogsGetCmdResourceType, "resource-type", "", TRAPI("The type of resource for which to retrieve error logs.- 'Subscriber': IoT SIM.- 'Device': Inventory device.- 'LoraDevice': LoRaWAN device.- 'SigfoxDevice': Sigfox device."))

	LogsGetCmd.Flags().StringVar(&LogsGetCmdService, "service", "", TRAPI("The service name to filter error logs.- 'Air': SORACOM Air- 'Beam': SORACOM Beam- 'Funk': SORACOM Funk- 'Funnel': SORACOM Funnel- 'Harvest': SORACOM Harvest Data/Files- 'Napter': SORACOM Napter- 'Orbit': SORACOM Orbit- 'Unified': Unified Endpoint"))

	LogsGetCmd.Flags().Int64Var(&LogsGetCmdFrom, "from", 0, TRAPI("Start time of the period for which to retrieve error logs (UNIX time in milliseconds)."))

	LogsGetCmd.Flags().Int64Var(&LogsGetCmdLimit, "limit", 0, TRAPI("The maximum number of error logs to retrieve."))

	LogsGetCmd.Flags().Int64Var(&LogsGetCmdTo, "to", 0, TRAPI("End time of the period for which to retrieve error logs (UNIX time in milliseconds)."))

	LogsGetCmd.Flags().BoolVar(&LogsGetCmdPaginate, "fetch-all", false, TRCLI("cli.common_params.paginate.short_help"))

	LogsGetCmd.Flags().BoolVar(&LogsGetCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	LogsGetCmd.RunE = LogsGetCmdRunE

	LogsCmd.AddCommand(LogsGetCmd)
}

// LogsGetCmd defines 'get' subcommand
var LogsGetCmd = &cobra.Command{
	Use:   "get",
	Short: TRAPI("/logs:get:summary"),
	Long:  TRAPI(`/logs:get:description`) + "\n\n" + createLinkToAPIReference("Log", "getLogs"),
}

func LogsGetCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectLogsGetCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if LogsGetCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectLogsGetCmdParams(ac *apiClient) (*apiParams, error) {

	return &apiParams{
		method: "GET",
		path:   buildPathForLogsGetCmd("/logs"),
		query:  buildQueryForLogsGetCmd(),

		doPagination:                      LogsGetCmdPaginate,
		paginationKeyHeaderInResponse:     "x-soracom-next-key",
		paginationRequestParameterInQuery: "last_evaluated_key",

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForLogsGetCmd(path string) string {

	return path
}

func buildQueryForLogsGetCmd() url.Values {
	result := url.Values{}

	if LogsGetCmdLastEvaluatedKey != "" {
		result.Add("last_evaluated_key", LogsGetCmdLastEvaluatedKey)
	}

	if LogsGetCmdResourceId != "" {
		result.Add("resource_id", LogsGetCmdResourceId)
	}

	if LogsGetCmdResourceType != "" {
		result.Add("resource_type", LogsGetCmdResourceType)
	}

	if LogsGetCmdService != "" {
		result.Add("service", LogsGetCmdService)
	}

	if LogsGetCmdFrom != 0 {
		result.Add("from", sprintf("%d", LogsGetCmdFrom))
	}

	if LogsGetCmdLimit != 0 {
		result.Add("limit", sprintf("%d", LogsGetCmdLimit))
	}

	if LogsGetCmdTo != 0 {
		result.Add("to", sprintf("%d", LogsGetCmdTo))
	}

	return result
}
