// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"

	"io/ioutil"

	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// FilesPutCmdContentType holds value of 'content-type' option
var FilesPutCmdContentType string

// FilesPutCmdPath holds value of 'path' option
var FilesPutCmdPath string

// FilesPutCmdScope holds value of 'scope' option
var FilesPutCmdScope string

// FilesPutCmdBody holds contents of request body to be sent
var FilesPutCmdBody string

func init() {
	FilesPutCmd.Flags().StringVar(&FilesPutCmdContentType, "content-type", "", TRAPI("Content type of the file to upload"))

	FilesPutCmd.Flags().StringVar(&FilesPutCmdPath, "path", "", TRAPI("Target path"))

	FilesPutCmd.Flags().StringVar(&FilesPutCmdScope, "scope", "private", TRAPI("Scope of the request"))

	FilesPutCmd.Flags().StringVar(&FilesPutCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))
	FilesCmd.AddCommand(FilesPutCmd)
}

// FilesPutCmd defines 'put' subcommand
var FilesPutCmd = &cobra.Command{
	Use:   "put",
	Short: TRAPI("/files/{scope}/{path}:put:summary"),
	Long:  TRAPI(`/files/{scope}/{path}:put:description`),
	RunE: func(cmd *cobra.Command, args []string) error {
		opt := &apiClientOptions{
			BasePath: "/v1",
			Language: getSelectedLanguage(),
		}

		ac := newAPIClient(opt)
		if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
			ac.SetVerbose(true)
		}
		err := authHelper(ac, cmd, args)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		param, err := collectFilesPutCmdParams(ac)
		if err != nil {
			return err
		}

		body, err := ac.callAPI(param)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if body == "" {
			return nil
		}

		if jqString != "" {
			return processJQ(jqString, body)
		}

		if rawOutput {
			_, err = os.Stdout.Write([]byte(body))
		} else {
			return prettyPrintStringAsJSON(body)
		}
		return err
	},
}

func collectFilesPutCmdParams(ac *apiClient) (*apiParams, error) {
	body, err := buildBodyForFilesPutCmd()
	if err != nil {
		return nil, err
	}
	contentType := FilesPutCmdContentType

	if FilesPutCmdPath == "" {
		if body == "" {

			return nil, fmt.Errorf("required parameter '%s' is not specified", "path")
		}

	}

	return &apiParams{
		method:      "PUT",
		path:        buildPathForFilesPutCmd("/files/{scope}/{path}"),
		query:       buildQueryForFilesPutCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForFilesPutCmd(path string) string {

	escapedPath := harvestFilesPathEscape(FilesPutCmdPath)

	path = strReplace(path, "{"+"path"+"}", escapedPath, -1)

	escapedScope := url.PathEscape(FilesPutCmdScope)

	path = strReplace(path, "{"+"scope"+"}", escapedScope, -1)

	return path
}

func buildQueryForFilesPutCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForFilesPutCmd() (string, error) {
	var b []byte
	var err error

	if FilesPutCmdBody != "" {
		if strings.HasPrefix(FilesPutCmdBody, "@") {
			fname := strings.TrimPrefix(FilesPutCmdBody, "@")
			// #nosec
			b, err = ioutil.ReadFile(fname)
		} else if FilesPutCmdBody == "-" {
			b, err = ioutil.ReadAll(os.Stdin)
		} else {
			b = []byte(FilesPutCmdBody)
		}

		if err != nil {
			return "", err
		}
	}

	if b == nil {
		b = []byte{}
	}

	return string(b), nil
}
