// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// SoraletsGetCmdSoraletId holds value of 'soralet_id' option
var SoraletsGetCmdSoraletId string

func InitSoraletsGetCmd() {
	SoraletsGetCmd.Flags().StringVar(&SoraletsGetCmdSoraletId, "soralet-id", "", TRAPI("The identifier of Soralet."))

	SoraletsGetCmd.RunE = SoraletsGetCmdRunE

	SoraletsCmd.AddCommand(SoraletsGetCmd)
}

// SoraletsGetCmd defines 'get' subcommand
var SoraletsGetCmd = &cobra.Command{
	Use:   "get",
	Short: TRAPI("/soralets/{soralet_id}:get:summary"),
	Long:  TRAPI(`/soralets/{soralet_id}:get:description`) + "\n\n" + createLinkToAPIReference("Soralet", "getSoralet"),
}

func SoraletsGetCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	profile := getProfileIfExist()

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  profile,
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectSoraletsGetCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSoraletsGetCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("soralet_id", "soralet-id", "path", parsedBody, SoraletsGetCmdSoraletId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForSoraletsGetCmd("/soralets/{soralet_id}"),
		query:  buildQueryForSoraletsGetCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSoraletsGetCmd(path string) string {

	escapedSoraletId := url.PathEscape(SoraletsGetCmdSoraletId)

	path = strReplace(path, "{"+"soralet_id"+"}", escapedSoraletId, -1)

	return path
}

func buildQueryForSoraletsGetCmd() url.Values {
	result := url.Values{}

	return result
}
