// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// VolumeDiscountsConfirmCmdOrderId holds value of 'order_id' option
var VolumeDiscountsConfirmCmdOrderId string

func InitVolumeDiscountsConfirmCmd() {
	VolumeDiscountsConfirmCmd.Flags().StringVar(&VolumeDiscountsConfirmCmdOrderId, "order-id", "", TRAPI("Order ID. The order ID can be obtained from the [Order:createVolumeDiscountQuotation API](#/Order/createVolumeDiscountQuotation)."))

	VolumeDiscountsConfirmCmd.RunE = VolumeDiscountsConfirmCmdRunE

	VolumeDiscountsCmd.AddCommand(VolumeDiscountsConfirmCmd)
}

// VolumeDiscountsConfirmCmd defines 'confirm' subcommand
var VolumeDiscountsConfirmCmd = &cobra.Command{
	Use:   "confirm",
	Short: TRAPI("/volume_discounts/{order_id}/confirm:put:summary"),
	Long:  TRAPI(`/volume_discounts/{order_id}/confirm:put:description`) + "\n\n" + createLinkToAPIReference("Order", "confirmVolumeDiscountOrder"),
}

func VolumeDiscountsConfirmCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectVolumeDiscountsConfirmCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectVolumeDiscountsConfirmCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("order_id", "order-id", "path", parsedBody, VolumeDiscountsConfirmCmdOrderId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "PUT",
		path:   buildPathForVolumeDiscountsConfirmCmd("/volume_discounts/{order_id}/confirm"),
		query:  buildQueryForVolumeDiscountsConfirmCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForVolumeDiscountsConfirmCmd(path string) string {

	escapedOrderId := url.PathEscape(VolumeDiscountsConfirmCmdOrderId)

	path = strReplace(path, "{"+"order_id"+"}", escapedOrderId, -1)

	return path
}

func buildQueryForVolumeDiscountsConfirmCmd() url.Values {
	result := url.Values{}

	return result
}
