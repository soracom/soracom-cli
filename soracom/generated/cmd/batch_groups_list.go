// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// BatchGroupsListCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var BatchGroupsListCmdLastEvaluatedKey string

// BatchGroupsListCmdLimit holds value of 'limit' option
var BatchGroupsListCmdLimit int64

// BatchGroupsListCmdPaginate indicates to do pagination or not
var BatchGroupsListCmdPaginate bool

// BatchGroupsListCmdOutputJSONL indicates to output with jsonl format
var BatchGroupsListCmdOutputJSONL bool

func InitBatchGroupsListCmd() {
	BatchGroupsListCmd.Flags().StringVar(&BatchGroupsListCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("The value of the 'x-soracom-next-key' header returned in the response to the last request. Specify this to retrieve the next page of batch groups."))

	BatchGroupsListCmd.Flags().Int64Var(&BatchGroupsListCmdLimit, "limit", 0, TRAPI("Maximum number of batch groups to retrieve. The number of batch groups returned may be less than the specified value."))

	BatchGroupsListCmd.Flags().BoolVar(&BatchGroupsListCmdPaginate, "fetch-all", false, TRCLI("cli.common_params.paginate.short_help"))

	BatchGroupsListCmd.Flags().BoolVar(&BatchGroupsListCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	BatchGroupsListCmd.RunE = BatchGroupsListCmdRunE

	BatchGroupsCmd.AddCommand(BatchGroupsListCmd)
}

// BatchGroupsListCmd defines 'list' subcommand
var BatchGroupsListCmd = &cobra.Command{
	Use:   "list",
	Short: TRAPI("/batch_groups:get:summary"),
	Long:  TRAPI(`/batch_groups:get:description`) + "\n\n" + createLinkToAPIReference("Batch", "listBatchGroups"),
}

func BatchGroupsListCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectBatchGroupsListCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if BatchGroupsListCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectBatchGroupsListCmdParams(ac *apiClient) (*apiParams, error) {

	return &apiParams{
		method: "GET",
		path:   buildPathForBatchGroupsListCmd("/batch_groups"),
		query:  buildQueryForBatchGroupsListCmd(),

		doPagination:                      BatchGroupsListCmdPaginate,
		paginationKeyHeaderInResponse:     "x-soracom-next-key",
		paginationRequestParameterInQuery: "last_evaluated_key",

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForBatchGroupsListCmd(path string) string {

	return path
}

func buildQueryForBatchGroupsListCmd() url.Values {
	result := url.Values{}

	if BatchGroupsListCmdLastEvaluatedKey != "" {
		result.Add("last_evaluated_key", BatchGroupsListCmdLastEvaluatedKey)
	}

	if BatchGroupsListCmdLimit != 0 {
		result.Add("limit", sprintf("%d", BatchGroupsListCmdLimit))
	}

	return result
}
