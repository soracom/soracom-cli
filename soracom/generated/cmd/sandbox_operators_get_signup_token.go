// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"
	"fmt"
	"io"
	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// SandboxOperatorsGetSignupTokenCmdAuthKey holds value of 'authKey' option
var SandboxOperatorsGetSignupTokenCmdAuthKey string

// SandboxOperatorsGetSignupTokenCmdAuthKeyId holds value of 'authKeyId' option
var SandboxOperatorsGetSignupTokenCmdAuthKeyId string

// SandboxOperatorsGetSignupTokenCmdEmail holds value of 'email' option
var SandboxOperatorsGetSignupTokenCmdEmail string

// SandboxOperatorsGetSignupTokenCmdBody holds contents of request body to be sent
var SandboxOperatorsGetSignupTokenCmdBody string

func InitSandboxOperatorsGetSignupTokenCmd() {
	SandboxOperatorsGetSignupTokenCmd.Flags().StringVar(&SandboxOperatorsGetSignupTokenCmdAuthKey, "auth-key", "", TRAPI(""))

	SandboxOperatorsGetSignupTokenCmd.Flags().StringVar(&SandboxOperatorsGetSignupTokenCmdAuthKeyId, "auth-key-id", "", TRAPI(""))

	SandboxOperatorsGetSignupTokenCmd.Flags().StringVar(&SandboxOperatorsGetSignupTokenCmdEmail, "email", "", TRAPI("Email"))

	SandboxOperatorsGetSignupTokenCmd.Flags().StringVar(&SandboxOperatorsGetSignupTokenCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))

	SandboxOperatorsGetSignupTokenCmd.RunE = SandboxOperatorsGetSignupTokenCmdRunE

	SandboxOperatorsCmd.AddCommand(SandboxOperatorsGetSignupTokenCmd)
}

// SandboxOperatorsGetSignupTokenCmd defines 'get-signup-token' subcommand
var SandboxOperatorsGetSignupTokenCmd = &cobra.Command{
	Use:   "get-signup-token",
	Short: TRAPI("/sandbox/operators/token/{email}:post:summary"),
	Long:  TRAPI(`/sandbox/operators/token/{email}:post:description`) + "\n\n" + createLinkToAPIReference("API Sandbox: Operator", "sandboxGetSignupToken"),
}

func SandboxOperatorsGetSignupTokenCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	profile := getProfileIfExist()

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  profile,
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}

	param, err := collectSandboxOperatorsGetSignupTokenCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSandboxOperatorsGetSignupTokenCmdParams(ac *apiClient) (*apiParams, error) {
	var body string
	var parsedBody interface{}
	var err error
	body, err = buildBodyForSandboxOperatorsGetSignupTokenCmd()
	if err != nil {
		return nil, err
	}
	contentType := "application/json"

	if contentType == "application/json" {
		err = json.Unmarshal([]byte(body), &parsedBody)
		if err != nil {
			return nil, fmt.Errorf("invalid json format specified for `--body` parameter: %s", err)
		}
	}

	err = checkIfRequiredStringParameterIsSupplied("email", "email", "path", parsedBody, SandboxOperatorsGetSignupTokenCmdEmail)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method:      "POST",
		path:        buildPathForSandboxOperatorsGetSignupTokenCmd("/sandbox/operators/token/{email}"),
		query:       buildQueryForSandboxOperatorsGetSignupTokenCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSandboxOperatorsGetSignupTokenCmd(path string) string {

	escapedEmail := url.PathEscape(SandboxOperatorsGetSignupTokenCmdEmail)

	path = strReplace(path, "{"+"email"+"}", escapedEmail, -1)

	return path
}

func buildQueryForSandboxOperatorsGetSignupTokenCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForSandboxOperatorsGetSignupTokenCmd() (string, error) {
	var result map[string]interface{}

	if SandboxOperatorsGetSignupTokenCmdBody != "" {
		var b []byte
		var err error

		if strings.HasPrefix(SandboxOperatorsGetSignupTokenCmdBody, "@") {
			fname := strings.TrimPrefix(SandboxOperatorsGetSignupTokenCmdBody, "@")
			// #nosec
			b, err = os.ReadFile(fname)
		} else if SandboxOperatorsGetSignupTokenCmdBody == "-" {
			b, err = io.ReadAll(os.Stdin)
		} else {
			b = []byte(SandboxOperatorsGetSignupTokenCmdBody)
		}

		if err != nil {
			return "", err
		}

		err = json.Unmarshal(b, &result)
		if err != nil {
			return "", err
		}
	}

	if result == nil {
		result = make(map[string]interface{})
	}

	if SandboxOperatorsGetSignupTokenCmdAuthKey != "" {
		result["authKey"] = SandboxOperatorsGetSignupTokenCmdAuthKey
	}

	if SandboxOperatorsGetSignupTokenCmdAuthKeyId != "" {
		result["authKeyId"] = SandboxOperatorsGetSignupTokenCmdAuthKeyId
	}

	resultBytes, err := json.Marshal(result)
	if err != nil {
		return "", err
	}
	return string(resultBytes), nil
}
