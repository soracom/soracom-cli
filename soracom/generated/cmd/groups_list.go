// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// GroupsListCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var GroupsListCmdLastEvaluatedKey string

// GroupsListCmdTagName holds value of 'tag_name' option
var GroupsListCmdTagName string

// GroupsListCmdTagValue holds value of 'tag_value' option
var GroupsListCmdTagValue string

// GroupsListCmdTagValueMatchMode holds value of 'tag_value_match_mode' option
var GroupsListCmdTagValueMatchMode string

// GroupsListCmdLimit holds value of 'limit' option
var GroupsListCmdLimit int64

// GroupsListCmdPaginate indicates to do pagination or not
var GroupsListCmdPaginate bool

// GroupsListCmdOutputJSONL indicates to output with jsonl format
var GroupsListCmdOutputJSONL bool

func InitGroupsListCmd() {
	GroupsListCmd.Flags().StringVar(&GroupsListCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("The last Group ID retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next group onward."))

	GroupsListCmd.Flags().StringVar(&GroupsListCmdTagName, "tag-name", "", TRAPI("Tag name of the group. Filters through all groups that exactly match the tag name. When tag_name is specified, tag_value is required."))

	GroupsListCmd.Flags().StringVar(&GroupsListCmdTagValue, "tag-value", "", TRAPI("Tag value of the groups."))

	GroupsListCmd.Flags().StringVar(&GroupsListCmdTagValueMatchMode, "tag-value-match-mode", "exact", TRAPI("Search criteria for tag strings ('tag_value')."))

	GroupsListCmd.Flags().Int64Var(&GroupsListCmdLimit, "limit", 0, TRAPI("Maximum number of results per response page."))

	GroupsListCmd.Flags().BoolVar(&GroupsListCmdPaginate, "fetch-all", false, TRCLI("cli.common_params.paginate.short_help"))

	GroupsListCmd.Flags().BoolVar(&GroupsListCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	GroupsListCmd.RunE = GroupsListCmdRunE

	GroupsCmd.AddCommand(GroupsListCmd)
}

// GroupsListCmd defines 'list' subcommand
var GroupsListCmd = &cobra.Command{
	Use:   "list",
	Short: TRAPI("/groups:get:summary"),
	Long:  TRAPI(`/groups:get:description`) + "\n\n" + createLinkToAPIReference("Group", "listGroups"),
}

func GroupsListCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectGroupsListCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if GroupsListCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectGroupsListCmdParams(ac *apiClient) (*apiParams, error) {

	return &apiParams{
		method: "GET",
		path:   buildPathForGroupsListCmd("/groups"),
		query:  buildQueryForGroupsListCmd(),

		doPagination:                      GroupsListCmdPaginate,
		paginationKeyHeaderInResponse:     "x-soracom-next-key",
		paginationRequestParameterInQuery: "last_evaluated_key",

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForGroupsListCmd(path string) string {

	return path
}

func buildQueryForGroupsListCmd() url.Values {
	result := url.Values{}

	if GroupsListCmdLastEvaluatedKey != "" {
		result.Add("last_evaluated_key", GroupsListCmdLastEvaluatedKey)
	}

	if GroupsListCmdTagName != "" {
		result.Add("tag_name", GroupsListCmdTagName)
	}

	if GroupsListCmdTagValue != "" {
		result.Add("tag_value", GroupsListCmdTagValue)
	}

	if GroupsListCmdTagValueMatchMode != "exact" {
		result.Add("tag_value_match_mode", GroupsListCmdTagValueMatchMode)
	}

	if GroupsListCmdLimit != 0 {
		result.Add("limit", sprintf("%d", GroupsListCmdLimit))
	}

	return result
}
