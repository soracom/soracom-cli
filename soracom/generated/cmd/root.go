// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"github.com/spf13/cobra"
)

// RootCmd defines 'soracom' command
var RootCmd = &cobra.Command{
	Use:   "soracom",
	Short: "soracom command",
	Long:  `A command line tool to invoke SORACOM API`,
}

var specifiedProfileName string
var specifiedCoverageType string
var providedAPIKey string
var providedAPIToken string
var providedAuthKeyID string
var providedAuthKey string
var rawOutput bool
var noRetryOnError bool
var jqString string

func init() {
	RootCmd.PersistentFlags().StringVar(&specifiedProfileName, "profile", "", "Specify profile name")
	RootCmd.PersistentFlags().StringVar(&specifiedCoverageType, "coverage-type", "", "Specify coverage type, 'g' for Global, 'jp' for Japan")
	RootCmd.PersistentFlags().StringVar(&providedAPIKey, "api-key", "", "Specify API key otherwise soracom-cli performs authentication on behalf of you")
	RootCmd.PersistentFlags().StringVar(&providedAPIToken, "api-token", "", "Specify API token otherwise soracom-cli performs authentication on behalf of you")
	RootCmd.PersistentFlags().StringVar(&providedAuthKeyID, "auth-key-id", "", "Specify AuthKeyId to be used for authentication. If both --auth-key-id and --auth-key are specified, soracom-cli works without profiles. It means you don't need to run 'soracom configure' before running the command. This may be suitable for temporary execution. Please don't forget specifying these options along with --coverage-type.")
	RootCmd.PersistentFlags().StringVar(&providedAuthKey, "auth-key", "", "Specify AuthKey to be used for authentication. If both --auth-key-id and --auth-key are specified, soracom-cli works without profiles. It means you don't need to run 'soracom configure' before running the command. This may be suitable for temporary execution. Please don't forget specifying these options along with --coverage-type.")
	RootCmd.PersistentFlags().BoolVar(&rawOutput, "raw-output", false, "Specify soracom-cli to output raw response from the API endpoint")
	RootCmd.PersistentFlags().BoolVar(&noRetryOnError, "no-retry-on-error", false, "Specify soracom-cli not to retry even if the API endpoint returns an error")
	RootCmd.PersistentFlags().StringVar(&jqString, "jq", "", "Specify a query string in jq syntax to manipulate the response from the API")
}
