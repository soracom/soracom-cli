// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"
	"fmt"
	"io"
	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// SoraCamDevicesDataCreateEntryCmdContentType holds value of 'content-type' option
var SoraCamDevicesDataCreateEntryCmdContentType string

// SoraCamDevicesDataCreateEntryCmdDeviceId holds value of 'device_id' option
var SoraCamDevicesDataCreateEntryCmdDeviceId string

// SoraCamDevicesDataCreateEntryCmdBody holds contents of request body to be sent
var SoraCamDevicesDataCreateEntryCmdBody string

func InitSoraCamDevicesDataCreateEntryCmd() {
	SoraCamDevicesDataCreateEntryCmd.Flags().StringVar(&SoraCamDevicesDataCreateEntryCmdContentType, "content-type", "", TRAPI("The Content-Type of the data to be saved.- For JSON data, specify 'application/json'.- For text data, specify 'text/plain'.- For binary data, specify 'application/octet-stream'."))

	SoraCamDevicesDataCreateEntryCmd.Flags().StringVar(&SoraCamDevicesDataCreateEntryCmdDeviceId, "device-id", "", TRAPI("Device ID of the target SoraCam compatible camera device."))

	SoraCamDevicesDataCreateEntryCmd.Flags().StringVar(&SoraCamDevicesDataCreateEntryCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))

	SoraCamDevicesDataCreateEntryCmd.RunE = SoraCamDevicesDataCreateEntryCmdRunE

	SoraCamDevicesDataCmd.AddCommand(SoraCamDevicesDataCreateEntryCmd)
}

// SoraCamDevicesDataCreateEntryCmd defines 'create-entry' subcommand
var SoraCamDevicesDataCreateEntryCmd = &cobra.Command{
	Use:   "create-entry",
	Short: TRAPI("/sora_cam/devices/{device_id}/data:post:summary"),
	Long:  TRAPI(`/sora_cam/devices/{device_id}/data:post:description`) + "\n\n" + createLinkToAPIReference("SoraCam", "createSoraCamDeviceDataEntry"),
}

func SoraCamDevicesDataCreateEntryCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectSoraCamDevicesDataCreateEntryCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSoraCamDevicesDataCreateEntryCmdParams(ac *apiClient) (*apiParams, error) {
	var body string
	var parsedBody interface{}
	var err error
	body, err = buildBodyForSoraCamDevicesDataCreateEntryCmd()
	if err != nil {
		return nil, err
	}
	contentType := SoraCamDevicesDataCreateEntryCmdContentType

	if contentType == "application/json" {
		err = json.Unmarshal([]byte(body), &parsedBody)
		if err != nil {
			return nil, fmt.Errorf("invalid json format specified for `--body` parameter: %s", err)
		}
	}

	err = checkIfRequiredStringParameterIsSupplied("device_id", "device-id", "path", parsedBody, SoraCamDevicesDataCreateEntryCmdDeviceId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method:      "POST",
		path:        buildPathForSoraCamDevicesDataCreateEntryCmd("/sora_cam/devices/{device_id}/data"),
		query:       buildQueryForSoraCamDevicesDataCreateEntryCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSoraCamDevicesDataCreateEntryCmd(path string) string {

	escapedDeviceId := url.PathEscape(SoraCamDevicesDataCreateEntryCmdDeviceId)

	path = strReplace(path, "{"+"device_id"+"}", escapedDeviceId, -1)

	return path
}

func buildQueryForSoraCamDevicesDataCreateEntryCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForSoraCamDevicesDataCreateEntryCmd() (string, error) {
	var b []byte
	var err error

	if SoraCamDevicesDataCreateEntryCmdBody != "" {
		if strings.HasPrefix(SoraCamDevicesDataCreateEntryCmdBody, "@") {
			fname := strings.TrimPrefix(SoraCamDevicesDataCreateEntryCmdBody, "@")
			// #nosec
			b, err = os.ReadFile(fname)
		} else if SoraCamDevicesDataCreateEntryCmdBody == "-" {
			b, err = io.ReadAll(os.Stdin)
		} else {
			b = []byte(SoraCamDevicesDataCreateEntryCmdBody)
		}

		if err != nil {
			return "", err
		}
	}

	if b == nil {
		b = []byte{}
	}

	return string(b), nil
}
