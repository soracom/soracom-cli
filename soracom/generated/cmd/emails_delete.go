// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"

	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// EmailsDeleteCmdEmailId holds value of 'email_id' option
var EmailsDeleteCmdEmailId string

// EmailsDeleteCmdOperatorId holds value of 'operator_id' option
var EmailsDeleteCmdOperatorId string

func init() {
	EmailsDeleteCmd.Flags().StringVar(&EmailsDeleteCmdEmailId, "email-id", "", TRAPI("email_id"))

	EmailsDeleteCmd.Flags().StringVar(&EmailsDeleteCmdOperatorId, "operator-id", "", TRAPI("operator_id"))
	EmailsCmd.AddCommand(EmailsDeleteCmd)
}

// EmailsDeleteCmd defines 'delete' subcommand
var EmailsDeleteCmd = &cobra.Command{
	Use:   "delete",
	Short: TRAPI("/operators/{operator_id}/emails/{email_id}:delete:summary"),
	Long:  TRAPI(`/operators/{operator_id}/emails/{email_id}:delete:description`),
	RunE: func(cmd *cobra.Command, args []string) error {
		opt := &apiClientOptions{
			BasePath: "/v1",
			Language: getSelectedLanguage(),
		}

		ac := newAPIClient(opt)
		if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
			ac.SetVerbose(true)
		}
		err := authHelper(ac, cmd, args)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		param, err := collectEmailsDeleteCmdParams(ac)
		if err != nil {
			return err
		}

		body, err := ac.callAPI(param)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if body == "" {
			return nil
		}

		if jqString != "" {
			return processJQ(jqString, body)
		}

		if rawOutput {
			_, err = os.Stdout.Write([]byte(body))
		} else {
			return prettyPrintStringAsJSON(body)
		}
		return err
	},
}

func collectEmailsDeleteCmdParams(ac *apiClient) (*apiParams, error) {
	if EmailsDeleteCmdOperatorId == "" {
		EmailsDeleteCmdOperatorId = ac.OperatorID
	}

	if EmailsDeleteCmdEmailId == "" {
		return nil, fmt.Errorf("required parameter '%s' is not specified", "email-id")
	}

	return &apiParams{
		method: "DELETE",
		path:   buildPathForEmailsDeleteCmd("/operators/{operator_id}/emails/{email_id}"),
		query:  buildQueryForEmailsDeleteCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForEmailsDeleteCmd(path string) string {

	escapedEmailId := url.PathEscape(EmailsDeleteCmdEmailId)

	path = strReplace(path, "{"+"email_id"+"}", escapedEmailId, -1)

	escapedOperatorId := url.PathEscape(EmailsDeleteCmdOperatorId)

	path = strReplace(path, "{"+"operator_id"+"}", escapedOperatorId, -1)

	return path
}

func buildQueryForEmailsDeleteCmd() url.Values {
	result := url.Values{}

	return result
}
