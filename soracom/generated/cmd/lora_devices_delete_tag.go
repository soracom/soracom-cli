// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"

	"mime"
	"net/url"
	"os"

	"github.com/itchyny/gojq"
	"github.com/soracom/soracom-cli/generators/lib"
	"github.com/spf13/cobra"
)

// LoraDevicesDeleteTagCmdDeviceId holds value of 'device_id' option
var LoraDevicesDeleteTagCmdDeviceId string

// LoraDevicesDeleteTagCmdTagName holds value of 'tag_name' option
var LoraDevicesDeleteTagCmdTagName string

func init() {
	LoraDevicesDeleteTagCmd.Flags().StringVar(&LoraDevicesDeleteTagCmdDeviceId, "device-id", "", TRAPI("device ID of the target LoRa device."))

	LoraDevicesDeleteTagCmd.Flags().StringVar(&LoraDevicesDeleteTagCmdTagName, "tag-name", "", TRAPI("Tag name to be deleted. (This will be part of a URL path, so it needs to be percent-encoded. In JavaScript, specify the name after it has been encoded using encodeURIComponent().)"))
	LoraDevicesCmd.AddCommand(LoraDevicesDeleteTagCmd)
}

// LoraDevicesDeleteTagCmd defines 'delete-tag' subcommand
var LoraDevicesDeleteTagCmd = &cobra.Command{
	Use:   "delete-tag",
	Short: TRAPI("/lora_devices/{device_id}/tags/{tag_name}:delete:summary"),
	Long:  TRAPI(`/lora_devices/{device_id}/tags/{tag_name}:delete:description`),
	RunE: func(cmd *cobra.Command, args []string) error {

		var jq *gojq.Query
		if jqString != "" {
			var err error
			jq, err = gojq.Parse(jqString)
			if err != nil {
				return err
			}
		}

		opt := &apiClientOptions{
			BasePath: "/v1",
			Language: getSelectedLanguage(),
		}

		ac := newAPIClient(opt)
		if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
			ac.SetVerbose(true)
		}
		err := authHelper(ac, cmd, args)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		param, err := collectLoraDevicesDeleteTagCmdParams(ac)
		if err != nil {
			return err
		}

		body, contentType, err := ac.callAPI(param)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if body == "" {
			return nil
		}

		mediaType, _, err := mime.ParseMediaType(contentType)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if jq != nil {
			if mediaType == "application/json" {
				return processJQ(jq, body)
			} else {
				lib.WarnfStderr(TRCLI("cli.tried-jq-on-non-json") + "\n")
			}
		}

		if rawOutput {
			_, err = os.Stdout.Write([]byte(body))
		} else {
			return prettyPrintStringAsJSON(body)
		}
		return err
	},
}

func collectLoraDevicesDeleteTagCmdParams(ac *apiClient) (*apiParams, error) {
	if LoraDevicesDeleteTagCmdDeviceId == "" {
		return nil, fmt.Errorf("required parameter '%s' is not specified", "device-id")
	}

	if LoraDevicesDeleteTagCmdTagName == "" {
		return nil, fmt.Errorf("required parameter '%s' is not specified", "tag-name")
	}

	return &apiParams{
		method: "DELETE",
		path:   buildPathForLoraDevicesDeleteTagCmd("/lora_devices/{device_id}/tags/{tag_name}"),
		query:  buildQueryForLoraDevicesDeleteTagCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForLoraDevicesDeleteTagCmd(path string) string {

	escapedDeviceId := url.PathEscape(LoraDevicesDeleteTagCmdDeviceId)

	path = strReplace(path, "{"+"device_id"+"}", escapedDeviceId, -1)

	escapedTagName := url.PathEscape(LoraDevicesDeleteTagCmdTagName)

	path = strReplace(path, "{"+"tag_name"+"}", escapedTagName, -1)

	return path
}

func buildQueryForLoraDevicesDeleteTagCmd() url.Values {
	result := url.Values{}

	return result
}
