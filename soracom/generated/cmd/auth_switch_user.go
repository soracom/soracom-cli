// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"
	"fmt"
	"io"
	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// AuthSwitchUserCmdOperatorId holds value of 'operatorId' option
var AuthSwitchUserCmdOperatorId string

// AuthSwitchUserCmdUserName holds value of 'userName' option
var AuthSwitchUserCmdUserName string

// AuthSwitchUserCmdTokenTimeoutSeconds holds value of 'tokenTimeoutSeconds' option
var AuthSwitchUserCmdTokenTimeoutSeconds int64

// AuthSwitchUserCmdBody holds contents of request body to be sent
var AuthSwitchUserCmdBody string

func InitAuthSwitchUserCmd() {
	AuthSwitchUserCmd.Flags().StringVar(&AuthSwitchUserCmdOperatorId, "operator-id", "", TRAPI("Operator ID to be switched to."))

	AuthSwitchUserCmd.Flags().StringVar(&AuthSwitchUserCmdUserName, "user-name", "", TRAPI("The SAM user name of the specified operator ID to be switched to."))

	AuthSwitchUserCmd.Flags().Int64Var(&AuthSwitchUserCmdTokenTimeoutSeconds, "token-timeout-seconds", 3600, TRAPI("API key and API token validity period (in seconds) for the switched user. The default is 3600 seconds (1 hour). The minimum and maximum values are also shown below.- Minimum: 180 seconds (3 minutes)- Maximum value: 3600 seconds (1 hour)"))

	AuthSwitchUserCmd.Flags().StringVar(&AuthSwitchUserCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))

	AuthSwitchUserCmd.RunE = AuthSwitchUserCmdRunE

	AuthCmd.AddCommand(AuthSwitchUserCmd)
}

// AuthSwitchUserCmd defines 'switch-user' subcommand
var AuthSwitchUserCmd = &cobra.Command{
	Use:   "switch-user",
	Short: TRAPI("/auth/switch_user:post:summary"),
	Long:  TRAPI(`/auth/switch_user:post:description`) + "\n\n" + createLinkToAPIReference("Auth", "switchUser"),
}

func AuthSwitchUserCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectAuthSwitchUserCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectAuthSwitchUserCmdParams(ac *apiClient) (*apiParams, error) {
	var body string
	var parsedBody interface{}
	var err error
	body, err = buildBodyForAuthSwitchUserCmd()
	if err != nil {
		return nil, err
	}
	contentType := "application/json"

	if contentType == "application/json" {
		err = json.Unmarshal([]byte(body), &parsedBody)
		if err != nil {
			return nil, fmt.Errorf("invalid json format specified for `--body` parameter: %s", err)
		}
	}

	return &apiParams{
		method:      "POST",
		path:        buildPathForAuthSwitchUserCmd("/auth/switch_user"),
		query:       buildQueryForAuthSwitchUserCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForAuthSwitchUserCmd(path string) string {

	return path
}

func buildQueryForAuthSwitchUserCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForAuthSwitchUserCmd() (string, error) {
	var result map[string]interface{}

	if AuthSwitchUserCmdBody != "" {
		var b []byte
		var err error

		if strings.HasPrefix(AuthSwitchUserCmdBody, "@") {
			fname := strings.TrimPrefix(AuthSwitchUserCmdBody, "@")
			// #nosec
			b, err = os.ReadFile(fname)
		} else if AuthSwitchUserCmdBody == "-" {
			b, err = io.ReadAll(os.Stdin)
		} else {
			b = []byte(AuthSwitchUserCmdBody)
		}

		if err != nil {
			return "", err
		}

		err = json.Unmarshal(b, &result)
		if err != nil {
			return "", err
		}
	}

	if result == nil {
		result = make(map[string]interface{})
	}

	if AuthSwitchUserCmdOperatorId != "" {
		result["operatorId"] = AuthSwitchUserCmdOperatorId
	}

	if AuthSwitchUserCmdUserName != "" {
		result["userName"] = AuthSwitchUserCmdUserName
	}

	if AuthSwitchUserCmd.Flags().Lookup("token-timeout-seconds").Changed {
		result["tokenTimeoutSeconds"] = AuthSwitchUserCmdTokenTimeoutSeconds
	}

	resultBytes, err := json.Marshal(result)
	if err != nil {
		return "", err
	}
	return string(resultBytes), nil
}
