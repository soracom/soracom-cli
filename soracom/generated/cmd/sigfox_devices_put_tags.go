// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"
	"fmt"
	"io"
	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// SigfoxDevicesPutTagsCmdDeviceId holds value of 'device_id' option
var SigfoxDevicesPutTagsCmdDeviceId string

// SigfoxDevicesPutTagsCmdBody holds contents of request body to be sent
var SigfoxDevicesPutTagsCmdBody string

func InitSigfoxDevicesPutTagsCmd() {
	SigfoxDevicesPutTagsCmd.Flags().StringVar(&SigfoxDevicesPutTagsCmdDeviceId, "device-id", "", TRAPI("Device ID of the target Sigfox device."))

	SigfoxDevicesPutTagsCmd.Flags().StringVar(&SigfoxDevicesPutTagsCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))

	SigfoxDevicesPutTagsCmd.RunE = SigfoxDevicesPutTagsCmdRunE

	SigfoxDevicesCmd.AddCommand(SigfoxDevicesPutTagsCmd)
}

// SigfoxDevicesPutTagsCmd defines 'put-tags' subcommand
var SigfoxDevicesPutTagsCmd = &cobra.Command{
	Use:   "put-tags",
	Short: TRAPI("/sigfox_devices/{device_id}/tags:put:summary"),
	Long:  TRAPI(`/sigfox_devices/{device_id}/tags:put:description`) + "\n\n" + createLinkToAPIReference("SigfoxDevice", "putSigfoxDeviceTags"),
}

func SigfoxDevicesPutTagsCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	profile := getProfileIfExist()

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  profile,
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectSigfoxDevicesPutTagsCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSigfoxDevicesPutTagsCmdParams(ac *apiClient) (*apiParams, error) {
	var body string
	var parsedBody interface{}
	var err error
	body, err = buildBodyForSigfoxDevicesPutTagsCmd()
	if err != nil {
		return nil, err
	}
	contentType := "application/json"

	if contentType == "application/json" {
		err = json.Unmarshal([]byte(body), &parsedBody)
		if err != nil {
			return nil, fmt.Errorf("invalid json format specified for `--body` parameter: %s", err)
		}
	}

	err = checkIfRequiredStringParameterIsSupplied("device_id", "device-id", "path", parsedBody, SigfoxDevicesPutTagsCmdDeviceId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method:      "PUT",
		path:        buildPathForSigfoxDevicesPutTagsCmd("/sigfox_devices/{device_id}/tags"),
		query:       buildQueryForSigfoxDevicesPutTagsCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSigfoxDevicesPutTagsCmd(path string) string {

	escapedDeviceId := url.PathEscape(SigfoxDevicesPutTagsCmdDeviceId)

	path = strReplace(path, "{"+"device_id"+"}", escapedDeviceId, -1)

	return path
}

func buildQueryForSigfoxDevicesPutTagsCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForSigfoxDevicesPutTagsCmd() (string, error) {
	var b []byte
	var err error

	if SigfoxDevicesPutTagsCmdBody != "" {
		if strings.HasPrefix(SigfoxDevicesPutTagsCmdBody, "@") {
			fname := strings.TrimPrefix(SigfoxDevicesPutTagsCmdBody, "@")
			// #nosec
			b, err = os.ReadFile(fname)
		} else if SigfoxDevicesPutTagsCmdBody == "-" {
			b, err = io.ReadAll(os.Stdin)
		} else {
			b = []byte(SigfoxDevicesPutTagsCmdBody)
		}

		if err != nil {
			return "", err
		}
	}

	if b == nil {
		b = []byte{}
	}

	return string(b), nil
}
