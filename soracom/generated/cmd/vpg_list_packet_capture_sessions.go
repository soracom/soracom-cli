// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// VpgListPacketCaptureSessionsCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var VpgListPacketCaptureSessionsCmdLastEvaluatedKey string

// VpgListPacketCaptureSessionsCmdVpgId holds value of 'vpg_id' option
var VpgListPacketCaptureSessionsCmdVpgId string

// VpgListPacketCaptureSessionsCmdLimit holds value of 'limit' option
var VpgListPacketCaptureSessionsCmdLimit int64

// VpgListPacketCaptureSessionsCmdPaginate indicates to do pagination or not
var VpgListPacketCaptureSessionsCmdPaginate bool

// VpgListPacketCaptureSessionsCmdOutputJSONL indicates to output with jsonl format
var VpgListPacketCaptureSessionsCmdOutputJSONL bool

func InitVpgListPacketCaptureSessionsCmd() {
	VpgListPacketCaptureSessionsCmd.Flags().StringVar(&VpgListPacketCaptureSessionsCmdLastEvaluatedKey, "last-evaluated-key", "null", TRAPI("ID of the last packet capture session in the previous page. By specifying this parameter, you can continue to retrieve the list from the next packet capture session onward."))

	VpgListPacketCaptureSessionsCmd.Flags().StringVar(&VpgListPacketCaptureSessionsCmdVpgId, "vpg-id", "", TRAPI("VPG ID"))

	VpgListPacketCaptureSessionsCmd.Flags().Int64Var(&VpgListPacketCaptureSessionsCmdLimit, "limit", 10, TRAPI("Max number of results in a response."))

	VpgListPacketCaptureSessionsCmd.Flags().BoolVar(&VpgListPacketCaptureSessionsCmdPaginate, "fetch-all", false, TRCLI("cli.common_params.paginate.short_help"))

	VpgListPacketCaptureSessionsCmd.Flags().BoolVar(&VpgListPacketCaptureSessionsCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	VpgListPacketCaptureSessionsCmd.RunE = VpgListPacketCaptureSessionsCmdRunE

	VpgCmd.AddCommand(VpgListPacketCaptureSessionsCmd)
}

// VpgListPacketCaptureSessionsCmd defines 'list-packet-capture-sessions' subcommand
var VpgListPacketCaptureSessionsCmd = &cobra.Command{
	Use:   "list-packet-capture-sessions",
	Short: TRAPI("/virtual_private_gateways/{vpg_id}/packet_capture_sessions:get:summary"),
	Long:  TRAPI(`/virtual_private_gateways/{vpg_id}/packet_capture_sessions:get:description`) + "\n\n" + createLinkToAPIReference("VirtualPrivateGateway", "listPacketCaptureSessions"),
}

func VpgListPacketCaptureSessionsCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectVpgListPacketCaptureSessionsCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if VpgListPacketCaptureSessionsCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectVpgListPacketCaptureSessionsCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error

	err = checkIfRequiredStringParameterIsSupplied("vpg_id", "vpg-id", "path", parsedBody, VpgListPacketCaptureSessionsCmdVpgId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForVpgListPacketCaptureSessionsCmd("/virtual_private_gateways/{vpg_id}/packet_capture_sessions"),
		query:  buildQueryForVpgListPacketCaptureSessionsCmd(),

		doPagination:                      VpgListPacketCaptureSessionsCmdPaginate,
		paginationKeyHeaderInResponse:     "x-soracom-next-key",
		paginationRequestParameterInQuery: "last_evaluated_key",

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForVpgListPacketCaptureSessionsCmd(path string) string {

	escapedVpgId := url.PathEscape(VpgListPacketCaptureSessionsCmdVpgId)

	path = strReplace(path, "{"+"vpg_id"+"}", escapedVpgId, -1)

	return path
}

func buildQueryForVpgListPacketCaptureSessionsCmd() url.Values {
	result := url.Values{}

	if VpgListPacketCaptureSessionsCmdLastEvaluatedKey != "null" {
		result.Add("last_evaluated_key", VpgListPacketCaptureSessionsCmdLastEvaluatedKey)
	}

	if VpgListPacketCaptureSessionsCmdLimit != 10 {
		result.Add("limit", sprintf("%d", VpgListPacketCaptureSessionsCmdLimit))
	}

	return result
}
