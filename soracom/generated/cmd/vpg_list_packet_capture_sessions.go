// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"

	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// VpgListPacketCaptureSessionsCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var VpgListPacketCaptureSessionsCmdLastEvaluatedKey string

// VpgListPacketCaptureSessionsCmdVpgId holds value of 'vpg_id' option
var VpgListPacketCaptureSessionsCmdVpgId string

// VpgListPacketCaptureSessionsCmdLimit holds value of 'limit' option
var VpgListPacketCaptureSessionsCmdLimit int64

func init() {
	VpgListPacketCaptureSessionsCmd.Flags().StringVar(&VpgListPacketCaptureSessionsCmdLastEvaluatedKey, "last-evaluated-key", "null", TRAPI("ID of the last group in the previous page"))

	VpgListPacketCaptureSessionsCmd.Flags().StringVar(&VpgListPacketCaptureSessionsCmdVpgId, "vpg-id", "", TRAPI("VPG ID"))

	VpgListPacketCaptureSessionsCmd.Flags().Int64Var(&VpgListPacketCaptureSessionsCmdLimit, "limit", 10, TRAPI("Max number of results in a response"))
	VpgCmd.AddCommand(VpgListPacketCaptureSessionsCmd)
}

// VpgListPacketCaptureSessionsCmd defines 'list-packet-capture-sessions' subcommand
var VpgListPacketCaptureSessionsCmd = &cobra.Command{
	Use:   "list-packet-capture-sessions",
	Short: TRAPI("/virtual_private_gateways/{vpg_id}/packet_capture_sessions:get:summary"),
	Long:  TRAPI(`/virtual_private_gateways/{vpg_id}/packet_capture_sessions:get:description`),
	RunE: func(cmd *cobra.Command, args []string) error {
		opt := &apiClientOptions{
			BasePath: "/v1",
			Language: getSelectedLanguage(),
		}

		ac := newAPIClient(opt)
		if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
			ac.SetVerbose(true)
		}
		err := authHelper(ac, cmd, args)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		param, err := collectVpgListPacketCaptureSessionsCmdParams(ac)
		if err != nil {
			return err
		}

		body, err := ac.callAPI(param)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if body == "" {
			return nil
		}

		if jqString != "" {
			return processJQ(jqString, body)
		}

		if rawOutput {
			_, err = os.Stdout.Write([]byte(body))
		} else {
			return prettyPrintStringAsJSON(body)
		}
		return err
	},
}

func collectVpgListPacketCaptureSessionsCmdParams(ac *apiClient) (*apiParams, error) {

	if VpgListPacketCaptureSessionsCmdVpgId == "" {
		return nil, fmt.Errorf("required parameter '%s' is not specified", "vpg-id")
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForVpgListPacketCaptureSessionsCmd("/virtual_private_gateways/{vpg_id}/packet_capture_sessions"),
		query:  buildQueryForVpgListPacketCaptureSessionsCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForVpgListPacketCaptureSessionsCmd(path string) string {

	escapedVpgId := url.PathEscape(VpgListPacketCaptureSessionsCmdVpgId)

	path = strReplace(path, "{"+"vpg_id"+"}", escapedVpgId, -1)

	return path
}

func buildQueryForVpgListPacketCaptureSessionsCmd() url.Values {
	result := url.Values{}

	if VpgListPacketCaptureSessionsCmdLastEvaluatedKey != "null" {
		result.Add("last_evaluated_key", VpgListPacketCaptureSessionsCmdLastEvaluatedKey)
	}

	if VpgListPacketCaptureSessionsCmdLimit != 10 {
		result.Add("limit", sprintf("%d", VpgListPacketCaptureSessionsCmdLimit))
	}

	return result
}
