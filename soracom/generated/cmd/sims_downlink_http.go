// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"
	"fmt"
	"io"
	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// SimsDownlinkHttpCmdRequestBody holds value of 'body' option
var SimsDownlinkHttpCmdRequestBody string

// SimsDownlinkHttpCmdHost holds value of 'host' option
var SimsDownlinkHttpCmdHost string

// SimsDownlinkHttpCmdMethod holds value of 'method' option
var SimsDownlinkHttpCmdMethod string

// SimsDownlinkHttpCmdPath holds value of 'path' option
var SimsDownlinkHttpCmdPath string

// SimsDownlinkHttpCmdSimId holds value of 'sim_id' option
var SimsDownlinkHttpCmdSimId string

// SimsDownlinkHttpCmdPort holds value of 'port' option
var SimsDownlinkHttpCmdPort int64

// SimsDownlinkHttpCmdSkipVerify holds value of 'skipVerify' option
var SimsDownlinkHttpCmdSkipVerify bool

// SimsDownlinkHttpCmdSsl holds value of 'ssl' option
var SimsDownlinkHttpCmdSsl bool

// SimsDownlinkHttpCmdBody holds contents of request body to be sent
var SimsDownlinkHttpCmdBody string

func InitSimsDownlinkHttpCmd() {
	SimsDownlinkHttpCmd.Flags().StringVar(&SimsDownlinkHttpCmdRequestBody, "request-body", "", TRAPI("HTTP request body.**Warning**: The maximum size of an HTTP request, including the URL, headers, and body, is 5 MiB. If it exceeds 5 MiB, an error will be returned."))

	SimsDownlinkHttpCmd.Flags().StringVar(&SimsDownlinkHttpCmdHost, "host", "", TRAPI("Hostname. If not specified, the IP address of the IoT SIM will be used."))

	SimsDownlinkHttpCmd.Flags().StringVar(&SimsDownlinkHttpCmdMethod, "method", "", TRAPI("HTTP method."))

	SimsDownlinkHttpCmd.Flags().StringVar(&SimsDownlinkHttpCmdPath, "path", "", TRAPI("URL path (e.g., '/path/to/resource')."))

	SimsDownlinkHttpCmd.Flags().StringVar(&SimsDownlinkHttpCmdSimId, "sim-id", "", TRAPI("SIM ID of the target IoT SIM. The SIM ID can be obtained from the [Sim:listSims API](#/Sim/listSims)."))

	SimsDownlinkHttpCmd.Flags().Int64Var(&SimsDownlinkHttpCmdPort, "port", 80, TRAPI("Port number for the HTTP connection."))

	SimsDownlinkHttpCmd.Flags().BoolVar(&SimsDownlinkHttpCmdSkipVerify, "skip-verify", false, TRAPI("Whether to skip SSL certificate verification for HTTPS connections.- 'true': Skip verification.- 'false': Perform verification. However, if 'ssl' is 'false' (not using SSL communication), this setting will be ignored."))

	SimsDownlinkHttpCmd.Flags().BoolVar(&SimsDownlinkHttpCmdSsl, "ssl", false, TRAPI("Whether to use SSL communication.- 'true': Use SSL communication (HTTPS).- 'false': Do not use SSL communication (HTTP)."))

	SimsDownlinkHttpCmd.Flags().StringVar(&SimsDownlinkHttpCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))

	SimsDownlinkHttpCmd.RunE = SimsDownlinkHttpCmdRunE

	SimsCmd.AddCommand(SimsDownlinkHttpCmd)
}

// SimsDownlinkHttpCmd defines 'downlink-http' subcommand
var SimsDownlinkHttpCmd = &cobra.Command{
	Use:   "downlink-http",
	Short: TRAPI("/sims/{sim_id}/downlink/http:post:summary"),
	Long:  TRAPI(`/sims/{sim_id}/downlink/http:post:description`) + "\n\n" + createLinkToAPIReference("Sim", "sendDownlinkHttp"),
}

func SimsDownlinkHttpCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectSimsDownlinkHttpCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSimsDownlinkHttpCmdParams(ac *apiClient) (*apiParams, error) {
	var body string
	var parsedBody interface{}
	var err error
	body, err = buildBodyForSimsDownlinkHttpCmd()
	if err != nil {
		return nil, err
	}
	contentType := "application/json"

	if contentType == "application/json" {
		err = json.Unmarshal([]byte(body), &parsedBody)
		if err != nil {
			return nil, fmt.Errorf("invalid json format specified for `--body` parameter: %s", err)
		}
	}

	err = checkIfRequiredStringParameterIsSupplied("sim_id", "sim-id", "path", parsedBody, SimsDownlinkHttpCmdSimId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method:      "POST",
		path:        buildPathForSimsDownlinkHttpCmd("/sims/{sim_id}/downlink/http"),
		query:       buildQueryForSimsDownlinkHttpCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSimsDownlinkHttpCmd(path string) string {

	escapedSimId := url.PathEscape(SimsDownlinkHttpCmdSimId)

	path = strReplace(path, "{"+"sim_id"+"}", escapedSimId, -1)

	return path
}

func buildQueryForSimsDownlinkHttpCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForSimsDownlinkHttpCmd() (string, error) {
	var result map[string]interface{}

	if SimsDownlinkHttpCmdBody != "" {
		var b []byte
		var err error

		if strings.HasPrefix(SimsDownlinkHttpCmdBody, "@") {
			fname := strings.TrimPrefix(SimsDownlinkHttpCmdBody, "@")
			// #nosec
			b, err = os.ReadFile(fname)
		} else if SimsDownlinkHttpCmdBody == "-" {
			b, err = io.ReadAll(os.Stdin)
		} else {
			b = []byte(SimsDownlinkHttpCmdBody)
		}

		if err != nil {
			return "", err
		}

		err = json.Unmarshal(b, &result)
		if err != nil {
			return "", err
		}
	}

	if result == nil {
		result = make(map[string]interface{})
	}

	if SimsDownlinkHttpCmdRequestBody != "" {
		result["body"] = SimsDownlinkHttpCmdRequestBody
	}

	if SimsDownlinkHttpCmdHost != "" {
		result["host"] = SimsDownlinkHttpCmdHost
	}

	if SimsDownlinkHttpCmdMethod != "" {
		result["method"] = SimsDownlinkHttpCmdMethod
	}

	if SimsDownlinkHttpCmdPath != "" {
		result["path"] = SimsDownlinkHttpCmdPath
	}

	if SimsDownlinkHttpCmd.Flags().Lookup("port").Changed {
		result["port"] = SimsDownlinkHttpCmdPort
	}

	if SimsDownlinkHttpCmd.Flags().Lookup("skip-verify").Changed {
		result["skipVerify"] = SimsDownlinkHttpCmdSkipVerify
	}

	if SimsDownlinkHttpCmd.Flags().Lookup("ssl").Changed {
		result["ssl"] = SimsDownlinkHttpCmdSsl
	}

	resultBytes, err := json.Marshal(result)
	if err != nil {
		return "", err
	}
	return string(resultBytes), nil
}
