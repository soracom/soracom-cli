// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// RolesGetCmdOperatorId holds value of 'operator_id' option
var RolesGetCmdOperatorId string

// RolesGetCmdRoleId holds value of 'role_id' option
var RolesGetCmdRoleId string

func InitRolesGetCmd() {
	RolesGetCmd.Flags().StringVar(&RolesGetCmdOperatorId, "operator-id", "", TRAPI("Operator ID."))

	RolesGetCmd.Flags().StringVar(&RolesGetCmdRoleId, "role-id", "", TRAPI("Role ID."))

	RolesGetCmd.RunE = RolesGetCmdRunE

	RolesCmd.AddCommand(RolesGetCmd)
}

// RolesGetCmd defines 'get' subcommand
var RolesGetCmd = &cobra.Command{
	Use:   "get",
	Short: TRAPI("/operators/{operator_id}/roles/{role_id}:get:summary"),
	Long:  TRAPI(`/operators/{operator_id}/roles/{role_id}:get:description`) + "\n\n" + createLinkToAPIReference("Role", "getRole"),
}

func RolesGetCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectRolesGetCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectRolesGetCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	if RolesGetCmdOperatorId == "" {
		RolesGetCmdOperatorId = ac.apiCredentials.getOperatorID()
	}

	err = checkIfRequiredStringParameterIsSupplied("role_id", "role-id", "path", parsedBody, RolesGetCmdRoleId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForRolesGetCmd("/operators/{operator_id}/roles/{role_id}"),
		query:  buildQueryForRolesGetCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForRolesGetCmd(path string) string {

	escapedOperatorId := url.PathEscape(RolesGetCmdOperatorId)

	path = strReplace(path, "{"+"operator_id"+"}", escapedOperatorId, -1)

	escapedRoleId := url.PathEscape(RolesGetCmdRoleId)

	path = strReplace(path, "{"+"role_id"+"}", escapedRoleId, -1)

	return path
}

func buildQueryForRolesGetCmd() url.Values {
	result := url.Values{}

	return result
}
