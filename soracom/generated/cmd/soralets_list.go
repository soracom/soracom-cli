// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// SoraletsListCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var SoraletsListCmdLastEvaluatedKey string

// SoraletsListCmdSort holds value of 'sort' option
var SoraletsListCmdSort string

// SoraletsListCmdLimit holds value of 'limit' option
var SoraletsListCmdLimit int64

// SoraletsListCmdPaginate indicates to do pagination or not
var SoraletsListCmdPaginate bool

func init() {
	SoraletsListCmd.Flags().StringVar(&SoraletsListCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("The identifier of the last Soralet retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next Soralet onward."))

	SoraletsListCmd.Flags().StringVar(&SoraletsListCmdSort, "sort", "asc", TRAPI("Sort order"))

	SoraletsListCmd.Flags().Int64Var(&SoraletsListCmdLimit, "limit", 0, TRAPI("The maximum number of items in a response"))

	SoraletsListCmd.Flags().BoolVar(&SoraletsListCmdPaginate, "fetch-all", false, TRCLI("cli.common_params.paginate.short_help"))
	SoraletsCmd.AddCommand(SoraletsListCmd)
}

// SoraletsListCmd defines 'list' subcommand
var SoraletsListCmd = &cobra.Command{
	Use:   "list",
	Short: TRAPI("/soralets:get:summary"),
	Long:  TRAPI(`/soralets:get:description`),
	RunE: func(cmd *cobra.Command, args []string) error {
		opt := &apiClientOptions{
			BasePath: "/v1",
			Language: getSelectedLanguage(),
		}

		ac := newAPIClient(opt)
		if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
			ac.SetVerbose(true)
		}
		err := authHelper(ac, cmd, args)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		param, err := collectSoraletsListCmdParams(ac)
		if err != nil {
			return err
		}

		body, err := ac.callAPI(param)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if body == "" {
			return nil
		}

		if jqString != "" {
			return processJQ(jqString, body)
		}

		if rawOutput {
			_, err = os.Stdout.Write([]byte(body))
		} else {
			return prettyPrintStringAsJSON(body)
		}
		return err
	},
}

func collectSoraletsListCmdParams(ac *apiClient) (*apiParams, error) {

	return &apiParams{
		method: "GET",
		path:   buildPathForSoraletsListCmd("/soralets"),
		query:  buildQueryForSoraletsListCmd(),

		doPagination:                      SoraletsListCmdPaginate,
		paginationKeyHeaderInResponse:     "x-soracom-next-key",
		paginationRequestParameterInQuery: "last_evaluated_key",

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSoraletsListCmd(path string) string {

	return path
}

func buildQueryForSoraletsListCmd() url.Values {
	result := url.Values{}

	if SoraletsListCmdLastEvaluatedKey != "" {
		result.Add("last_evaluated_key", SoraletsListCmdLastEvaluatedKey)
	}

	if SoraletsListCmdSort != "asc" {
		result.Add("sort", SoraletsListCmdSort)
	}

	if SoraletsListCmdLimit != 0 {
		result.Add("limit", sprintf("%d", SoraletsListCmdLimit))
	}

	return result
}
