// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// GadgetsListCmdLastEvaluatedKey holds value of 'last_evaluated_key' option
var GadgetsListCmdLastEvaluatedKey string

// GadgetsListCmdProductId holds value of 'product_id' option
var GadgetsListCmdProductId string

// GadgetsListCmdTagName holds value of 'tag_name' option
var GadgetsListCmdTagName string

// GadgetsListCmdTagValue holds value of 'tag_value' option
var GadgetsListCmdTagValue string

// GadgetsListCmdTagValueMatchMode holds value of 'tag_value_match_mode' option
var GadgetsListCmdTagValueMatchMode string

// GadgetsListCmdLimit holds value of 'limit' option
var GadgetsListCmdLimit int64

// GadgetsListCmdPaginate indicates to do pagination or not
var GadgetsListCmdPaginate bool

func init() {
	GadgetsListCmd.Flags().StringVar(&GadgetsListCmdLastEvaluatedKey, "last-evaluated-key", "", TRAPI("The ID ({product_id}/{serial_number}) of the last gadget retrieved on the current page. By specifying this parameter, you can continue to retrieve the list from the next device onward."))

	GadgetsListCmd.Flags().StringVar(&GadgetsListCmdProductId, "product-id", "", TRAPI("Product ID for filtering the search."))

	GadgetsListCmd.Flags().StringVar(&GadgetsListCmdTagName, "tag-name", "", TRAPI("Tag name for filtering the search (exact match)."))

	GadgetsListCmd.Flags().StringVar(&GadgetsListCmdTagValue, "tag-value", "", TRAPI("Tag search string for filtering the search. Required when `tag_name` has been specified."))

	GadgetsListCmd.Flags().StringVar(&GadgetsListCmdTagValueMatchMode, "tag-value-match-mode", "exact", TRAPI("Tag match mode."))

	GadgetsListCmd.Flags().Int64Var(&GadgetsListCmdLimit, "limit", 0, TRAPI("Maximum number of gadgets to retrieve."))

	GadgetsListCmd.Flags().BoolVar(&GadgetsListCmdPaginate, "fetch-all", false, TRCLI("cli.common_params.paginate.short_help"))
	GadgetsCmd.AddCommand(GadgetsListCmd)
}

// GadgetsListCmd defines 'list' subcommand
var GadgetsListCmd = &cobra.Command{
	Use:   "list",
	Short: TRAPI("/gadgets:get:summary"),
	Long:  TRAPI(`/gadgets:get:description`),
	RunE: func(cmd *cobra.Command, args []string) error {
		opt := &apiClientOptions{
			BasePath: "/v1",
			Language: getSelectedLanguage(),
		}

		ac := newAPIClient(opt)
		if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
			ac.SetVerbose(true)
		}
		err := authHelper(ac, cmd, args)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		param, err := collectGadgetsListCmdParams(ac)
		if err != nil {
			return err
		}

		body, err := ac.callAPI(param)
		if err != nil {
			cmd.SilenceUsage = true
			return err
		}

		if body == "" {
			return nil
		}

		if jqString != "" {
			return processJQ(jqString, body)
		}

		if rawOutput {
			_, err = os.Stdout.Write([]byte(body))
		} else {
			return prettyPrintStringAsJSON(body)
		}
		return err
	},
}

func collectGadgetsListCmdParams(ac *apiClient) (*apiParams, error) {

	return &apiParams{
		method: "GET",
		path:   buildPathForGadgetsListCmd("/gadgets"),
		query:  buildQueryForGadgetsListCmd(),

		doPagination:                      GadgetsListCmdPaginate,
		paginationKeyHeaderInResponse:     "x-soracom-next-key",
		paginationRequestParameterInQuery: "last_evaluated_key",

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForGadgetsListCmd(path string) string {

	return path
}

func buildQueryForGadgetsListCmd() url.Values {
	result := url.Values{}

	if GadgetsListCmdLastEvaluatedKey != "" {
		result.Add("last_evaluated_key", GadgetsListCmdLastEvaluatedKey)
	}

	if GadgetsListCmdProductId != "" {
		result.Add("product_id", GadgetsListCmdProductId)
	}

	if GadgetsListCmdTagName != "" {
		result.Add("tag_name", GadgetsListCmdTagName)
	}

	if GadgetsListCmdTagValue != "" {
		result.Add("tag_value", GadgetsListCmdTagValue)
	}

	if GadgetsListCmdTagValueMatchMode != "exact" {
		result.Add("tag_value_match_mode", GadgetsListCmdTagValueMatchMode)
	}

	if GadgetsListCmdLimit != 0 {
		result.Add("limit", sprintf("%d", GadgetsListCmdLimit))
	}

	return result
}
