// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// PortMappingsListForSimCmdSimId holds value of 'sim_id' option
var PortMappingsListForSimCmdSimId string

// PortMappingsListForSimCmdOutputJSONL indicates to output with jsonl format
var PortMappingsListForSimCmdOutputJSONL bool

func InitPortMappingsListForSimCmd() {
	PortMappingsListForSimCmd.Flags().StringVar(&PortMappingsListForSimCmdSimId, "sim-id", "", TRAPI("SIM ID of the target IoT SIM."))

	PortMappingsListForSimCmd.Flags().BoolVar(&PortMappingsListForSimCmdOutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))

	PortMappingsListForSimCmd.RunE = PortMappingsListForSimCmdRunE

	PortMappingsCmd.AddCommand(PortMappingsListForSimCmd)
}

// PortMappingsListForSimCmd defines 'list-for-sim' subcommand
var PortMappingsListForSimCmd = &cobra.Command{
	Use:   "list-for-sim",
	Short: TRAPI("/port_mappings/sims/{sim_id}:get:summary"),
	Long:  TRAPI(`/port_mappings/sims/{sim_id}:get:description`) + "\n\n" + createLinkToAPIReference("PortMapping", "listPortMappingsForSim"),
}

func PortMappingsListForSimCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectPortMappingsListForSimCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		if PortMappingsListForSimCmdOutputJSONL {
			return printStringAsJSONL(body)
		}

		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectPortMappingsListForSimCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	err = checkIfRequiredStringParameterIsSupplied("sim_id", "sim-id", "path", parsedBody, PortMappingsListForSimCmdSimId)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "GET",
		path:   buildPathForPortMappingsListForSimCmd("/port_mappings/sims/{sim_id}"),
		query:  buildQueryForPortMappingsListForSimCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForPortMappingsListForSimCmd(path string) string {

	escapedSimId := url.PathEscape(PortMappingsListForSimCmdSimId)

	path = strReplace(path, "{"+"sim_id"+"}", escapedSimId, -1)

	return path
}

func buildQueryForPortMappingsListForSimCmd() url.Values {
	result := url.Values{}

	return result
}
