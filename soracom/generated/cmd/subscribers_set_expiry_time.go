// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"
	"fmt"
	"io"
	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// SubscribersSetExpiryTimeCmdExpiryAction holds value of 'expiryAction' option
var SubscribersSetExpiryTimeCmdExpiryAction string

// SubscribersSetExpiryTimeCmdImsi holds value of 'imsi' option
var SubscribersSetExpiryTimeCmdImsi string

// SubscribersSetExpiryTimeCmdExpiryTime holds value of 'expiryTime' option
var SubscribersSetExpiryTimeCmdExpiryTime int64

// SubscribersSetExpiryTimeCmdBody holds contents of request body to be sent
var SubscribersSetExpiryTimeCmdBody string

func InitSubscribersSetExpiryTimeCmd() {
	SubscribersSetExpiryTimeCmd.Flags().StringVar(&SubscribersSetExpiryTimeCmdExpiryAction, "expiry-action", "", TRAPI("Action at expiration. Specify one of the following Please refer to [Soracom Air Expiration Function](https://developers.soracom.io/en/docs/air/expiration/) for more detail. You have to disable termination protection if you want to specify 'terminate' as an action.If omitted, a null value is set.- 'doNothing' : do nothing- 'deleteSession' : delete session of the SIM if any- 'deactivate' : change the SIM status to Inactive- 'suspend' : change the SIM status to Suspended- 'terminate' : forcibly end any existing connections, and terminate the SIM- null value : not set (It works the same as 'doNothing')"))

	SubscribersSetExpiryTimeCmd.Flags().StringVar(&SubscribersSetExpiryTimeCmdImsi, "imsi", "", TRAPI("IMSI of the target subscriber."))

	SubscribersSetExpiryTimeCmd.Flags().Int64Var(&SubscribersSetExpiryTimeCmdExpiryTime, "expiry-time", 0, TRAPI("Timestamp of date and time set using the Expiration function (UNIX time in milliseconds)"))

	SubscribersSetExpiryTimeCmd.Flags().StringVar(&SubscribersSetExpiryTimeCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))

	SubscribersSetExpiryTimeCmd.RunE = SubscribersSetExpiryTimeCmdRunE

	SubscribersCmd.AddCommand(SubscribersSetExpiryTimeCmd)
}

// SubscribersSetExpiryTimeCmd defines 'set-expiry-time' subcommand
var SubscribersSetExpiryTimeCmd = &cobra.Command{
	Use:   "set-expiry-time",
	Short: TRAPI("/subscribers/{imsi}/set_expiry_time:post:summary"),
	Long:  TRAPI(`/subscribers/{imsi}/set_expiry_time:post:description`) + "\n\n" + createLinkToAPIReference("Subscriber", "setExpiryTime"),
}

func SubscribersSetExpiryTimeCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectSubscribersSetExpiryTimeCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectSubscribersSetExpiryTimeCmdParams(ac *apiClient) (*apiParams, error) {
	var body string
	var parsedBody interface{}
	var err error
	body, err = buildBodyForSubscribersSetExpiryTimeCmd()
	if err != nil {
		return nil, err
	}
	contentType := "application/json"

	if contentType == "application/json" {
		err = json.Unmarshal([]byte(body), &parsedBody)
		if err != nil {
			return nil, fmt.Errorf("invalid json format specified for `--body` parameter: %s", err)
		}
	}

	err = checkIfRequiredStringParameterIsSupplied("imsi", "imsi", "path", parsedBody, SubscribersSetExpiryTimeCmdImsi)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredIntegerParameterIsSupplied("expiryTime", "expiry-time", "body", parsedBody, SubscribersSetExpiryTimeCmdExpiryTime)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method:      "POST",
		path:        buildPathForSubscribersSetExpiryTimeCmd("/subscribers/{imsi}/set_expiry_time"),
		query:       buildQueryForSubscribersSetExpiryTimeCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForSubscribersSetExpiryTimeCmd(path string) string {

	escapedImsi := url.PathEscape(SubscribersSetExpiryTimeCmdImsi)

	path = strReplace(path, "{"+"imsi"+"}", escapedImsi, -1)

	return path
}

func buildQueryForSubscribersSetExpiryTimeCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForSubscribersSetExpiryTimeCmd() (string, error) {
	var result map[string]interface{}

	if SubscribersSetExpiryTimeCmdBody != "" {
		var b []byte
		var err error

		if strings.HasPrefix(SubscribersSetExpiryTimeCmdBody, "@") {
			fname := strings.TrimPrefix(SubscribersSetExpiryTimeCmdBody, "@")
			// #nosec
			b, err = os.ReadFile(fname)
		} else if SubscribersSetExpiryTimeCmdBody == "-" {
			b, err = io.ReadAll(os.Stdin)
		} else {
			b = []byte(SubscribersSetExpiryTimeCmdBody)
		}

		if err != nil {
			return "", err
		}

		err = json.Unmarshal(b, &result)
		if err != nil {
			return "", err
		}
	}

	if result == nil {
		result = make(map[string]interface{})
	}

	if SubscribersSetExpiryTimeCmdExpiryAction != "" {
		result["expiryAction"] = SubscribersSetExpiryTimeCmdExpiryAction
	}

	if SubscribersSetExpiryTimeCmd.Flags().Lookup("expiry-time").Changed {
		result["expiryTime"] = SubscribersSetExpiryTimeCmdExpiryTime
	}

	resultBytes, err := json.Marshal(result)
	if err != nil {
		return "", err
	}
	return string(resultBytes), nil
}
