// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"encoding/json"
	"fmt"
	"io"
	"net/url"
	"os"

	"strings"

	"github.com/spf13/cobra"
)

// EventHandlersUpdateCmdDescription holds value of 'description' option
var EventHandlersUpdateCmdDescription string

// EventHandlersUpdateCmdHandlerId holds value of 'handler_id' option
var EventHandlersUpdateCmdHandlerId string

// EventHandlersUpdateCmdName holds value of 'name' option
var EventHandlersUpdateCmdName string

// EventHandlersUpdateCmdStatus holds value of 'status' option
var EventHandlersUpdateCmdStatus string

// EventHandlersUpdateCmdTargetGroupId holds value of 'targetGroupId' option
var EventHandlersUpdateCmdTargetGroupId string

// EventHandlersUpdateCmdTargetImsi holds value of 'targetImsi' option
var EventHandlersUpdateCmdTargetImsi string

// EventHandlersUpdateCmdTargetOperatorId holds value of 'targetOperatorId' option
var EventHandlersUpdateCmdTargetOperatorId string

// EventHandlersUpdateCmdTargetSimId holds value of 'targetSimId' option
var EventHandlersUpdateCmdTargetSimId string

// EventHandlersUpdateCmdBody holds contents of request body to be sent
var EventHandlersUpdateCmdBody string

func InitEventHandlersUpdateCmd() {
	EventHandlersUpdateCmd.Flags().StringVar(&EventHandlersUpdateCmdDescription, "description", "", TRAPI("Summary."))

	EventHandlersUpdateCmd.Flags().StringVar(&EventHandlersUpdateCmdHandlerId, "handler-id", "", TRAPI("Event handler ID."))

	EventHandlersUpdateCmd.Flags().StringVar(&EventHandlersUpdateCmdName, "name", "", TRAPI("Event name."))

	EventHandlersUpdateCmd.Flags().StringVar(&EventHandlersUpdateCmdStatus, "status", "", TRAPI("The status of the event handler, whether it is active or inactive.- 'active': Active- 'inactive': Inactive"))

	EventHandlersUpdateCmd.Flags().StringVar(&EventHandlersUpdateCmdTargetGroupId, "target-group-id", "", TRAPI("The target group. All IoT SIMs belonging to the group are monitored.Specify only one of 'targetGroupId', 'targetImsi', 'targetOperatorId', or 'targetSimId'."))

	EventHandlersUpdateCmd.Flags().StringVar(&EventHandlersUpdateCmdTargetImsi, "target-imsi", "", TRAPI("The target IMSI of the IoT SIM.Specify only one of 'targetGroupId', 'targetImsi', 'targetOperatorId', or 'targetSimId'."))

	EventHandlersUpdateCmd.Flags().StringVar(&EventHandlersUpdateCmdTargetOperatorId, "target-operator-id", "", TRAPI("The target operator. All IoT SIMs in your account.Specify only one of 'targetGroupId', 'targetImsi', 'targetOperatorId', or 'targetSimId'."))

	EventHandlersUpdateCmd.Flags().StringVar(&EventHandlersUpdateCmdTargetSimId, "target-sim-id", "", TRAPI("The target SIM ID of the IoT SIM.Specify only one of 'targetGroupId', 'targetImsi', 'targetOperatorId', or 'targetSimId'."))

	EventHandlersUpdateCmd.Flags().StringVar(&EventHandlersUpdateCmdBody, "body", "", TRCLI("cli.common_params.body.short_help"))

	EventHandlersUpdateCmd.RunE = EventHandlersUpdateCmdRunE

	EventHandlersCmd.AddCommand(EventHandlersUpdateCmd)
}

// EventHandlersUpdateCmd defines 'update' subcommand
var EventHandlersUpdateCmd = &cobra.Command{
	Use:   "update",
	Short: TRAPI("/event_handlers/{handler_id}:put:summary"),
	Long:  TRAPI(`/event_handlers/{handler_id}:put:description`) + "\n\n" + createLinkToAPIReference("EventHandler", "updateEventHandler"),
}

func EventHandlersUpdateCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectEventHandlersUpdateCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectEventHandlersUpdateCmdParams(ac *apiClient) (*apiParams, error) {
	var body string
	var parsedBody interface{}
	var err error
	body, err = buildBodyForEventHandlersUpdateCmd()
	if err != nil {
		return nil, err
	}
	contentType := "application/json"

	if contentType == "application/json" {
		err = json.Unmarshal([]byte(body), &parsedBody)
		if err != nil {
			return nil, fmt.Errorf("invalid json format specified for `--body` parameter: %s", err)
		}
	}

	err = checkIfRequiredStringParameterIsSupplied("handler_id", "handler-id", "path", parsedBody, EventHandlersUpdateCmdHandlerId)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("name", "name", "body", parsedBody, EventHandlersUpdateCmdName)
	if err != nil {
		return nil, err
	}

	err = checkIfRequiredStringParameterIsSupplied("status", "status", "body", parsedBody, EventHandlersUpdateCmdStatus)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method:      "PUT",
		path:        buildPathForEventHandlersUpdateCmd("/event_handlers/{handler_id}"),
		query:       buildQueryForEventHandlersUpdateCmd(),
		contentType: contentType,
		body:        body,

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForEventHandlersUpdateCmd(path string) string {

	escapedHandlerId := url.PathEscape(EventHandlersUpdateCmdHandlerId)

	path = strReplace(path, "{"+"handler_id"+"}", escapedHandlerId, -1)

	return path
}

func buildQueryForEventHandlersUpdateCmd() url.Values {
	result := url.Values{}

	return result
}

func buildBodyForEventHandlersUpdateCmd() (string, error) {
	var result map[string]interface{}

	if EventHandlersUpdateCmdBody != "" {
		var b []byte
		var err error

		if strings.HasPrefix(EventHandlersUpdateCmdBody, "@") {
			fname := strings.TrimPrefix(EventHandlersUpdateCmdBody, "@")
			// #nosec
			b, err = os.ReadFile(fname)
		} else if EventHandlersUpdateCmdBody == "-" {
			b, err = io.ReadAll(os.Stdin)
		} else {
			b = []byte(EventHandlersUpdateCmdBody)
		}

		if err != nil {
			return "", err
		}

		err = json.Unmarshal(b, &result)
		if err != nil {
			return "", err
		}
	}

	if result == nil {
		result = make(map[string]interface{})
	}

	if EventHandlersUpdateCmdDescription != "" {
		result["description"] = EventHandlersUpdateCmdDescription
	}

	if EventHandlersUpdateCmdName != "" {
		result["name"] = EventHandlersUpdateCmdName
	}

	if EventHandlersUpdateCmdStatus != "" {
		result["status"] = EventHandlersUpdateCmdStatus
	}

	if EventHandlersUpdateCmdTargetGroupId != "" {
		result["targetGroupId"] = EventHandlersUpdateCmdTargetGroupId
	}

	if EventHandlersUpdateCmdTargetImsi != "" {
		result["targetImsi"] = EventHandlersUpdateCmdTargetImsi
	}

	if EventHandlersUpdateCmdTargetOperatorId != "" {
		result["targetOperatorId"] = EventHandlersUpdateCmdTargetOperatorId
	}

	if EventHandlersUpdateCmdTargetSimId != "" {
		result["targetSimId"] = EventHandlersUpdateCmdTargetSimId
	}

	resultBytes, err := json.Marshal(result)
	if err != nil {
		return "", err
	}
	return string(resultBytes), nil
}
