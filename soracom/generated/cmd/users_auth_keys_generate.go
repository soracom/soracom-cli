// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
	"fmt"
	"net/url"
	"os"

	"github.com/spf13/cobra"
)

// UsersAuthKeysGenerateCmdOperatorId holds value of 'operator_id' option
var UsersAuthKeysGenerateCmdOperatorId string

// UsersAuthKeysGenerateCmdUserName holds value of 'user_name' option
var UsersAuthKeysGenerateCmdUserName string

func InitUsersAuthKeysGenerateCmd() {
	UsersAuthKeysGenerateCmd.Flags().StringVar(&UsersAuthKeysGenerateCmdOperatorId, "operator-id", "", TRAPI("Operator ID"))

	UsersAuthKeysGenerateCmd.Flags().StringVar(&UsersAuthKeysGenerateCmdUserName, "user-name", "", TRAPI("user_name"))

	UsersAuthKeysGenerateCmd.RunE = UsersAuthKeysGenerateCmdRunE

	UsersAuthKeysCmd.AddCommand(UsersAuthKeysGenerateCmd)
}

// UsersAuthKeysGenerateCmd defines 'generate' subcommand
var UsersAuthKeysGenerateCmd = &cobra.Command{
	Use:   "generate",
	Short: TRAPI("/operators/{operator_id}/users/{user_name}/auth_keys:post:summary"),
	Long:  TRAPI(`/operators/{operator_id}/users/{user_name}/auth_keys:post:description`) + "\n\n" + createLinkToAPIReference("User", "generateUserAuthKey"),
}

func UsersAuthKeysGenerateCmdRunE(cmd *cobra.Command, args []string) error {

	if len(args) > 0 {
		return fmt.Errorf("unexpected arguments passed => %v", args)
	}

	opt := &apiClientOptions{
		BasePath: "/v1",
		Language: getSelectedLanguage(),
		Profile:  getProfileIfExists(),
	}

	ac := newAPIClient(opt)
	if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
		ac.SetVerbose(true)
	}
	err := ac.getAPICredentials()
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	param, err := collectUsersAuthKeysGenerateCmdParams(ac)
	if err != nil {
		return err
	}

	body, err := ac.callAPI(param)
	if err != nil {
		cmd.SilenceUsage = true
		return err
	}

	if body == "" {
		return nil
	}

	if rawOutput {
		_, err = os.Stdout.Write([]byte(body))
	} else {
		return prettyPrintStringAsJSON(body)
	}
	return err
}

func collectUsersAuthKeysGenerateCmdParams(ac *apiClient) (*apiParams, error) {
	var parsedBody interface{}
	var err error
	if UsersAuthKeysGenerateCmdOperatorId == "" {
		UsersAuthKeysGenerateCmdOperatorId = ac.apiCredentials.getOperatorID()
	}

	err = checkIfRequiredStringParameterIsSupplied("user_name", "user-name", "path", parsedBody, UsersAuthKeysGenerateCmdUserName)
	if err != nil {
		return nil, err
	}

	return &apiParams{
		method: "POST",
		path:   buildPathForUsersAuthKeysGenerateCmd("/operators/{operator_id}/users/{user_name}/auth_keys"),
		query:  buildQueryForUsersAuthKeysGenerateCmd(),

		noRetryOnError: noRetryOnError,
	}, nil
}

func buildPathForUsersAuthKeysGenerateCmd(path string) string {

	escapedOperatorId := url.PathEscape(UsersAuthKeysGenerateCmdOperatorId)

	path = strReplace(path, "{"+"operator_id"+"}", escapedOperatorId, -1)

	escapedUserName := url.PathEscape(UsersAuthKeysGenerateCmdUserName)

	path = strReplace(path, "{"+"user_name"+"}", escapedUserName, -1)

	return path
}

func buildQueryForUsersAuthKeysGenerateCmd() url.Values {
	result := url.Values{}

	return result
}
