// Code generated by soracom-cli generate-cmd. DO NOT EDIT.
package cmd

import (
  "fmt"
{{- if .BodyExists }}
  "encoding/json"
  "io"
{{- end }}
  "net/url"
  "os"
{{if .BodyExists}}
  "strings"
{{end}}

{{if .Deprecated }}
  "github.com/soracom/soracom-cli/generators/lib"
{{end}}
  "github.com/spf13/cobra"
)

{{- $prefix := .CommandVariableName -}}
{{- $suffix := .CommandVariableName -}}
{{- $cmdvar := .CommandVariableName -}}
{{- $bodyExists := .BodyExists -}}

{{- range .StringFlags}}
// {{$prefix}}{{.VarName}} holds value of '{{.Name}}' option
var {{$prefix}}{{.VarName}} string
{{end}}
{{- range .StringSliceFlags}}
// {{$prefix}}{{.VarName}} holds multiple values of '{{.Name}}' option
var {{$prefix}}{{.VarName}} []string
{{end}}
{{- range .IntegerFlags}}
// {{$prefix}}{{.VarName}} holds value of '{{.Name}}' option
var {{$prefix}}{{.VarName}} int64
{{end}}
{{- range .FloatFlags}}
// {{$prefix}}{{.VarName}} holds value of '{{.Name}}' option
var {{$prefix}}{{.VarName}} float64
{{end}}
{{- range .BoolFlags}}
// {{$prefix}}{{.VarName}} holds value of '{{.Name}}' option
var {{$prefix}}{{.VarName}} bool
{{end}}

{{- if .PaginationAvailable}}
// {{$prefix}}Paginate indicates to do pagination or not
var {{$prefix}}Paginate bool
{{end}}

{{- if .HasArrayResponse}}
// {{$prefix}}OutputJSONL indicates to output with jsonl format
var {{$prefix}}OutputJSONL bool
{{end}}

{{- if .BodyExists }}
// {{$prefix}}Body holds contents of request body to be sent
var {{$prefix}}Body string
{{end}}

func Init{{$cmdvar}}() {
{{- range .StringFlags}}
  {{$cmdvar}}.Flags().StringVar(&{{$prefix}}{{.VarName}}, "{{.LongOption}}", "{{.DefaultValue}}", TRAPI("{{.ShortHelp}}"))
{{end}}

{{- range .StringSliceFlags}}
  {{$cmdvar}}.Flags().StringSliceVar(&{{$prefix}}{{.VarName}}, "{{.LongOption}}", []string{}, TRAPI("{{.ShortHelp}}"))
{{end}}

{{- range .IntegerFlags}}
  {{$cmdvar}}.Flags().Int64Var(&{{$prefix}}{{.VarName}}, "{{.LongOption}}", {{.DefaultValue}}, TRAPI("{{.ShortHelp}}"))
{{end}}

{{- range .FloatFlags}}
  {{$cmdvar}}.Flags().Float64Var(&{{$prefix}}{{.VarName}}, "{{.LongOption}}", {{.DefaultValue}}, TRAPI("{{.ShortHelp}}"))
{{end}}

{{- range .BoolFlags}}
  {{$cmdvar}}.Flags().BoolVar(&{{$prefix}}{{.VarName}}, "{{.LongOption}}", {{.DefaultValue}}, TRAPI("{{.ShortHelp}}"))
{{end}}

{{- if .PaginationAvailable}}
  {{$cmdvar}}.Flags().BoolVar(&{{$prefix}}Paginate, "fetch-all", false, TRCLI("cli.common_params.paginate.short_help"))
{{end}}

{{- if .HasArrayResponse}}
  {{$cmdvar}}.Flags().BoolVar(&{{$prefix}}OutputJSONL, "jsonl", false, TRCLI("cli.common_params.jsonl.short_help"))
{{end}}

{{- if .BodyExists }}
  {{$cmdvar}}.Flags().StringVar(&{{$prefix}}Body, "body", "", TRCLI("cli.common_params.body.short_help"))
{{end}}

  {{$cmdvar}}.RunE = {{$cmdvar}}RunE

  {{.ParentCommandVariableName}}.AddCommand({{$cmdvar}})
}

// {{.CommandVariableName}} defines '{{.Use}}' subcommand
var {{ $cmdvar }} = &cobra.Command{
  Use: "{{.Use}}",
  Short: TRAPI("{{.Short}}"),
  Long: TRAPI(`{{.Long}}`) + "\n\n" + createLinkToAPIReference("{{.Tag}}", "{{.OperationID}}"),
}

func {{$cmdvar}}RunE(cmd *cobra.Command, args []string) error {
    {{- if .Deprecated}}
    lib.WarnfStderr(TRCLI("cli.deprecated-api")+"\n")
    {{- if ne .AlternativeCommand ""}}
    lib.WarnfStderr(TRCLI("cli.alternative-api-suggestion")+"\n", "{{.AlternativeCommand}}")
    {{end}}

    {{end}}

    if len(args) > 0 {
        return fmt.Errorf("unexpected arguments passed => %v", args)
    }

    profile := getProfileIfExist()

    opt := &apiClientOptions{
      BasePath: "{{.BasePath}}",
      Language: getSelectedLanguage(),
      Profile: profile,
    }

    ac := newAPIClient(opt)
    if v := os.Getenv("SORACOM_VERBOSE"); v != "" {
      ac.SetVerbose(true)
    }

    {{- if .RequireAuth}}
    err := ac.getAPICredentials()
    if err != nil {
      cmd.SilenceUsage = true
      return err
    }
    {{end}}

    param, err := collect{{$cmdvar}}Params(ac)
    if err != nil {
      return err
    }

    body, err := ac.callAPI(param)
    if err != nil {
      cmd.SilenceUsage = true
      return err
    }

    if body == "" {
      return nil
    }

    {{- if .ResponseBodyRaw}}
    rawOutput = true
    {{end}}

    if rawOutput {
      _, err = os.Stdout.Write([]byte(body))
    } else {
      {{- if .HasArrayResponse}}
      if {{$prefix}}OutputJSONL {
        return printStringAsJSONL(body)
      }
      {{end}}
      return prettyPrintStringAsJSON(body)
    }
    return err
  }

func collect{{$cmdvar}}Params(ac *apiClient) (*apiParams, error) {
  {{- if .BodyExists }}
  var body string
  var parsedBody interface{}
  var err error
  {{- end }}
  {{- if not .BodyExists}}
  {{- if .RequiredFlagExists }}
  var parsedBody interface{}
  var err error
  {{- end }}
  {{- end }}

  {{- if .RequireOperatorID }}
  if {{$prefix}}OperatorId == "" {
    {{$prefix}}OperatorId = ac.apiCredentials.getOperatorID()
  }
  {{end}}

  {{- if .BodyExists }}
  body, err = buildBodyFor{{$suffix}}()
  if err != nil {
    return nil, err
  }

  {{- if .ContentTypeFromArg }}
  contentType := {{$prefix}}{{.ContentTypeVarName}}
  {{else}}
  contentType := "{{.ContentType}}"
  {{end}}

  if contentType == "application/json" {
    err = json.Unmarshal([]byte(body), &parsedBody)
    if err != nil {
      return nil, fmt.Errorf("invalid json format specified for `--body` parameter: %s", err)
    }
  }
  {{end}}

  {{- /* check if all required parameters are supplied */ -}}
  {{- range .StringFlags}}
  {{- if .Required}}
  {{- if ne .VarName "OperatorId" }}
  {{- if not .DefaultValueSpecified }}
  err = checkIfRequiredStringParameterIsSupplied("{{.Name}}", "{{.LongOption}}", "{{.In}}", parsedBody, {{$prefix}}{{.VarName}})
  if err != nil {
    return nil, err
  }
  {{end}}
  {{end}}
  {{end}}
  {{end}}

  {{- range .StringSliceFlags}}
  {{- if .Required}}
  {{- if not .DefaultValueSpecified }}
  err = checkIfRequiredStringSliceParameterIsSupplied("{{.Name}}", "{{.LongOption}}", "{{.In}}", parsedBody, {{$prefix}}{{.VarName}})
  if err != nil {
    return nil, err
  }
  {{end}}
  {{end}}
  {{end}}

  {{- range .IntegerFlags}}
  {{- if .Required}}
  {{- if not .DefaultValueSpecified }}
  err = checkIfRequiredIntegerParameterIsSupplied("{{.Name}}", "{{.LongOption}}", "{{.In}}", parsedBody, {{$prefix}}{{.VarName}})
  if err != nil {
    return nil, err
  }
  {{end}}
  {{end}}
  {{end}}

  {{- range .FloatFlags}}
  {{- if .Required}}
  {{- if not .DefaultValueSpecified }}
  err = checkIfRequiredFloatParameterIsSupplied("{{.Name}}", "{{.LongOption}}", "{{.In}}", parsedBody, {{$prefix}}{{.VarName}})
  if err != nil {
    return nil, err
  }
  {{end}}
  {{end}}
  {{end}}

  {{- range .BoolFlags}}
  {{- if .Required}}
  {{- if not .DefaultValueSpecified }}
  err = checkIfRequiredBoolParameterIsSupplied("{{.Name}}", "{{.LongOption}}", "{{.In}}", parsedBody, {{$prefix}}{{.VarName}})
  if err != nil {
    return nil, err
  }
  {{end}}
  {{end}}
  {{end}}

  return &apiParams{
    method: "{{.Method}}",
    path: buildPathFor{{$suffix}}("{{.Path}}"),
    query: buildQueryFor{{$suffix}}(),
    {{if .BodyExists }}contentType: contentType,{{end}}
    {{if .BodyExists }}body: body,{{end}}
    {{if .PaginationAvailable}}
    doPagination: {{$prefix}}Paginate,
    paginationKeyHeaderInResponse: "{{.PaginationKeyHeaderInResponse}}",
    paginationRequestParameterInQuery: "{{.PaginationRequestParameterInQuery}}",
    {{end}}
    noRetryOnError: noRetryOnError,
  }, nil
}

func buildPathFor{{$suffix}}(path string) string {
  {{range .StringFlags}}
  {{if eq .In "path"}}
  {{if .HarvestFilesPathEscape}}
  escaped{{.VarName}} := harvestFilesPathEscape({{$prefix}}{{.VarName}})
  {{else}}
  escaped{{.VarName}} := url.PathEscape({{$prefix}}{{.VarName}})
  {{end}}
  path = strReplace(path, "{" + "{{.Name}}" + "}", escaped{{.VarName}}, -1)
  {{end}}
  {{end}}

  {{range .IntegerFlags}}
  {{if eq .In "path"}}
  path = strReplace(path, "{" + "{{.Name}}" + "}", url.PathEscape(sprintf("%d", {{$prefix}}{{.VarName}})), -1)
  {{end}}
  {{end}}
  return path
}

func buildQueryFor{{$suffix}}() url.Values {
  result := url.Values{}
  {{range .StringFlags}}
  {{if eq .In "query"}}
  if {{$prefix}}{{.VarName}} != "{{.DefaultValue}}" {
    result.Add("{{.Name}}", {{$prefix}}{{.VarName}})
  }
  {{end}}
  {{end}}
  {{range .StringSliceFlags}}
  {{if eq .In "query"}}
  for _, s := range {{$prefix}}{{.VarName}} {
    if s != "{{.DefaultValue}}" {
      result.Add("{{.Name}}", s)
    }
  }
  {{end}}
  {{end}}

  {{range .IntegerFlags}}
  {{if eq .In "query"}}
  if {{$prefix}}{{.VarName}} != {{.DefaultValue}} {
    result.Add("{{.Name}}", sprintf("%d", {{$prefix}}{{.VarName}}))
  }
  {{end}}
  {{end}}

  {{range .FloatFlags}}
  {{if eq .In "query"}}
  if {{$prefix}}{{.VarName}} != {{.DefaultValue}} {
    result.Add("{{.Name}}", sprintf("%f", {{$prefix}}{{.VarName}}))
  }
  {{end}}
  {{end}}

  {{range .BoolFlags}}
  {{if eq .In "query"}}
  if {{$prefix}}{{.VarName}} != {{.DefaultValue}} {
    result.Add("{{.Name}}", sprintf("%t", {{$prefix}}{{.VarName}}))
  }
  {{end}}
  {{end}}

  return result
}

{{if .BodyExists }}
{{if not .SendBodyRaw }}
func buildBodyFor{{$suffix}}() (string, error) {
  var result map[string]interface{}

  if {{$prefix}}Body != "" {
    var b []byte
    var err error

    if strings.HasPrefix({{$prefix}}Body, "@") {
      fname := strings.TrimPrefix({{$prefix}}Body, "@")
      // #nosec
      b, err = os.ReadFile(fname)
    } else if {{$prefix}}Body == "-" {
      b, err = io.ReadAll(os.Stdin)
    } else {
      b = []byte({{$prefix}}Body)
    }

    if err != nil {
      return "", err
    }

    err = json.Unmarshal(b, &result)
    if err != nil {
      return "", err
    }
  }

  if result == nil {
    result = make(map[string]interface{})
  }

  {{range .StringFlags}}
  {{if eq .In "body"}}
  if {{$prefix}}{{.VarName}} != "{{.DefaultValue}}" {
    result["{{.Name}}"] = {{$prefix}}{{.VarName}}
  }
  {{end}}
  {{end}}

  {{range .StringSliceFlags}}
  {{if eq .In "body"}}
  if len({{$prefix}}{{.VarName}}) != 0 {
    result["{{.Name}}"] = {{$prefix}}{{.VarName}}
  }
  {{end}}
  {{end}}

  {{range .IntegerFlags}}
  {{if eq .In "body"}}
  if {{$cmdvar}}.Flags().Lookup("{{.LongOption}}").Changed {
    result["{{.Name}}"] = {{$prefix}}{{.VarName}}
  }
  {{end}}
  {{end}}

  {{range .FloatFlags}}
  {{if eq .In "body"}}
  if {{$cmdvar}}.Flags().Lookup("{{.LongOption}}").Changed {
    result["{{.Name}}"] = {{$prefix}}{{.VarName}}
  }
  {{end}}
  {{end}}

  {{range .BoolFlags}}
  {{if eq .In "body"}}
  if {{$cmdvar}}.Flags().Lookup("{{.LongOption}}").Changed {
    result["{{.Name}}"] = {{$prefix}}{{.VarName}}
  }
  {{end}}
  {{end}}

  resultBytes, err := json.Marshal(result)
  if err != nil {
    return "", err
  }
  return string(resultBytes), nil
}
{{else}}

func buildBodyFor{{$suffix}}() (string, error) {
  var b []byte
  var err error

  if {{$prefix}}Body != "" {
    if strings.HasPrefix({{$prefix}}Body, "@") {
      fname := strings.TrimPrefix({{$prefix}}Body, "@")
      // #nosec
      b, err = os.ReadFile(fname)
    } else if {{$prefix}}Body == "-" {
      b, err = io.ReadAll(os.Stdin)
    } else {
      b = []byte({{$prefix}}Body)
    }

    if err != nil {
      return "", err
    }
  }

  if b == nil {
    b = []byte{}
  }

  return string(b), nil
}
{{end}}
{{end}}
